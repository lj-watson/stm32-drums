
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000533c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00045808  0800550c  0800550c  0000650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804ad14  0804ad14  0004c05c  2**0
                  CONTENTS
  4 .ARM          00000008  0804ad14  0804ad14  0004bd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804ad1c  0804ad1c  0004c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804ad1c  0804ad1c  0004bd1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804ad20  0804ad20  0004bd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0804ad24  0004c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  2000005c  0804ad80  0004c05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  0804ad80  0004c7a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c51  00000000  00000000  0004c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f6  00000000  00000000  00060cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  000635d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eef  00000000  00000000  000648c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234c1  00000000  00000000  000657b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179f2  00000000  00000000  00088c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d74bf  00000000  00000000  000a066a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177b29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005768  00000000  00000000  00177b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0017d2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080054f4 	.word	0x080054f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080054f4 	.word	0x080054f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005a4:	f5ad 7d3e 	sub.w	sp, sp, #760	@ 0x2f8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 ff73 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 fac7 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 fc2f 	bl	8000e14 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005b6:	f000 fbd5 	bl	8000d64 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ba:	f000 fbfd 	bl	8000db8 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 80005be:	f000 fb2b 	bl	8000c18 <MX_DAC_Init>
  MX_TIM4_Init();
 80005c2:	f000 fb81 	bl	8000cc8 <MX_TIM4_Init>
  MX_I2C1_Init();
 80005c6:	f000 fb51 	bl	8000c6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  char uart_buf[50];
  int uart_buf_len;
  int sample_counts[NUM_TRACKS] = {
 80005ca:	4bc7      	ldr	r3, [pc, #796]	@ (80008e8 <main+0x348>)
 80005cc:	f507 7421 	add.w	r4, r7, #644	@ 0x284
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	682b      	ldr	r3, [r5, #0]
 80005d8:	6023      	str	r3, [r4, #0]
	  NUM_SAMPLES(kick),
	  NUM_SAMPLES(snare),
	  NUM_SAMPLES(tom1),
	  NUM_SAMPLES(ride)
  };
  int16_t const *track_list[NUM_TRACKS] = {
 80005da:	4bc4      	ldr	r3, [pc, #784]	@ (80008ec <main+0x34c>)
 80005dc:	f507 741c 	add.w	r4, r7, #624	@ 0x270
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	682b      	ldr	r3, [r5, #0]
 80005e8:	6023      	str	r3, [r4, #0]
	  kick,
	  snare,
	  tom1,
	  ride
  };
  int track_samples_left[NUM_TRACKS] = {0};
 80005ea:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
  signed int dac_out = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
  unsigned int current_state[NUM_BUTTONS] = {0};
 8000600:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]
 8000612:	619a      	str	r2, [r3, #24]
  int64_t button_not_pressed[NUM_BUTTONS] ={0};
 8000614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000618:	2238      	movs	r2, #56	@ 0x38
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f004 fae9 	bl	8004bf4 <memset>
  int mode = DEFAULT;
 8000622:	2302      	movs	r3, #2
 8000624:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
  int button_history[64] = {-1};
 8000628:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800062c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8000630:	4618      	mov	r0, r3
 8000632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000636:	461a      	mov	r2, r3
 8000638:	2100      	movs	r1, #0
 800063a:	f004 fadb 	bl	8004bf4 <memset>
 800063e:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000642:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8000646:	f04f 32ff 	mov.w	r2, #4294967295
 800064a:	601a      	str	r2, [r3, #0]
  int time_history[64] = {-1};
 800064c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000650:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8000654:	4618      	mov	r0, r3
 8000656:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800065a:	461a      	mov	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f004 fac9 	bl	8004bf4 <memset>
 8000662:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000666:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 800066a:	f04f 32ff 	mov.w	r2, #4294967295
 800066e:	601a      	str	r2, [r3, #0]
  int button_hist_indx = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
  int play_indx = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
  int64_t recording_counter = 0;
 800067c:	f04f 0200 	mov.w	r2, #0
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
  uart_buf_len = sprintf(uart_buf, "Device initialization complete.\r\n");
 8000688:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800068c:	4998      	ldr	r1, [pc, #608]	@ (80008f0 <main+0x350>)
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fa90 	bl	8004bb4 <siprintf>
 8000694:	f8c7 02d4 	str.w	r0, [r7, #724]	@ 0x2d4
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000698:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800069c:	b29a      	uxth	r2, r3
 800069e:	f507 7126 	add.w	r1, r7, #664	@ 0x298
 80006a2:	2364      	movs	r3, #100	@ 0x64
 80006a4:	4893      	ldr	r0, [pc, #588]	@ (80008f4 <main+0x354>)
 80006a6:	f003 fbcf 	bl	8003e48 <HAL_UART_Transmit>
  timer_called = 0;
 80006aa:	4b93      	ldr	r3, [pc, #588]	@ (80008f8 <main+0x358>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4892      	ldr	r0, [pc, #584]	@ (80008fc <main+0x35c>)
 80006b4:	f001 f8b7 	bl	8001826 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80006b8:	4891      	ldr	r0, [pc, #580]	@ (8000900 <main+0x360>)
 80006ba:	f002 ff4f 	bl	800355c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006be:	2180      	movs	r1, #128	@ 0x80
 80006c0:	4890      	ldr	r0, [pc, #576]	@ (8000904 <main+0x364>)
 80006c2:	f001 fb50 	bl	8001d66 <HAL_GPIO_TogglePin>
  while (1)
  {

	// Reset dac out
	dac_out = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
	recording_counter++;
 80006cc:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 80006d0:	1c51      	adds	r1, r2, #1
 80006d2:	6039      	str	r1, [r7, #0]
 80006d4:	f143 0300 	adc.w	r3, r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80006de:	e9c7 34b8 	strd	r3, r4, [r7, #736]	@ 0x2e0

	// Get button inputs
	current_state[0] = HAL_GPIO_ReadPin(B10_GPIO_Port, B10_Pin);
 80006e2:	2108      	movs	r1, #8
 80006e4:	4888      	ldr	r0, [pc, #544]	@ (8000908 <main+0x368>)
 80006e6:	f001 fb0d 	bl	8001d04 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
	current_state[1] = HAL_GPIO_ReadPin(B20_GPIO_Port, B20_Pin);
 80006f0:	2101      	movs	r1, #1
 80006f2:	4886      	ldr	r0, [pc, #536]	@ (800090c <main+0x36c>)
 80006f4:	f001 fb06 	bl	8001d04 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
	current_state[2] = HAL_GPIO_ReadPin(B30_GPIO_Port, B30_Pin);
 80006fe:	2108      	movs	r1, #8
 8000700:	4882      	ldr	r0, [pc, #520]	@ (800090c <main+0x36c>)
 8000702:	f001 faff 	bl	8001d04 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
	current_state[3] = HAL_GPIO_ReadPin(B40_GPIO_Port, B40_Pin);
 800070c:	2108      	movs	r1, #8
 800070e:	4880      	ldr	r0, [pc, #512]	@ (8000910 <main+0x370>)
 8000710:	f001 faf8 	bl	8001d04 <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	current_state[4] = HAL_GPIO_ReadPin(B50_GPIO_Port, B50_Pin);
 800071a:	2120      	movs	r1, #32
 800071c:	487c      	ldr	r0, [pc, #496]	@ (8000910 <main+0x370>)
 800071e:	f001 faf1 	bl	8001d04 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	current_state[5] = HAL_GPIO_ReadPin(B60_GPIO_Port, B60_Pin);
 8000728:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072c:	4878      	ldr	r0, [pc, #480]	@ (8000910 <main+0x370>)
 800072e:	f001 fae9 	bl	8001d04 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
	current_state[6] = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 8000738:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800073c:	4873      	ldr	r0, [pc, #460]	@ (800090c <main+0x36c>)
 800073e:	f001 fae1 	bl	8001d04 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

	for(int button = 0; button < NUM_BUTTONS; button++) {
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 800074e:	e117      	b.n	8000980 <main+0x3e0>
		if(current_state[button] == GPIO_PIN_RESET) {
 8000750:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800075a:	f107 0208 	add.w	r2, r7, #8
 800075e:	4413      	add	r3, r2
 8000760:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d119      	bne.n	800079c <main+0x1fc>
			button_not_pressed[button]++;
 8000768:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8000772:	f107 0208 	add.w	r2, r7, #8
 8000776:	4413      	add	r3, r2
 8000778:	3bf0      	subs	r3, #240	@ 0xf0
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	f112 0a01 	adds.w	sl, r2, #1
 8000782:	f143 0b00 	adc.w	fp, r3, #0
 8000786:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8000790:	f107 0208 	add.w	r2, r7, #8
 8000794:	4413      	add	r3, r2
 8000796:	3bf0      	subs	r3, #240	@ 0xf0
 8000798:	e9c3 ab00 	strd	sl, fp, [r3]
		}
		if(current_state[button] == GPIO_PIN_SET && button_not_pressed[button] > 15) {
 800079c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80007a6:	f107 0208 	add.w	r2, r7, #8
 80007aa:	4413      	add	r3, r2
 80007ac:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	f040 80e0 	bne.w	8000976 <main+0x3d6>
 80007b6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80007c0:	f107 0208 	add.w	r2, r7, #8
 80007c4:	4413      	add	r3, r2
 80007c6:	3bf0      	subs	r3, #240	@ 0xf0
 80007c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007cc:	2a10      	cmp	r2, #16
 80007ce:	f173 0300 	sbcs.w	r3, r3, #0
 80007d2:	f2c0 80d0 	blt.w	8000976 <main+0x3d6>
			//uart_buf_len = sprintf(uart_buf, "Button pressed: %d.\r\n", button);
			//HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
			button_not_pressed[button] = 0;
 80007d6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80007e0:	f107 0208 	add.w	r2, r7, #8
 80007e4:	4413      	add	r3, r2
 80007e6:	f1a3 01f0 	sub.w	r1, r3, #240	@ 0xf0
 80007ea:	f04f 0200 	mov.w	r2, #0
 80007ee:	f04f 0300 	mov.w	r3, #0
 80007f2:	e9c1 2300 	strd	r2, r3, [r1]
			if(button == 5) {
 80007f6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	d143      	bne.n	8000886 <main+0x2e6>
				if(mode == RECORD) {
 80007fe:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8000802:	2b01      	cmp	r3, #1
 8000804:	d112      	bne.n	800082c <main+0x28c>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000806:	2180      	movs	r1, #128	@ 0x80
 8000808:	483e      	ldr	r0, [pc, #248]	@ (8000904 <main+0x364>)
 800080a:	f001 faac 	bl	8001d66 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800080e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000812:	483c      	ldr	r0, [pc, #240]	@ (8000904 <main+0x364>)
 8000814:	f001 faa7 	bl	8001d66 <HAL_GPIO_TogglePin>
					mode = DEFAULT;
 8000818:	2302      	movs	r3, #2
 800081a:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
					recording_counter = 0;
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
					memset(button_history, -1, sizeof(button_history));
					memset(time_history, -1, sizeof(time_history));
				}
				//uart_buf_len = sprintf(uart_buf, "MODE: %d.\r\n", mode);
				//HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
				break;
 800082a:	e0af      	b.n	800098c <main+0x3ec>
				else if(mode == DEFAULT){
 800082c:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8000830:	2b02      	cmp	r3, #2
 8000832:	f040 80ab 	bne.w	800098c <main+0x3ec>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000836:	2180      	movs	r1, #128	@ 0x80
 8000838:	4832      	ldr	r0, [pc, #200]	@ (8000904 <main+0x364>)
 800083a:	f001 fa94 	bl	8001d66 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800083e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000842:	4830      	ldr	r0, [pc, #192]	@ (8000904 <main+0x364>)
 8000844:	f001 fa8f 	bl	8001d66 <HAL_GPIO_TogglePin>
					mode = RECORD;
 8000848:	2301      	movs	r3, #1
 800084a:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
					recording_counter = 0;
 800084e:	f04f 0200 	mov.w	r2, #0
 8000852:	f04f 0300 	mov.w	r3, #0
 8000856:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
					button_hist_indx = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
					memset(button_history, -1, sizeof(button_history));
 8000860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000868:	f04f 31ff 	mov.w	r1, #4294967295
 800086c:	4618      	mov	r0, r3
 800086e:	f004 f9c1 	bl	8004bf4 <memset>
					memset(time_history, -1, sizeof(time_history));
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800087a:	f04f 31ff 	mov.w	r1, #4294967295
 800087e:	4618      	mov	r0, r3
 8000880:	f004 f9b8 	bl	8004bf4 <memset>
				break;
 8000884:	e082      	b.n	800098c <main+0x3ec>
			}
			if(button == 6) {
 8000886:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800088a:	2b06      	cmp	r3, #6
 800088c:	d142      	bne.n	8000914 <main+0x374>
				if(button_hist_indx > 0 && mode == DEFAULT) {
 800088e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8000892:	2b00      	cmp	r3, #0
 8000894:	dd18      	ble.n	80008c8 <main+0x328>
 8000896:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800089a:	2b02      	cmp	r3, #2
 800089c:	d114      	bne.n	80008c8 <main+0x328>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800089e:	2180      	movs	r1, #128	@ 0x80
 80008a0:	4818      	ldr	r0, [pc, #96]	@ (8000904 <main+0x364>)
 80008a2:	f001 fa60 	bl	8001d66 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80008a6:	2101      	movs	r1, #1
 80008a8:	4816      	ldr	r0, [pc, #88]	@ (8000904 <main+0x364>)
 80008aa:	f001 fa5c 	bl	8001d66 <HAL_GPIO_TogglePin>
					mode = PLAY;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
					recording_counter = 0;
 80008b4:	f04f 0200 	mov.w	r2, #0
 80008b8:	f04f 0300 	mov.w	r3, #0
 80008bc:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
					play_indx = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
					HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
					mode = DEFAULT;
				}
				//uart_buf_len = sprintf(uart_buf, "MODE: %d.\r\n", mode);
				//HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
				break;
 80008c6:	e063      	b.n	8000990 <main+0x3f0>
				else if(mode == PLAY) {
 80008c8:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d15f      	bne.n	8000990 <main+0x3f0>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008d0:	2180      	movs	r1, #128	@ 0x80
 80008d2:	480c      	ldr	r0, [pc, #48]	@ (8000904 <main+0x364>)
 80008d4:	f001 fa47 	bl	8001d66 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80008d8:	2101      	movs	r1, #1
 80008da:	480a      	ldr	r0, [pc, #40]	@ (8000904 <main+0x364>)
 80008dc:	f001 fa43 	bl	8001d66 <HAL_GPIO_TogglePin>
					mode = DEFAULT;
 80008e0:	2302      	movs	r3, #2
 80008e2:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
				break;
 80008e6:	e053      	b.n	8000990 <main+0x3f0>
 80008e8:	08005530 	.word	0x08005530
 80008ec:	08005544 	.word	0x08005544
 80008f0:	0800550c 	.word	0x0800550c
 80008f4:	20000128 	.word	0x20000128
 80008f8:	20000654 	.word	0x20000654
 80008fc:	20000078 	.word	0x20000078
 8000900:	200000e0 	.word	0x200000e0
 8000904:	40020400 	.word	0x40020400
 8000908:	40020000 	.word	0x40020000
 800090c:	40020800 	.word	0x40020800
 8000910:	40021400 	.word	0x40021400
			}
			track_samples_left[button] = sample_counts[button];
 8000914:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800091e:	f107 0208 	add.w	r2, r7, #8
 8000922:	4413      	add	r3, r2
 8000924:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8000928:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8000932:	f107 0108 	add.w	r1, r7, #8
 8000936:	440b      	add	r3, r1
 8000938:	f843 2c9c 	str.w	r2, [r3, #-156]
			if(mode == RECORD) {
 800093c:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8000940:	2b01      	cmp	r3, #1
 8000942:	d118      	bne.n	8000976 <main+0x3d6>
				button_history[button_hist_indx] = button;
 8000944:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000948:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800094c:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 8000950:	f8d7 12dc 	ldr.w	r1, [r7, #732]	@ 0x2dc
 8000954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				time_history[button_hist_indx] = recording_counter;
 8000958:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 800095c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000960:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8000964:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 8000968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				button_hist_indx++;
 800096c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8000970:	3301      	adds	r3, #1
 8000972:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
	for(int button = 0; button < NUM_BUTTONS; button++) {
 8000976:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800097a:	3301      	adds	r3, #1
 800097c:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 8000980:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8000984:	2b06      	cmp	r3, #6
 8000986:	f77f aee3 	ble.w	8000750 <main+0x1b0>
 800098a:	e002      	b.n	8000992 <main+0x3f2>
				break;
 800098c:	bf00      	nop
 800098e:	e000      	b.n	8000992 <main+0x3f2>
				break;
 8000990:	bf00      	nop
			}
		 }
	}

	if(mode == PLAY) {
 8000992:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d147      	bne.n	8000a2a <main+0x48a>
		if(time_history[play_indx] == recording_counter) {
 800099a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800099e:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80009a2:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 80009a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009aa:	17da      	asrs	r2, r3, #31
 80009ac:	4698      	mov	r8, r3
 80009ae:	4691      	mov	r9, r2
 80009b0:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 80009b4:	454b      	cmp	r3, r9
 80009b6:	bf08      	it	eq
 80009b8:	4542      	cmpeq	r2, r8
 80009ba:	d136      	bne.n	8000a2a <main+0x48a>
			int button_rec = button_history[play_indx];
 80009bc:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80009c0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80009c4:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 80009c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009cc:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
			play_indx++;
 80009d0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80009d4:	3301      	adds	r3, #1
 80009d6:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
			if(time_history[play_indx] == -1) {
 80009da:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80009de:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80009e2:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 80009e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ee:	d108      	bne.n	8000a02 <main+0x462>
				play_indx = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
				recording_counter = 0;
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
			}
			track_samples_left[button_rec] = sample_counts[button_rec];
 8000a02:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8000a0c:	f107 0208 	add.w	r2, r7, #8
 8000a10:	4413      	add	r3, r2
 8000a12:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8000a16:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8000a20:	f107 0108 	add.w	r1, r7, #8
 8000a24:	440b      	add	r3, r1
 8000a26:	f843 2c9c 	str.w	r2, [r3, #-156]
		}
	}


	// Mix sounds based on which button was pressed
	for(int i = 0; i < NUM_TRACKS; i++) {
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8000a30:	e052      	b.n	8000ad8 <main+0x538>
		// Button was pressed so we want to play this sound
		if(track_samples_left[i] != 0) {
 8000a32:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8000a3c:	f107 0208 	add.w	r2, r7, #8
 8000a40:	4413      	add	r3, r2
 8000a42:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d041      	beq.n	8000ace <main+0x52e>
			// Get current sample index to play
			int current_sample = sample_counts[i] - track_samples_left[i];
 8000a4a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8000a54:	f107 0208 	add.w	r2, r7, #8
 8000a58:	4413      	add	r3, r2
 8000a5a:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8000a5e:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8000a68:	f107 0108 	add.w	r1, r7, #8
 8000a6c:	440b      	add	r3, r1
 8000a6e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
			// Retrieve value from track being played
			dac_out += track_list[i][current_sample];
 8000a78:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8000a82:	f107 0208 	add.w	r2, r7, #8
 8000a86:	4413      	add	r3, r2
 8000a88:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8000a8c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4413      	add	r3, r2
 8000a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8000a9e:	4413      	add	r3, r2
 8000aa0:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
			// 1 less sample left
			track_samples_left[i]--;
 8000aa4:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8000aae:	f107 0208 	add.w	r2, r7, #8
 8000ab2:	4413      	add	r3, r2
 8000ab4:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8000ac4:	f107 0108 	add.w	r1, r7, #8
 8000ac8:	440b      	add	r3, r1
 8000aca:	f843 2c9c 	str.w	r2, [r3, #-156]
	for(int i = 0; i < NUM_TRACKS; i++) {
 8000ace:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8000ad8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	dda8      	ble.n	8000a32 <main+0x492>
		}
	}

	// Clip the audio to min or max value
	if(dac_out < -DAC_MAX_RANGE_UNSIGNED) {
 8000ae0:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8000ae4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000ae8:	da03      	bge.n	8000af2 <main+0x552>
		dac_out = -DAC_MAX_RANGE_UNSIGNED;
 8000aea:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <main+0x594>)
 8000aec:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 8000af0:	e008      	b.n	8000b04 <main+0x564>
	}
	else if (dac_out > DAC_MAX_RANGE_UNSIGNED - 1) {
 8000af2:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8000af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000afa:	db03      	blt.n	8000b04 <main+0x564>
		dac_out = DAC_MAX_RANGE_UNSIGNED - 1;
 8000afc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000b00:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
	}

	// Add offset to convert signed to unsigned
	dac_out += DAC_MAX_RANGE_UNSIGNED;
 8000b04:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8000b08:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000b0c:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4

	// Convert to 12 bits for the DAC
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_out >> 4);
 8000b10:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8000b14:	111b      	asrs	r3, r3, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4807      	ldr	r0, [pc, #28]	@ (8000b38 <main+0x598>)
 8000b1c:	f000 feda 	bl	80018d4 <HAL_DAC_SetValue>
	// Wait for timer reset to update DAC sample so it stays at correct sampling frequency
	while(timer_called == 0) {
 8000b20:	e000      	b.n	8000b24 <main+0x584>
		continue;
 8000b22:	bf00      	nop
	while(timer_called == 0) {
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <main+0x59c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0fa      	beq.n	8000b22 <main+0x582>
	}
	timer_called = 0;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	@ (8000b3c <main+0x59c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
	dac_out = 0;
 8000b32:	e5c8      	b.n	80006c6 <main+0x126>
 8000b34:	ffff8000 	.word	0xffff8000
 8000b38:	20000078 	.word	0x20000078
 8000b3c:	20000654 	.word	0x20000654

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	@ 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2234      	movs	r2, #52	@ 0x34
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f004 f850 	bl	8004bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b29      	ldr	r3, [pc, #164]	@ (8000c10 <SystemClock_Config+0xd0>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	4a28      	ldr	r2, [pc, #160]	@ (8000c10 <SystemClock_Config+0xd0>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b74:	4b26      	ldr	r3, [pc, #152]	@ (8000c10 <SystemClock_Config+0xd0>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b80:	2300      	movs	r3, #0
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	4b23      	ldr	r3, [pc, #140]	@ (8000c14 <SystemClock_Config+0xd4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a22      	ldr	r2, [pc, #136]	@ (8000c14 <SystemClock_Config+0xd4>)
 8000b8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <SystemClock_Config+0xd4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ba0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ba4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000baa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bb4:	23a8      	movs	r3, #168	@ 0xa8
 8000bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bbc:	2307      	movs	r3, #7
 8000bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 f9d9 	bl	8002f80 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bd4:	f000 fa18 	bl	8001008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000be4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000be8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fb4e 	bl	8002298 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c02:	f000 fa01 	bl	8001008 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3750      	adds	r7, #80	@ 0x50
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40007000 	.word	0x40007000

08000c18 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <MX_DAC_Init+0x4c>)
 8000c28:	4a0f      	ldr	r2, [pc, #60]	@ (8000c68 <MX_DAC_Init+0x50>)
 8000c2a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c2c:	480d      	ldr	r0, [pc, #52]	@ (8000c64 <MX_DAC_Init+0x4c>)
 8000c2e:	f000 fdd8 	bl	80017e2 <HAL_DAC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c38:	f000 f9e6 	bl	8001008 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000c3c:	232c      	movs	r3, #44	@ 0x2c
 8000c3e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	@ (8000c64 <MX_DAC_Init+0x4c>)
 8000c4c:	f000 fe6c 	bl	8001928 <HAL_DAC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000c56:	f000 f9d7 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000078 	.word	0x20000078
 8000c68:	40007400 	.word	0x40007400

08000c6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c72:	4a13      	ldr	r2, [pc, #76]	@ (8000cc0 <MX_I2C1_Init+0x54>)
 8000c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c78:	4a12      	ldr	r2, [pc, #72]	@ (8000cc4 <MX_I2C1_Init+0x58>)
 8000c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000caa:	f001 f877 	bl	8001d9c <HAL_I2C_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cb4:	f000 f9a8 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000008c 	.word	0x2000008c
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	000186a0 	.word	0x000186a0

08000cc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <MX_TIM4_Init+0x94>)
 8000ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d60 <MX_TIM4_Init+0x98>)
 8000ce8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <MX_TIM4_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_TIM4_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3809;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <MX_TIM4_Init+0x94>)
 8000cf8:	f640 62e1 	movw	r2, #3809	@ 0xee1
 8000cfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_TIM4_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <MX_TIM4_Init+0x94>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d0a:	4814      	ldr	r0, [pc, #80]	@ (8000d5c <MX_TIM4_Init+0x94>)
 8000d0c:	f002 fbd6 	bl	80034bc <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d16:	f000 f977 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	@ (8000d5c <MX_TIM4_Init+0x94>)
 8000d28:	f002 fd78 	bl	800381c <HAL_TIM_ConfigClockSource>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d32:	f000 f969 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d36:	2320      	movs	r3, #32
 8000d38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <MX_TIM4_Init+0x94>)
 8000d44:	f002 ffa0 	bl	8003c88 <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000d4e:	f000 f95b 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000e0 	.word	0x200000e0
 8000d60:	40000800 	.word	0x40000800

08000d64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <MX_USART3_UART_Init+0x50>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d9c:	f003 f804 	bl	8003da8 <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000da6:	f000 f92f 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000128 	.word	0x20000128
 8000db4:	40004800 	.word	0x40004800

08000db8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000dc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc6:	2206      	movs	r2, #6
 8000dc8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dcc:	2202      	movs	r2, #2
 8000dce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd8:	2202      	movs	r2, #2
 8000dda:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000de8:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dfc:	f001 f912 	bl	8002024 <HAL_PCD_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e06:	f000 f8ff 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000170 	.word	0x20000170

08000e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	@ 0x30
 8000e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	4b65      	ldr	r3, [pc, #404]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a64      	ldr	r2, [pc, #400]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b62      	ldr	r3, [pc, #392]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	4b5e      	ldr	r3, [pc, #376]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a5d      	ldr	r2, [pc, #372]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e50:	f043 0320 	orr.w	r3, r3, #32
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0320 	and.w	r3, r3, #32
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b57      	ldr	r3, [pc, #348]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a56      	ldr	r2, [pc, #344]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b54      	ldr	r3, [pc, #336]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b50      	ldr	r3, [pc, #320]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a4f      	ldr	r2, [pc, #316]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b49      	ldr	r3, [pc, #292]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a48      	ldr	r2, [pc, #288]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b46      	ldr	r3, [pc, #280]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b42      	ldr	r3, [pc, #264]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a41      	ldr	r2, [pc, #260]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a3a      	ldr	r2, [pc, #232]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b38      	ldr	r3, [pc, #224]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ef4:	4834      	ldr	r0, [pc, #208]	@ (8000fc8 <MX_GPIO_Init+0x1b4>)
 8000ef6:	f000 ff1d 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2140      	movs	r1, #64	@ 0x40
 8000efe:	4833      	ldr	r0, [pc, #204]	@ (8000fcc <MX_GPIO_Init+0x1b8>)
 8000f00:	f000 ff18 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	482d      	ldr	r0, [pc, #180]	@ (8000fd0 <MX_GPIO_Init+0x1bc>)
 8000f1c:	f000 fd5e 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : B40_Pin B50_Pin B60_Pin */
  GPIO_InitStruct.Pin = B40_Pin|B50_Pin|B60_Pin;
 8000f20:	f44f 6385 	mov.w	r3, #1064	@ 0x428
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4827      	ldr	r0, [pc, #156]	@ (8000fd4 <MX_GPIO_Init+0x1c0>)
 8000f36:	f000 fd51 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : B20_Pin B30_Pin */
  GPIO_InitStruct.Pin = B20_Pin|B30_Pin;
 8000f3a:	2309      	movs	r3, #9
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f42:	2302      	movs	r3, #2
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4820      	ldr	r0, [pc, #128]	@ (8000fd0 <MX_GPIO_Init+0x1bc>)
 8000f4e:	f000 fd45 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B10_Pin */
  GPIO_InitStruct.Pin = B10_Pin;
 8000f52:	2308      	movs	r3, #8
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B10_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	481c      	ldr	r0, [pc, #112]	@ (8000fd8 <MX_GPIO_Init+0x1c4>)
 8000f66:	f000 fd39 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f6a:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	4811      	ldr	r0, [pc, #68]	@ (8000fc8 <MX_GPIO_Init+0x1b4>)
 8000f84:	f000 fd2a 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f88:	2340      	movs	r3, #64	@ 0x40
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480b      	ldr	r0, [pc, #44]	@ (8000fcc <MX_GPIO_Init+0x1b8>)
 8000fa0:	f000 fd1c 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fa4:	2380      	movs	r3, #128	@ 0x80
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_GPIO_Init+0x1b8>)
 8000fb8:	f000 fd10 	bl	80019dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbc:	bf00      	nop
 8000fbe:	3730      	adds	r7, #48	@ 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	40021800 	.word	0x40021800
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40020000 	.word	0x40020000

08000fdc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if(htim == &htim4) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a06      	ldr	r2, [pc, #24]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d102      	bne.n	8000ff2 <HAL_TIM_PeriodElapsedCallback+0x16>
		timer_called = 1;
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
	}
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200000e0 	.word	0x200000e0
 8001004:	20000654 	.word	0x20000654

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <Error_Handler+0x8>

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <HAL_MspInit+0x4c>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001028:	6453      	str	r3, [r2, #68]	@ 0x44
 800102a:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <HAL_MspInit+0x4c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <HAL_MspInit+0x4c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	@ 0x40
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_MspInit+0x4c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <HAL_DAC_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d127      	bne.n	80010d6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <HAL_DAC_MspInit+0x80>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	4a15      	ldr	r2, [pc, #84]	@ (80010e4 <HAL_DAC_MspInit+0x80>)
 8001090:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001094:	6413      	str	r3, [r2, #64]	@ 0x40
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <HAL_DAC_MspInit+0x80>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <HAL_DAC_MspInit+0x80>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <HAL_DAC_MspInit+0x80>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <HAL_DAC_MspInit+0x80>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010be:	2310      	movs	r3, #16
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	2303      	movs	r3, #3
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <HAL_DAC_MspInit+0x84>)
 80010d2:	f000 fc83 	bl	80019dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	@ 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40007400 	.word	0x40007400
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000

080010ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a19      	ldr	r2, [pc, #100]	@ (8001170 <HAL_I2C_MspInit+0x84>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d12c      	bne.n	8001168 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <HAL_I2C_MspInit+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <HAL_I2C_MspInit+0x88>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <HAL_I2C_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800112a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001130:	2312      	movs	r3, #18
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800113c:	2304      	movs	r3, #4
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	480c      	ldr	r0, [pc, #48]	@ (8001178 <HAL_I2C_MspInit+0x8c>)
 8001148:	f000 fc48 	bl	80019dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_I2C_MspInit+0x88>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001154:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <HAL_I2C_MspInit+0x88>)
 8001156:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800115a:	6413      	str	r3, [r2, #64]	@ 0x40
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <HAL_I2C_MspInit+0x88>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	@ 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40005400 	.word	0x40005400
 8001174:	40023800 	.word	0x40023800
 8001178:	40020400 	.word	0x40020400

0800117c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0e      	ldr	r2, [pc, #56]	@ (80011c4 <HAL_TIM_Base_MspInit+0x48>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d115      	bne.n	80011ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	4a0c      	ldr	r2, [pc, #48]	@ (80011c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6413      	str	r3, [r2, #64]	@ 0x40
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <HAL_TIM_Base_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	201e      	movs	r0, #30
 80011b0:	f000 fae1 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011b4:	201e      	movs	r0, #30
 80011b6:	f000 fafa 	bl	80017ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40000800 	.word	0x40000800
 80011c8:	40023800 	.word	0x40023800

080011cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a19      	ldr	r2, [pc, #100]	@ (8001250 <HAL_UART_MspInit+0x84>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d12c      	bne.n	8001248 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_UART_MspInit+0x88>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <HAL_UART_MspInit+0x88>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_UART_MspInit+0x88>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <HAL_UART_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a10      	ldr	r2, [pc, #64]	@ (8001254 <HAL_UART_MspInit+0x88>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <HAL_UART_MspInit+0x88>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001226:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001238:	2307      	movs	r3, #7
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4805      	ldr	r0, [pc, #20]	@ (8001258 <HAL_UART_MspInit+0x8c>)
 8001244:	f000 fbca 	bl	80019dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	@ 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40004800 	.word	0x40004800
 8001254:	40023800 	.word	0x40023800
 8001258:	40020c00 	.word	0x40020c00

0800125c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b0a0      	sub	sp, #128	@ 0x80
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	225c      	movs	r2, #92	@ 0x5c
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fcb9 	bl	8004bf4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800128a:	d14e      	bne.n	800132a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800128c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001290:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001292:	2300      	movs	r3, #0
 8001294:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4618      	mov	r0, r3
 800129c:	f001 f916 	bl	80024cc <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80012a6:	f7ff feaf 	bl	8001008 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <HAL_PCD_MspInit+0xd8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a20      	ldr	r2, [pc, #128]	@ (8001334 <HAL_PCD_MspInit+0xd8>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <HAL_PCD_MspInit+0xd8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012c6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80012ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012d8:	230a      	movs	r3, #10
 80012da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012e0:	4619      	mov	r1, r3
 80012e2:	4815      	ldr	r0, [pc, #84]	@ (8001338 <HAL_PCD_MspInit+0xdc>)
 80012e4:	f000 fb7a 	bl	80019dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012fa:	4619      	mov	r1, r3
 80012fc:	480e      	ldr	r0, [pc, #56]	@ (8001338 <HAL_PCD_MspInit+0xdc>)
 80012fe:	f000 fb6d 	bl	80019dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <HAL_PCD_MspInit+0xd8>)
 8001304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001306:	4a0b      	ldr	r2, [pc, #44]	@ (8001334 <HAL_PCD_MspInit+0xd8>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800130c:	6353      	str	r3, [r2, #52]	@ 0x34
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <HAL_PCD_MspInit+0xd8>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	4a07      	ldr	r2, [pc, #28]	@ (8001334 <HAL_PCD_MspInit+0xd8>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131c:	6453      	str	r3, [r2, #68]	@ 0x44
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_PCD_MspInit+0xd8>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3780      	adds	r7, #128	@ 0x80
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <NMI_Handler+0x4>

08001344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <MemManage_Handler+0x4>

08001354 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <UsageFault_Handler+0x4>

08001364 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001392:	f000 f8d1 	bl	8001538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <TIM4_IRQHandler+0x10>)
 80013a2:	f002 f94b 	bl	800363c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000e0 	.word	0x200000e0

080013b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b8:	4a14      	ldr	r2, [pc, #80]	@ (800140c <_sbrk+0x5c>)
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <_sbrk+0x60>)
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c4:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <_sbrk+0x64>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <_sbrk+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d207      	bcs.n	80013f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e0:	f003 fc10 	bl	8004c04 <__errno>
 80013e4:	4603      	mov	r3, r0
 80013e6:	220c      	movs	r2, #12
 80013e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	e009      	b.n	8001404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f6:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	4a05      	ldr	r2, [pc, #20]	@ (8001414 <_sbrk+0x64>)
 8001400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20020000 	.word	0x20020000
 8001410:	00000400 	.word	0x00000400
 8001414:	20000658 	.word	0x20000658
 8001418:	200007a8 	.word	0x200007a8

0800141c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <SystemInit+0x20>)
 8001422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001426:	4a05      	ldr	r2, [pc, #20]	@ (800143c <SystemInit+0x20>)
 8001428:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800142c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001478 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001444:	f7ff ffea 	bl	800141c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	@ (8001480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	@ (800148c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800146e:	f003 fbcf 	bl	8004c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001472:	f7ff f895 	bl	80005a0 <main>
  bx  lr    
 8001476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001484:	0804ad24 	.word	0x0804ad24
  ldr r2, =_sbss
 8001488:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800148c:	200007a8 	.word	0x200007a8

08001490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001498:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0d      	ldr	r2, [pc, #52]	@ (80014d4 <HAL_Init+0x40>)
 800149e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a4:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <HAL_Init+0x40>)
 80014aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_Init+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a07      	ldr	r2, [pc, #28]	@ (80014d4 <HAL_Init+0x40>)
 80014b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 f94f 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f000 f808 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c8:	f7ff fda4 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023c00 	.word	0x40023c00

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_InitTick+0x54>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_InitTick+0x58>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f967 	bl	80017ca <HAL_SYSTICK_Config>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e00e      	b.n	8001524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d80a      	bhi.n	8001522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f000 f92f 	bl	8001776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001518:	4a06      	ldr	r2, [pc, #24]	@ (8001534 <HAL_InitTick+0x5c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e000      	b.n	8001524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000000 	.word	0x20000000
 8001530:	20000008 	.word	0x20000008
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_IncTick+0x20>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_IncTick+0x24>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <HAL_IncTick+0x24>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008
 800155c:	2000065c 	.word	0x2000065c

08001560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b03      	ldr	r3, [pc, #12]	@ (8001574 <HAL_GetTick+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	2000065c 	.word	0x2000065c

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff ffee 	bl	8001560 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffde 	bl	8001560 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0b      	blt.n	800164e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4907      	ldr	r1, [pc, #28]	@ (800165c <__NVIC_EnableIRQ+0x38>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	@ (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	@ (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	@ 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	@ 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff8e 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	@ (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	@ (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff29 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff3e 	bl	8001608 <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff8e 	bl	80016b4 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5d 	bl	8001660 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff31 	bl	8001624 <__NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffa2 	bl	800171c <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e014      	b.n	800181e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	791b      	ldrb	r3, [r3, #4]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fc2d 	bl	8001064 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2202      	movs	r2, #2
 800180e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e046      	b.n	80018c8 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	795b      	ldrb	r3, [r3, #5]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_DAC_Start+0x20>
 8001842:	2302      	movs	r3, #2
 8001844:	e040      	b.n	80018c8 <HAL_DAC_Start+0xa2>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6819      	ldr	r1, [r3, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2201      	movs	r2, #1
 8001860:	409a      	lsls	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10f      	bne.n	8001890 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800187a:	2b3c      	cmp	r3, #60	@ 0x3c
 800187c:	d11d      	bne.n	80018ba <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0201 	orr.w	r2, r2, #1
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	e014      	b.n	80018ba <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	213c      	movs	r1, #60	@ 0x3c
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d107      	bne.n	80018ba <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0202 	orr.w	r2, r2, #2
 80018b8:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e015      	b.n	800191c <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	3308      	adds	r3, #8
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e004      	b.n	8001912 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	3314      	adds	r3, #20
 8001910:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	461a      	mov	r2, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	@ 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_DAC_ConfigChannel+0x1c>
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e042      	b.n	80019ce <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	795b      	ldrb	r3, [r3, #5]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_DAC_ConfigChannel+0x2c>
 8001950:	2302      	movs	r3, #2
 8001952:	e03c      	b.n	80019ce <HAL_DAC_ConfigChannel+0xa6>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2202      	movs	r2, #2
 800195e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4313      	orrs	r3, r2
 8001988:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	22c0      	movs	r2, #192	@ 0xc0
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2201      	movs	r2, #1
 80019c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80019cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	@ 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	@ 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e165      	b.n	8001cc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 8154 	bne.w	8001cbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d005      	beq.n	8001a2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d130      	bne.n	8001a90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a64:	2201      	movs	r2, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 0201 	and.w	r2, r3, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d017      	beq.n	8001acc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d123      	bne.n	8001b20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80ae 	beq.w	8001cbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b5d      	ldr	r3, [pc, #372]	@ (8001cdc <HAL_GPIO_Init+0x300>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cdc <HAL_GPIO_Init+0x300>)
 8001b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b72:	4b5a      	ldr	r3, [pc, #360]	@ (8001cdc <HAL_GPIO_Init+0x300>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7e:	4a58      	ldr	r2, [pc, #352]	@ (8001ce0 <HAL_GPIO_Init+0x304>)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	220f      	movs	r2, #15
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8001ce4 <HAL_GPIO_Init+0x308>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d025      	beq.n	8001bf6 <HAL_GPIO_Init+0x21a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4e      	ldr	r2, [pc, #312]	@ (8001ce8 <HAL_GPIO_Init+0x30c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01f      	beq.n	8001bf2 <HAL_GPIO_Init+0x216>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4d      	ldr	r2, [pc, #308]	@ (8001cec <HAL_GPIO_Init+0x310>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d019      	beq.n	8001bee <HAL_GPIO_Init+0x212>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf0 <HAL_GPIO_Init+0x314>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0x20e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf4 <HAL_GPIO_Init+0x318>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00d      	beq.n	8001be6 <HAL_GPIO_Init+0x20a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4a      	ldr	r2, [pc, #296]	@ (8001cf8 <HAL_GPIO_Init+0x31c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_GPIO_Init+0x206>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a49      	ldr	r2, [pc, #292]	@ (8001cfc <HAL_GPIO_Init+0x320>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_GPIO_Init+0x202>
 8001bda:	2306      	movs	r3, #6
 8001bdc:	e00c      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001bde:	2307      	movs	r3, #7
 8001be0:	e00a      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001be2:	2305      	movs	r3, #5
 8001be4:	e008      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e004      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	f002 0203 	and.w	r2, r2, #3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4093      	lsls	r3, r2
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c08:	4935      	ldr	r1, [pc, #212]	@ (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c16:	4b3a      	ldr	r3, [pc, #232]	@ (8001d00 <HAL_GPIO_Init+0x324>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3a:	4a31      	ldr	r2, [pc, #196]	@ (8001d00 <HAL_GPIO_Init+0x324>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c40:	4b2f      	ldr	r3, [pc, #188]	@ (8001d00 <HAL_GPIO_Init+0x324>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c64:	4a26      	ldr	r2, [pc, #152]	@ (8001d00 <HAL_GPIO_Init+0x324>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6a:	4b25      	ldr	r3, [pc, #148]	@ (8001d00 <HAL_GPIO_Init+0x324>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d00 <HAL_GPIO_Init+0x324>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <HAL_GPIO_Init+0x324>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb8:	4a11      	ldr	r2, [pc, #68]	@ (8001d00 <HAL_GPIO_Init+0x324>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	f67f ae96 	bls.w	80019f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3724      	adds	r7, #36	@ 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40021400 	.word	0x40021400
 8001cfc:	40021800 	.word	0x40021800
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e001      	b.n	8001d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
 8001d40:	4613      	mov	r3, r2
 8001d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d44:	787b      	ldrb	r3, [r7, #1]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d50:	e003      	b.n	8001d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	041a      	lsls	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	619a      	str	r2, [r3, #24]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b085      	sub	sp, #20
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d78:	887a      	ldrh	r2, [r7, #2]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	041a      	lsls	r2, r3, #16
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	400b      	ands	r3, r1
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e12b      	b.n	8002006 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff f992 	bl	80010ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	@ 0x24
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e00:	f000 fb3c 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8001e04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a81      	ldr	r2, [pc, #516]	@ (8002010 <HAL_I2C_Init+0x274>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d807      	bhi.n	8001e20 <HAL_I2C_Init+0x84>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4a80      	ldr	r2, [pc, #512]	@ (8002014 <HAL_I2C_Init+0x278>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	bf94      	ite	ls
 8001e18:	2301      	movls	r3, #1
 8001e1a:	2300      	movhi	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	e006      	b.n	8001e2e <HAL_I2C_Init+0x92>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4a7d      	ldr	r2, [pc, #500]	@ (8002018 <HAL_I2C_Init+0x27c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	bf94      	ite	ls
 8001e28:	2301      	movls	r3, #1
 8001e2a:	2300      	movhi	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0e7      	b.n	8002006 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4a78      	ldr	r2, [pc, #480]	@ (800201c <HAL_I2C_Init+0x280>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0c9b      	lsrs	r3, r3, #18
 8001e40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a6a      	ldr	r2, [pc, #424]	@ (8002010 <HAL_I2C_Init+0x274>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d802      	bhi.n	8001e70 <HAL_I2C_Init+0xd4>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	e009      	b.n	8001e84 <HAL_I2C_Init+0xe8>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	4a69      	ldr	r2, [pc, #420]	@ (8002020 <HAL_I2C_Init+0x284>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	099b      	lsrs	r3, r3, #6
 8001e82:	3301      	adds	r3, #1
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	495c      	ldr	r1, [pc, #368]	@ (8002010 <HAL_I2C_Init+0x274>)
 8001ea0:	428b      	cmp	r3, r1
 8001ea2:	d819      	bhi.n	8001ed8 <HAL_I2C_Init+0x13c>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e59      	subs	r1, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb2:	1c59      	adds	r1, r3, #1
 8001eb4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001eb8:	400b      	ands	r3, r1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_I2C_Init+0x138>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1e59      	subs	r1, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed2:	e051      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	e04f      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d111      	bne.n	8001f04 <HAL_I2C_Init+0x168>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1e58      	subs	r0, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e012      	b.n	8001f2a <HAL_I2C_Init+0x18e>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1e58      	subs	r0, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	0099      	lsls	r1, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Init+0x196>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e022      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10e      	bne.n	8001f58 <HAL_I2C_Init+0x1bc>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1e58      	subs	r0, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6859      	ldr	r1, [r3, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	440b      	add	r3, r1
 8001f48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f56:	e00f      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1e58      	subs	r0, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	0099      	lsls	r1, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	6809      	ldr	r1, [r1, #0]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fa6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6911      	ldr	r1, [r2, #16]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68d2      	ldr	r2, [r2, #12]
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	000186a0 	.word	0x000186a0
 8002014:	001e847f 	.word	0x001e847f
 8002018:	003d08ff 	.word	0x003d08ff
 800201c:	431bde83 	.word	0x431bde83
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af02      	add	r7, sp, #8
 800202a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e108      	b.n	8002248 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d106      	bne.n	8002056 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff f903 	bl	800125c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2203      	movs	r2, #3
 800205a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002064:	d102      	bne.n	800206c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f002 fb09 	bl	8004688 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7c1a      	ldrb	r2, [r3, #16]
 800207e:	f88d 2000 	strb.w	r2, [sp]
 8002082:	3304      	adds	r3, #4
 8002084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002086:	f002 fa9b 	bl	80045c0 <USB_CoreInit>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0d5      	b.n	8002248 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 fb01 	bl	80046aa <USB_SetCurrentMode>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2202      	movs	r2, #2
 80020b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0c6      	b.n	8002248 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	e04a      	b.n	8002156 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	3315      	adds	r3, #21
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3314      	adds	r3, #20
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	b298      	uxth	r0, r3
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	332e      	adds	r3, #46	@ 0x2e
 80020fc:	4602      	mov	r2, r0
 80020fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	3318      	adds	r3, #24
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	331c      	adds	r3, #28
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3320      	adds	r3, #32
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3324      	adds	r3, #36	@ 0x24
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	3301      	adds	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	791b      	ldrb	r3, [r3, #4]
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	429a      	cmp	r2, r3
 800215e:	d3af      	bcc.n	80020c0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	e044      	b.n	80021f0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	3301      	adds	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	791b      	ldrb	r3, [r3, #4]
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d3b5      	bcc.n	8002166 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7c1a      	ldrb	r2, [r3, #16]
 8002202:	f88d 2000 	strb.w	r2, [sp]
 8002206:	3304      	adds	r3, #4
 8002208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800220a:	f002 fa9b 	bl	8004744 <USB_DevInit>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e013      	b.n	8002248 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7b1b      	ldrb	r3, [r3, #12]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d102      	bne.n	800223c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f80a 	bl	8002250 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f002 fc56 	bl	8004af2 <USB_DevDisconnect>

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002282:	f043 0303 	orr.w	r3, r3, #3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0cc      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b68      	ldr	r3, [pc, #416]	@ (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d90c      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b65      	ldr	r3, [pc, #404]	@ (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b63      	ldr	r3, [pc, #396]	@ (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0b8      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ec:	4b59      	ldr	r3, [pc, #356]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a58      	ldr	r2, [pc, #352]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002304:	4b53      	ldr	r3, [pc, #332]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4a52      	ldr	r2, [pc, #328]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800230e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b50      	ldr	r3, [pc, #320]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	494d      	ldr	r1, [pc, #308]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d044      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b47      	ldr	r3, [pc, #284]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d119      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e07f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d003      	beq.n	8002356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002352:	2b03      	cmp	r3, #3
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	4b3f      	ldr	r3, [pc, #252]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e06f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002366:	4b3b      	ldr	r3, [pc, #236]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e067      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002376:	4b37      	ldr	r3, [pc, #220]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f023 0203 	bic.w	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4934      	ldr	r1, [pc, #208]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002388:	f7ff f8ea 	bl	8001560 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002390:	f7ff f8e6 	bl	8001560 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e04f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 020c 	and.w	r2, r3, #12
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d1eb      	bne.n	8002390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b8:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d20c      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e032      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ec:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4916      	ldr	r1, [pc, #88]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	490e      	ldr	r1, [pc, #56]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800241e:	f000 fb7f 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	490a      	ldr	r1, [pc, #40]	@ (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	5ccb      	ldrb	r3, [r1, r3]
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	4a09      	ldr	r2, [pc, #36]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800243a:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f84a 	bl	80014d8 <HAL_InitTick>

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023c00 	.word	0x40023c00
 8002454:	40023800 	.word	0x40023800
 8002458:	0804acc8 	.word	0x0804acc8
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002468:	4b03      	ldr	r3, [pc, #12]	@ (8002478 <HAL_RCC_GetHCLKFreq+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000000 	.word	0x20000000

0800247c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002480:	f7ff fff0 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	4b05      	ldr	r3, [pc, #20]	@ (800249c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	0a9b      	lsrs	r3, r3, #10
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4903      	ldr	r1, [pc, #12]	@ (80024a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002492:	5ccb      	ldrb	r3, [r1, r3]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40023800 	.word	0x40023800
 80024a0:	0804acd8 	.word	0x0804acd8

080024a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024a8:	f7ff ffdc 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0b5b      	lsrs	r3, r3, #13
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4903      	ldr	r1, [pc, #12]	@ (80024c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	0804acd8 	.word	0x0804acd8

080024cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08c      	sub	sp, #48	@ 0x30
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d010      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002504:	4b6f      	ldr	r3, [pc, #444]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002506:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800250a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002512:	496c      	ldr	r1, [pc, #432]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002522:	2301      	movs	r3, #1
 8002524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d010      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002532:	4b64      	ldr	r3, [pc, #400]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002538:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002540:	4960      	ldr	r1, [pc, #384]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002550:	2301      	movs	r3, #1
 8002552:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d017      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002560:	4b58      	ldr	r3, [pc, #352]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002562:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002566:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	4955      	ldr	r1, [pc, #340]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800257e:	d101      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002580:	2301      	movs	r3, #1
 8002582:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800258c:	2301      	movs	r3, #1
 800258e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d017      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800259c:	4b49      	ldr	r3, [pc, #292]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800259e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025aa:	4946      	ldr	r1, [pc, #280]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ba:	d101      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80025bc:	2301      	movs	r3, #1
 80025be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80025c8:	2301      	movs	r3, #1
 80025ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 808a 	beq.w	80026ee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	4b39      	ldr	r3, [pc, #228]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	4a38      	ldr	r2, [pc, #224]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ea:	4b36      	ldr	r3, [pc, #216]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025f6:	4b34      	ldr	r3, [pc, #208]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a33      	ldr	r2, [pc, #204]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002600:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002602:	f7fe ffad 	bl	8001560 <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002608:	e008      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7fe ffa9 	bl	8001560 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e278      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800261c:	4b2a      	ldr	r3, [pc, #168]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002628:	4b26      	ldr	r3, [pc, #152]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002630:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d02f      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002640:	6a3a      	ldr	r2, [r7, #32]
 8002642:	429a      	cmp	r2, r3
 8002644:	d028      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002646:	4b1f      	ldr	r3, [pc, #124]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800264e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002650:	4b1e      	ldr	r3, [pc, #120]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002656:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800265c:	4a19      	ldr	r2, [pc, #100]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002662:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d114      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800266e:	f7fe ff77 	bl	8001560 <HAL_GetTick>
 8002672:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002674:	e00a      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fe ff73 	bl	8001560 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d901      	bls.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e240      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ee      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026a4:	d114      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80026a6:	4b07      	ldr	r3, [pc, #28]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80026b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ba:	4902      	ldr	r1, [pc, #8]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	608b      	str	r3, [r1, #8]
 80026c0:	e00c      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40007000 	.word	0x40007000
 80026cc:	42470e40 	.word	0x42470e40
 80026d0:	4b4a      	ldr	r3, [pc, #296]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4a49      	ldr	r2, [pc, #292]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026d6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80026da:	6093      	str	r3, [r2, #8]
 80026dc:	4b47      	ldr	r3, [pc, #284]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e8:	4944      	ldr	r1, [pc, #272]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002700:	4b3f      	ldr	r3, [pc, #252]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002702:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002710:	4b3a      	ldr	r3, [pc, #232]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002716:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271e:	4937      	ldr	r1, [pc, #220]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002732:	4b32      	ldr	r3, [pc, #200]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002738:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002740:	492e      	ldr	r1, [pc, #184]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d011      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002754:	4b29      	ldr	r3, [pc, #164]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800275a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002762:	4926      	ldr	r1, [pc, #152]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002772:	d101      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002774:	2301      	movs	r3, #1
 8002776:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002784:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800278a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	491a      	ldr	r1, [pc, #104]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d011      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ac:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b4:	4911      	ldr	r1, [pc, #68]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027c4:	d101      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80027c6:	2301      	movs	r3, #1
 80027c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80027ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d005      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027d8:	f040 80ff 	bne.w	80029da <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027dc:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027e2:	f7fe febd 	bl	8001560 <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027e8:	e00e      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027ea:	f7fe feb9 	bl	8001560 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d907      	bls.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e188      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x642>
 80027fc:	40023800 	.word	0x40023800
 8002800:	424711e0 	.word	0x424711e0
 8002804:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002808:	4b7e      	ldr	r3, [pc, #504]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ea      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002824:	2b00      	cmp	r3, #0
 8002826:	d009      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002830:	2b00      	cmp	r3, #0
 8002832:	d028      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d124      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800283c:	4b71      	ldr	r3, [pc, #452]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800283e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002842:	0c1b      	lsrs	r3, r3, #16
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	3301      	adds	r3, #1
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800284e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002854:	0e1b      	lsrs	r3, r3, #24
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	019b      	lsls	r3, r3, #6
 8002866:	431a      	orrs	r2, r3
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	3b01      	subs	r3, #1
 800286e:	041b      	lsls	r3, r3, #16
 8002870:	431a      	orrs	r2, r3
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	071b      	lsls	r3, r3, #28
 800287e:	4961      	ldr	r1, [pc, #388]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d035      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028b0:	d130      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028b2:	4b54      	ldr	r3, [pc, #336]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	3301      	adds	r3, #1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ca:	0f1b      	lsrs	r3, r3, #28
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	019b      	lsls	r3, r3, #6
 80028dc:	431a      	orrs	r2, r3
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	3b01      	subs	r3, #1
 80028e4:	041b      	lsls	r3, r3, #16
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	431a      	orrs	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	071b      	lsls	r3, r3, #28
 80028f4:	4943      	ldr	r1, [pc, #268]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80028fc:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002902:	f023 021f 	bic.w	r2, r3, #31
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290a:	3b01      	subs	r3, #1
 800290c:	493d      	ldr	r1, [pc, #244]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d029      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002928:	d124      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800292a:	4b36      	ldr	r3, [pc, #216]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800292c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	3301      	adds	r3, #1
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800293c:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800293e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002942:	0f1b      	lsrs	r3, r3, #28
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	019b      	lsls	r3, r3, #6
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	3b01      	subs	r3, #1
 800295e:	041b      	lsls	r3, r3, #16
 8002960:	431a      	orrs	r2, r3
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	061b      	lsls	r3, r3, #24
 8002966:	431a      	orrs	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	071b      	lsls	r3, r3, #28
 800296c:	4925      	ldr	r1, [pc, #148]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800297c:	2b00      	cmp	r3, #0
 800297e:	d016      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	3b01      	subs	r3, #1
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	071b      	lsls	r3, r3, #28
 80029a6:	4917      	ldr	r1, [pc, #92]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029ae:	4b16      	ldr	r3, [pc, #88]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fdd4 	bl	8001560 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029bc:	f7fe fdd0 	bl	8001560 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e09f      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80029da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029dc:	2b01      	cmp	r3, #1
 80029de:	f040 8095 	bne.w	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029e2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029e8:	f7fe fdba 	bl	8001560 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029ee:	e00f      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80029f0:	f7fe fdb6 	bl	8001560 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d908      	bls.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e085      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800
 8002a08:	42470068 	.word	0x42470068
 8002a0c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a10:	4b41      	ldr	r3, [pc, #260]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a1c:	d0e8      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d02b      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d127      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002a46:	4b34      	ldr	r3, [pc, #208]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699a      	ldr	r2, [r3, #24]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	431a      	orrs	r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	061b      	lsls	r3, r3, #24
 8002a74:	4928      	ldr	r1, [pc, #160]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a7c:	4b26      	ldr	r3, [pc, #152]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a82:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	4922      	ldr	r1, [pc, #136]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01d      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aaa:	d118      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aac:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab2:	0e1b      	lsrs	r3, r3, #24
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	019b      	lsls	r3, r3, #6
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	3b01      	subs	r3, #1
 8002ace:	041b      	lsls	r3, r3, #16
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	4910      	ldr	r1, [pc, #64]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ade:	4b0f      	ldr	r3, [pc, #60]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fd3c 	bl	8001560 <HAL_GetTick>
 8002ae8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002aec:	f7fe fd38 	bl	8001560 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e007      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b0a:	d1ef      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3730      	adds	r7, #48	@ 0x30
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	42470070 	.word	0x42470070

08002b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b24:	b0ae      	sub	sp, #184	@ 0xb8
 8002b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b46:	4bcb      	ldr	r3, [pc, #812]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	f200 8206 	bhi.w	8002f60 <HAL_RCC_GetSysClockFreq+0x440>
 8002b54:	a201      	add	r2, pc, #4	@ (adr r2, 8002b5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002b91 	.word	0x08002b91
 8002b60:	08002f61 	.word	0x08002f61
 8002b64:	08002f61 	.word	0x08002f61
 8002b68:	08002f61 	.word	0x08002f61
 8002b6c:	08002b99 	.word	0x08002b99
 8002b70:	08002f61 	.word	0x08002f61
 8002b74:	08002f61 	.word	0x08002f61
 8002b78:	08002f61 	.word	0x08002f61
 8002b7c:	08002ba1 	.word	0x08002ba1
 8002b80:	08002f61 	.word	0x08002f61
 8002b84:	08002f61 	.word	0x08002f61
 8002b88:	08002f61 	.word	0x08002f61
 8002b8c:	08002d91 	.word	0x08002d91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4bb9      	ldr	r3, [pc, #740]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002b96:	e1e7      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b98:	4bb8      	ldr	r3, [pc, #736]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b9e:	e1e3      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba0:	4bb4      	ldr	r3, [pc, #720]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bac:	4bb1      	ldr	r3, [pc, #708]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d071      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb8:	4bae      	ldr	r3, [pc, #696]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	099b      	lsrs	r3, r3, #6
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bc4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bde:	4622      	mov	r2, r4
 8002be0:	462b      	mov	r3, r5
 8002be2:	f04f 0000 	mov.w	r0, #0
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	0159      	lsls	r1, r3, #5
 8002bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf0:	0150      	lsls	r0, r2, #5
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	1a51      	subs	r1, r2, r1
 8002bfa:	6439      	str	r1, [r7, #64]	@ 0x40
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8002c02:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c10:	4649      	mov	r1, r9
 8002c12:	018b      	lsls	r3, r1, #6
 8002c14:	4641      	mov	r1, r8
 8002c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c1a:	4641      	mov	r1, r8
 8002c1c:	018a      	lsls	r2, r1, #6
 8002c1e:	4641      	mov	r1, r8
 8002c20:	1a51      	subs	r1, r2, r1
 8002c22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c24:	4649      	mov	r1, r9
 8002c26:	eb63 0301 	sbc.w	r3, r3, r1
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002c38:	4649      	mov	r1, r9
 8002c3a:	00cb      	lsls	r3, r1, #3
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c42:	4641      	mov	r1, r8
 8002c44:	00ca      	lsls	r2, r1, #3
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c52:	462b      	mov	r3, r5
 8002c54:	460a      	mov	r2, r1
 8002c56:	eb42 0303 	adc.w	r3, r2, r3
 8002c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c68:	4629      	mov	r1, r5
 8002c6a:	024b      	lsls	r3, r1, #9
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c72:	4621      	mov	r1, r4
 8002c74:	024a      	lsls	r2, r1, #9
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002c8c:	f7fd fb10 	bl	80002b0 <__aeabi_uldivmod>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4613      	mov	r3, r2
 8002c96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c9a:	e067      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9c:	4b75      	ldr	r3, [pc, #468]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ca8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002cba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	0159      	lsls	r1, r3, #5
 8002ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd0:	0150      	lsls	r0, r2, #5
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	1a51      	subs	r1, r2, r1
 8002cda:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002cdc:	4629      	mov	r1, r5
 8002cde:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002cf0:	4649      	mov	r1, r9
 8002cf2:	018b      	lsls	r3, r1, #6
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cfa:	4641      	mov	r1, r8
 8002cfc:	018a      	lsls	r2, r1, #6
 8002cfe:	4641      	mov	r1, r8
 8002d00:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d04:	4649      	mov	r1, r9
 8002d06:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d16:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d1e:	4692      	mov	sl, r2
 8002d20:	469b      	mov	fp, r3
 8002d22:	4623      	mov	r3, r4
 8002d24:	eb1a 0303 	adds.w	r3, sl, r3
 8002d28:	623b      	str	r3, [r7, #32]
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d3e:	4629      	mov	r1, r5
 8002d40:	028b      	lsls	r3, r1, #10
 8002d42:	4621      	mov	r1, r4
 8002d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d48:	4621      	mov	r1, r4
 8002d4a:	028a      	lsls	r2, r1, #10
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d54:	2200      	movs	r2, #0
 8002d56:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d58:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d5e:	f7fd faa7 	bl	80002b0 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4613      	mov	r3, r2
 8002d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d6c:	4b41      	ldr	r3, [pc, #260]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	0c1b      	lsrs	r3, r3, #16
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	3301      	adds	r3, #1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002d7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d8e:	e0eb      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d90:	4b38      	ldr	r3, [pc, #224]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d9c:	4b35      	ldr	r3, [pc, #212]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d06b      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da8:	4b32      	ldr	r3, [pc, #200]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	099b      	lsrs	r3, r3, #6
 8002dae:	2200      	movs	r2, #0
 8002db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002db2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002db4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dba:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dc0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002dc4:	4622      	mov	r2, r4
 8002dc6:	462b      	mov	r3, r5
 8002dc8:	f04f 0000 	mov.w	r0, #0
 8002dcc:	f04f 0100 	mov.w	r1, #0
 8002dd0:	0159      	lsls	r1, r3, #5
 8002dd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd6:	0150      	lsls	r0, r2, #5
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4621      	mov	r1, r4
 8002dde:	1a51      	subs	r1, r2, r1
 8002de0:	61b9      	str	r1, [r7, #24]
 8002de2:	4629      	mov	r1, r5
 8002de4:	eb63 0301 	sbc.w	r3, r3, r1
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002df6:	4659      	mov	r1, fp
 8002df8:	018b      	lsls	r3, r1, #6
 8002dfa:	4651      	mov	r1, sl
 8002dfc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e00:	4651      	mov	r1, sl
 8002e02:	018a      	lsls	r2, r1, #6
 8002e04:	4651      	mov	r1, sl
 8002e06:	ebb2 0801 	subs.w	r8, r2, r1
 8002e0a:	4659      	mov	r1, fp
 8002e0c:	eb63 0901 	sbc.w	r9, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e24:	4690      	mov	r8, r2
 8002e26:	4699      	mov	r9, r3
 8002e28:	4623      	mov	r3, r4
 8002e2a:	eb18 0303 	adds.w	r3, r8, r3
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	462b      	mov	r3, r5
 8002e32:	eb49 0303 	adc.w	r3, r9, r3
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e44:	4629      	mov	r1, r5
 8002e46:	024b      	lsls	r3, r1, #9
 8002e48:	4621      	mov	r1, r4
 8002e4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e4e:	4621      	mov	r1, r4
 8002e50:	024a      	lsls	r2, r1, #9
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e5e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e64:	f7fd fa24 	bl	80002b0 <__aeabi_uldivmod>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e72:	e065      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x420>
 8002e74:	40023800 	.word	0x40023800
 8002e78:	00f42400 	.word	0x00f42400
 8002e7c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e80:	4b3d      	ldr	r3, [pc, #244]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	2200      	movs	r2, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e90:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e92:	2300      	movs	r3, #0
 8002e94:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e96:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002e9a:	4642      	mov	r2, r8
 8002e9c:	464b      	mov	r3, r9
 8002e9e:	f04f 0000 	mov.w	r0, #0
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	0159      	lsls	r1, r3, #5
 8002ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eac:	0150      	lsls	r0, r2, #5
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4641      	mov	r1, r8
 8002eb4:	1a51      	subs	r1, r2, r1
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	4649      	mov	r1, r9
 8002eba:	eb63 0301 	sbc.w	r3, r3, r1
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ecc:	4659      	mov	r1, fp
 8002ece:	018b      	lsls	r3, r1, #6
 8002ed0:	4651      	mov	r1, sl
 8002ed2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed6:	4651      	mov	r1, sl
 8002ed8:	018a      	lsls	r2, r1, #6
 8002eda:	4651      	mov	r1, sl
 8002edc:	1a54      	subs	r4, r2, r1
 8002ede:	4659      	mov	r1, fp
 8002ee0:	eb63 0501 	sbc.w	r5, r3, r1
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	00eb      	lsls	r3, r5, #3
 8002eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef2:	00e2      	lsls	r2, r4, #3
 8002ef4:	4614      	mov	r4, r2
 8002ef6:	461d      	mov	r5, r3
 8002ef8:	4643      	mov	r3, r8
 8002efa:	18e3      	adds	r3, r4, r3
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	464b      	mov	r3, r9
 8002f00:	eb45 0303 	adc.w	r3, r5, r3
 8002f04:	607b      	str	r3, [r7, #4]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f12:	4629      	mov	r1, r5
 8002f14:	028b      	lsls	r3, r1, #10
 8002f16:	4621      	mov	r1, r4
 8002f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	028a      	lsls	r2, r1, #10
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f28:	2200      	movs	r2, #0
 8002f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f2c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f32:	f7fd f9bd 	bl	80002b0 <__aeabi_uldivmod>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f40:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0f1b      	lsrs	r3, r3, #28
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f5e:	e003      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f60:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	37b8      	adds	r7, #184	@ 0xb8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	00f42400 	.word	0x00f42400

08002f80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e28d      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8083 	beq.w	80030a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fa0:	4b94      	ldr	r3, [pc, #592]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d019      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fac:	4b91      	ldr	r3, [pc, #580]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fb8:	4b8e      	ldr	r3, [pc, #568]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	d112      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd2:	4b88      	ldr	r3, [pc, #544]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fde:	d10b      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe0:	4b84      	ldr	r3, [pc, #528]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d05b      	beq.n	80030a4 <HAL_RCC_OscConfig+0x124>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d157      	bne.n	80030a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e25a      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003000:	d106      	bne.n	8003010 <HAL_RCC_OscConfig+0x90>
 8003002:	4b7c      	ldr	r3, [pc, #496]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a7b      	ldr	r2, [pc, #492]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e01d      	b.n	800304c <HAL_RCC_OscConfig+0xcc>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0xb4>
 800301a:	4b76      	ldr	r3, [pc, #472]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a75      	ldr	r2, [pc, #468]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b73      	ldr	r3, [pc, #460]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a72      	ldr	r2, [pc, #456]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 800302c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e00b      	b.n	800304c <HAL_RCC_OscConfig+0xcc>
 8003034:	4b6f      	ldr	r3, [pc, #444]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a6e      	ldr	r2, [pc, #440]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 800303a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	4b6c      	ldr	r3, [pc, #432]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a6b      	ldr	r2, [pc, #428]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800304a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d013      	beq.n	800307c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe fa84 	bl	8001560 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800305c:	f7fe fa80 	bl	8001560 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	@ 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e21f      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	4b61      	ldr	r3, [pc, #388]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0xdc>
 800307a:	e014      	b.n	80030a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe fa70 	bl	8001560 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003084:	f7fe fa6c 	bl	8001560 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	@ 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e20b      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003096:	4b57      	ldr	r3, [pc, #348]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x104>
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d06f      	beq.n	8003192 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030b2:	4b50      	ldr	r3, [pc, #320]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d017      	beq.n	80030ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030be:	4b4d      	ldr	r3, [pc, #308]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d105      	bne.n	80030d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030ca:	4b4a      	ldr	r3, [pc, #296]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d6:	4b47      	ldr	r3, [pc, #284]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d11c      	bne.n	800311c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e2:	4b44      	ldr	r3, [pc, #272]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d116      	bne.n	800311c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	4b41      	ldr	r3, [pc, #260]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_RCC_OscConfig+0x186>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d001      	beq.n	8003106 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e1d3      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003106:	4b3b      	ldr	r3, [pc, #236]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4937      	ldr	r1, [pc, #220]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	e03a      	b.n	8003192 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003124:	4b34      	ldr	r3, [pc, #208]	@ (80031f8 <HAL_RCC_OscConfig+0x278>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fe fa19 	bl	8001560 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003132:	f7fe fa15 	bl	8001560 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1b4      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	4b2b      	ldr	r3, [pc, #172]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003150:	4b28      	ldr	r3, [pc, #160]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4925      	ldr	r1, [pc, #148]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]
 8003164:	e015      	b.n	8003192 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003166:	4b24      	ldr	r3, [pc, #144]	@ (80031f8 <HAL_RCC_OscConfig+0x278>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe f9f8 	bl	8001560 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003174:	f7fe f9f4 	bl	8001560 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e193      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	4b1b      	ldr	r3, [pc, #108]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d036      	beq.n	800320c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a6:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <HAL_RCC_OscConfig+0x27c>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fe f9d8 	bl	8001560 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b4:	f7fe f9d4 	bl	8001560 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e173      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCC_OscConfig+0x274>)
 80031c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x234>
 80031d2:	e01b      	b.n	800320c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d4:	4b09      	ldr	r3, [pc, #36]	@ (80031fc <HAL_RCC_OscConfig+0x27c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fe f9c1 	bl	8001560 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	e00e      	b.n	8003200 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e2:	f7fe f9bd 	bl	8001560 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d907      	bls.n	8003200 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e15c      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
 80031f4:	40023800 	.word	0x40023800
 80031f8:	42470000 	.word	0x42470000
 80031fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003200:	4b8a      	ldr	r3, [pc, #552]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 8003202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ea      	bne.n	80031e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8097 	beq.w	8003348 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321e:	4b83      	ldr	r3, [pc, #524]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	4b7f      	ldr	r3, [pc, #508]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	4a7e      	ldr	r2, [pc, #504]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	@ 0x40
 800323a:	4b7c      	ldr	r3, [pc, #496]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324a:	4b79      	ldr	r3, [pc, #484]	@ (8003430 <HAL_RCC_OscConfig+0x4b0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d118      	bne.n	8003288 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003256:	4b76      	ldr	r3, [pc, #472]	@ (8003430 <HAL_RCC_OscConfig+0x4b0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a75      	ldr	r2, [pc, #468]	@ (8003430 <HAL_RCC_OscConfig+0x4b0>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003262:	f7fe f97d 	bl	8001560 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326a:	f7fe f979 	bl	8001560 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e118      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	4b6c      	ldr	r3, [pc, #432]	@ (8003430 <HAL_RCC_OscConfig+0x4b0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x31e>
 8003290:	4b66      	ldr	r3, [pc, #408]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003294:	4a65      	ldr	r2, [pc, #404]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	@ 0x70
 800329c:	e01c      	b.n	80032d8 <HAL_RCC_OscConfig+0x358>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x340>
 80032a6:	4b61      	ldr	r3, [pc, #388]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032aa:	4a60      	ldr	r2, [pc, #384]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b2:	4b5e      	ldr	r3, [pc, #376]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	4a5d      	ldr	r2, [pc, #372]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0x358>
 80032c0:	4b5a      	ldr	r3, [pc, #360]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c4:	4a59      	ldr	r2, [pc, #356]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80032cc:	4b57      	ldr	r3, [pc, #348]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	4a56      	ldr	r2, [pc, #344]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 80032d2:	f023 0304 	bic.w	r3, r3, #4
 80032d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d015      	beq.n	800330c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe f93e 	bl	8001560 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe f93a 	bl	8001560 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0d7      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	4b4b      	ldr	r3, [pc, #300]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ee      	beq.n	80032e8 <HAL_RCC_OscConfig+0x368>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe f928 	bl	8001560 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe f924 	bl	8001560 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e0c1      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332a:	4b40      	ldr	r3, [pc, #256]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ee      	bne.n	8003314 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333c:	4b3b      	ldr	r3, [pc, #236]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	4a3a      	ldr	r2, [pc, #232]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 8003342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003346:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80ad 	beq.w	80034ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003352:	4b36      	ldr	r3, [pc, #216]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b08      	cmp	r3, #8
 800335c:	d060      	beq.n	8003420 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d145      	bne.n	80033f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	4b33      	ldr	r3, [pc, #204]	@ (8003434 <HAL_RCC_OscConfig+0x4b4>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fe f8f8 	bl	8001560 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003374:	f7fe f8f4 	bl	8001560 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e093      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	4b29      	ldr	r3, [pc, #164]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	3b01      	subs	r3, #1
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	071b      	lsls	r3, r3, #28
 80033be:	491b      	ldr	r1, [pc, #108]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003434 <HAL_RCC_OscConfig+0x4b4>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ca:	f7fe f8c9 	bl	8001560 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d2:	f7fe f8c5 	bl	8001560 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e064      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e4:	4b11      	ldr	r3, [pc, #68]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x452>
 80033f0:	e05c      	b.n	80034ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b10      	ldr	r3, [pc, #64]	@ (8003434 <HAL_RCC_OscConfig+0x4b4>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe f8b2 	bl	8001560 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe f8ae 	bl	8001560 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e04d      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <HAL_RCC_OscConfig+0x4ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x480>
 800341e:	e045      	b.n	80034ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e040      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
 800342c:	40023800 	.word	0x40023800
 8003430:	40007000 	.word	0x40007000
 8003434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003438:	4b1f      	ldr	r3, [pc, #124]	@ (80034b8 <HAL_RCC_OscConfig+0x538>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d030      	beq.n	80034a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d129      	bne.n	80034a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d122      	bne.n	80034a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003468:	4013      	ands	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800346e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003470:	4293      	cmp	r3, r2
 8003472:	d119      	bne.n	80034a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347e:	085b      	lsrs	r3, r3, #1
 8003480:	3b01      	subs	r3, #1
 8003482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d10f      	bne.n	80034a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800

080034bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e041      	b.n	8003552 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fd fe4a 	bl	800117c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f000 fa7e 	bl	80039fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d001      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e04e      	b.n	8003612 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a23      	ldr	r2, [pc, #140]	@ (8003620 <HAL_TIM_Base_Start_IT+0xc4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d022      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x80>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800359e:	d01d      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x80>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003624 <HAL_TIM_Base_Start_IT+0xc8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d018      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x80>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003628 <HAL_TIM_Base_Start_IT+0xcc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d013      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x80>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1c      	ldr	r2, [pc, #112]	@ (800362c <HAL_TIM_Base_Start_IT+0xd0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00e      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x80>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003630 <HAL_TIM_Base_Start_IT+0xd4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d009      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x80>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a19      	ldr	r2, [pc, #100]	@ (8003634 <HAL_TIM_Base_Start_IT+0xd8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x80>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a18      	ldr	r2, [pc, #96]	@ (8003638 <HAL_TIM_Base_Start_IT+0xdc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d111      	bne.n	8003600 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d010      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	e007      	b.n	8003610 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800
 800362c:	40000c00 	.word	0x40000c00
 8003630:	40010400 	.word	0x40010400
 8003634:	40014000 	.word	0x40014000
 8003638:	40001800 	.word	0x40001800

0800363c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d020      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01b      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0202 	mvn.w	r2, #2
 8003670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f999 	bl	80039be <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f98b 	bl	80039aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f99c 	bl	80039d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d020      	beq.n	80036ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01b      	beq.n	80036ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0204 	mvn.w	r2, #4
 80036bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f973 	bl	80039be <HAL_TIM_IC_CaptureCallback>
 80036d8:	e005      	b.n	80036e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f965 	bl	80039aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f976 	bl	80039d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d020      	beq.n	8003738 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01b      	beq.n	8003738 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0208 	mvn.w	r2, #8
 8003708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2204      	movs	r2, #4
 800370e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f94d 	bl	80039be <HAL_TIM_IC_CaptureCallback>
 8003724:	e005      	b.n	8003732 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f93f 	bl	80039aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f950 	bl	80039d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	d020      	beq.n	8003784 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0210 	mvn.w	r2, #16
 8003754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2208      	movs	r2, #8
 800375a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f927 	bl	80039be <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f919 	bl	80039aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f92a 	bl	80039d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00c      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0201 	mvn.w	r2, #1
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd fc1a 	bl	8000fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00c      	beq.n	80037cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d007      	beq.n	80037cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fae4 	bl	8003d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00c      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8fb 	bl	80039e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00c      	beq.n	8003814 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0220 	mvn.w	r2, #32
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fab6 	bl	8003d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_TIM_ConfigClockSource+0x1c>
 8003834:	2302      	movs	r3, #2
 8003836:	e0b4      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x186>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800385e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003870:	d03e      	beq.n	80038f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003876:	f200 8087 	bhi.w	8003988 <HAL_TIM_ConfigClockSource+0x16c>
 800387a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800387e:	f000 8086 	beq.w	800398e <HAL_TIM_ConfigClockSource+0x172>
 8003882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003886:	d87f      	bhi.n	8003988 <HAL_TIM_ConfigClockSource+0x16c>
 8003888:	2b70      	cmp	r3, #112	@ 0x70
 800388a:	d01a      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0xa6>
 800388c:	2b70      	cmp	r3, #112	@ 0x70
 800388e:	d87b      	bhi.n	8003988 <HAL_TIM_ConfigClockSource+0x16c>
 8003890:	2b60      	cmp	r3, #96	@ 0x60
 8003892:	d050      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x11a>
 8003894:	2b60      	cmp	r3, #96	@ 0x60
 8003896:	d877      	bhi.n	8003988 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b50      	cmp	r3, #80	@ 0x50
 800389a:	d03c      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0xfa>
 800389c:	2b50      	cmp	r3, #80	@ 0x50
 800389e:	d873      	bhi.n	8003988 <HAL_TIM_ConfigClockSource+0x16c>
 80038a0:	2b40      	cmp	r3, #64	@ 0x40
 80038a2:	d058      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x13a>
 80038a4:	2b40      	cmp	r3, #64	@ 0x40
 80038a6:	d86f      	bhi.n	8003988 <HAL_TIM_ConfigClockSource+0x16c>
 80038a8:	2b30      	cmp	r3, #48	@ 0x30
 80038aa:	d064      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x15a>
 80038ac:	2b30      	cmp	r3, #48	@ 0x30
 80038ae:	d86b      	bhi.n	8003988 <HAL_TIM_ConfigClockSource+0x16c>
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d060      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x15a>
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d867      	bhi.n	8003988 <HAL_TIM_ConfigClockSource+0x16c>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d05c      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x15a>
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d05a      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x15a>
 80038c0:	e062      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038d2:	f000 f9b9 	bl	8003c48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	609a      	str	r2, [r3, #8]
      break;
 80038ee:	e04f      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003900:	f000 f9a2 	bl	8003c48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003912:	609a      	str	r2, [r3, #8]
      break;
 8003914:	e03c      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003922:	461a      	mov	r2, r3
 8003924:	f000 f916 	bl	8003b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2150      	movs	r1, #80	@ 0x50
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f96f 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 8003934:	e02c      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003942:	461a      	mov	r2, r3
 8003944:	f000 f935 	bl	8003bb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2160      	movs	r1, #96	@ 0x60
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f95f 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 8003954:	e01c      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003962:	461a      	mov	r2, r3
 8003964:	f000 f8f6 	bl	8003b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2140      	movs	r1, #64	@ 0x40
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f94f 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 8003974:	e00c      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4619      	mov	r1, r3
 8003980:	4610      	mov	r0, r2
 8003982:	f000 f946 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 8003986:	e003      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      break;
 800398c:	e000      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800398e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a46      	ldr	r2, [pc, #280]	@ (8003b28 <TIM_Base_SetConfig+0x12c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <TIM_Base_SetConfig+0x40>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a1a:	d00f      	beq.n	8003a3c <TIM_Base_SetConfig+0x40>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a43      	ldr	r2, [pc, #268]	@ (8003b2c <TIM_Base_SetConfig+0x130>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <TIM_Base_SetConfig+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a42      	ldr	r2, [pc, #264]	@ (8003b30 <TIM_Base_SetConfig+0x134>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d007      	beq.n	8003a3c <TIM_Base_SetConfig+0x40>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a41      	ldr	r2, [pc, #260]	@ (8003b34 <TIM_Base_SetConfig+0x138>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <TIM_Base_SetConfig+0x40>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a40      	ldr	r2, [pc, #256]	@ (8003b38 <TIM_Base_SetConfig+0x13c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d108      	bne.n	8003a4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a35      	ldr	r2, [pc, #212]	@ (8003b28 <TIM_Base_SetConfig+0x12c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d02b      	beq.n	8003aae <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5c:	d027      	beq.n	8003aae <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a32      	ldr	r2, [pc, #200]	@ (8003b2c <TIM_Base_SetConfig+0x130>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d023      	beq.n	8003aae <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a31      	ldr	r2, [pc, #196]	@ (8003b30 <TIM_Base_SetConfig+0x134>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01f      	beq.n	8003aae <TIM_Base_SetConfig+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a30      	ldr	r2, [pc, #192]	@ (8003b34 <TIM_Base_SetConfig+0x138>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01b      	beq.n	8003aae <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a2f      	ldr	r2, [pc, #188]	@ (8003b38 <TIM_Base_SetConfig+0x13c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d017      	beq.n	8003aae <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2e      	ldr	r2, [pc, #184]	@ (8003b3c <TIM_Base_SetConfig+0x140>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2d      	ldr	r2, [pc, #180]	@ (8003b40 <TIM_Base_SetConfig+0x144>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00f      	beq.n	8003aae <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2c      	ldr	r2, [pc, #176]	@ (8003b44 <TIM_Base_SetConfig+0x148>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00b      	beq.n	8003aae <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2b      	ldr	r2, [pc, #172]	@ (8003b48 <TIM_Base_SetConfig+0x14c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b4c <TIM_Base_SetConfig+0x150>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d003      	beq.n	8003aae <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a29      	ldr	r2, [pc, #164]	@ (8003b50 <TIM_Base_SetConfig+0x154>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d108      	bne.n	8003ac0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a10      	ldr	r2, [pc, #64]	@ (8003b28 <TIM_Base_SetConfig+0x12c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d003      	beq.n	8003af4 <TIM_Base_SetConfig+0xf8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <TIM_Base_SetConfig+0x13c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d103      	bne.n	8003afc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f023 0201 	bic.w	r2, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	611a      	str	r2, [r3, #16]
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40000400 	.word	0x40000400
 8003b30:	40000800 	.word	0x40000800
 8003b34:	40000c00 	.word	0x40000c00
 8003b38:	40010400 	.word	0x40010400
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40014400 	.word	0x40014400
 8003b44:	40014800 	.word	0x40014800
 8003b48:	40001800 	.word	0x40001800
 8003b4c:	40001c00 	.word	0x40001c00
 8003b50:	40002000 	.word	0x40002000

08003b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f023 0201 	bic.w	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f023 030a 	bic.w	r3, r3, #10
 8003b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b087      	sub	sp, #28
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f023 0210 	bic.w	r2, r3, #16
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	031b      	lsls	r3, r3, #12
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f043 0307 	orr.w	r3, r3, #7
 8003c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	021a      	lsls	r2, r3, #8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e05a      	b.n	8003d56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a21      	ldr	r2, [pc, #132]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d022      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cec:	d01d      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d018      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1a      	ldr	r2, [pc, #104]	@ (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00e      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a18      	ldr	r2, [pc, #96]	@ (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d009      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a17      	ldr	r2, [pc, #92]	@ (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d004      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a15      	ldr	r2, [pc, #84]	@ (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d10c      	bne.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40000400 	.word	0x40000400
 8003d6c:	40000800 	.word	0x40000800
 8003d70:	40000c00 	.word	0x40000c00
 8003d74:	40010400 	.word	0x40010400
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	40001800 	.word	0x40001800

08003d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e042      	b.n	8003e40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd f9fc 	bl	80011cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	@ 0x24
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f973 	bl	80040d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	@ 0x28
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d175      	bne.n	8003f54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_UART_Transmit+0x2c>
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e06e      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2221      	movs	r2, #33	@ 0x21
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e86:	f7fd fb6b 	bl	8001560 <HAL_GetTick>
 8003e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea0:	d108      	bne.n	8003eb4 <HAL_UART_Transmit+0x6c>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d104      	bne.n	8003eb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e003      	b.n	8003ebc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ebc:	e02e      	b.n	8003f1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2180      	movs	r1, #128	@ 0x80
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f848 	bl	8003f5e <UART_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e03a      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10b      	bne.n	8003efe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	3302      	adds	r3, #2
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	e007      	b.n	8003f0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	781a      	ldrb	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1cb      	bne.n	8003ebe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2140      	movs	r1, #64	@ 0x40
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f814 	bl	8003f5e <UART_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e006      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e000      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f54:	2302      	movs	r3, #2
  }
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6e:	e03b      	b.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f76:	d037      	beq.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f78:	f7fd faf2 	bl	8001560 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	6a3a      	ldr	r2, [r7, #32]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d302      	bcc.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e03a      	b.n	8004008 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d023      	beq.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b80      	cmp	r3, #128	@ 0x80
 8003fa4:	d020      	beq.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b40      	cmp	r3, #64	@ 0x40
 8003faa:	d01d      	beq.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d116      	bne.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f81d 	bl	8004010 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e00f      	b.n	8004008 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	429a      	cmp	r2, r3
 8004004:	d0b4      	beq.n	8003f70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b095      	sub	sp, #84	@ 0x54
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800402e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004038:	643a      	str	r2, [r7, #64]	@ 0x40
 800403a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800403e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3314      	adds	r3, #20
 8004052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	61fb      	str	r3, [r7, #28]
   return(result);
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3314      	adds	r3, #20
 800406a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800406c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800406e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e5      	bne.n	800404c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	2b01      	cmp	r3, #1
 8004086:	d119      	bne.n	80040bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	60bb      	str	r3, [r7, #8]
   return(result);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f023 0310 	bic.w	r3, r3, #16
 800409e:	647b      	str	r3, [r7, #68]	@ 0x44
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	330c      	adds	r3, #12
 80040a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040a8:	61ba      	str	r2, [r7, #24]
 80040aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6979      	ldr	r1, [r7, #20]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	613b      	str	r3, [r7, #16]
   return(result);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e5      	bne.n	8004088 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040ca:	bf00      	nop
 80040cc:	3754      	adds	r7, #84	@ 0x54
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040dc:	b0c0      	sub	sp, #256	@ 0x100
 80040de:	af00      	add	r7, sp, #0
 80040e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	68d9      	ldr	r1, [r3, #12]
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	ea40 0301 	orr.w	r3, r0, r1
 8004100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	431a      	orrs	r2, r3
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	431a      	orrs	r2, r3
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004130:	f021 010c 	bic.w	r1, r1, #12
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800413e:	430b      	orrs	r3, r1
 8004140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	6999      	ldr	r1, [r3, #24]
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	ea40 0301 	orr.w	r3, r0, r1
 800415e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b8f      	ldr	r3, [pc, #572]	@ (80043a4 <UART_SetConfig+0x2cc>)
 8004168:	429a      	cmp	r2, r3
 800416a:	d005      	beq.n	8004178 <UART_SetConfig+0xa0>
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4b8d      	ldr	r3, [pc, #564]	@ (80043a8 <UART_SetConfig+0x2d0>)
 8004174:	429a      	cmp	r2, r3
 8004176:	d104      	bne.n	8004182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004178:	f7fe f994 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 800417c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004180:	e003      	b.n	800418a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004182:	f7fe f97b 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8004186:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004194:	f040 810c 	bne.w	80043b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800419c:	2200      	movs	r2, #0
 800419e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80041aa:	4622      	mov	r2, r4
 80041ac:	462b      	mov	r3, r5
 80041ae:	1891      	adds	r1, r2, r2
 80041b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80041b2:	415b      	adcs	r3, r3
 80041b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041ba:	4621      	mov	r1, r4
 80041bc:	eb12 0801 	adds.w	r8, r2, r1
 80041c0:	4629      	mov	r1, r5
 80041c2:	eb43 0901 	adc.w	r9, r3, r1
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041da:	4690      	mov	r8, r2
 80041dc:	4699      	mov	r9, r3
 80041de:	4623      	mov	r3, r4
 80041e0:	eb18 0303 	adds.w	r3, r8, r3
 80041e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041e8:	462b      	mov	r3, r5
 80041ea:	eb49 0303 	adc.w	r3, r9, r3
 80041ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004206:	460b      	mov	r3, r1
 8004208:	18db      	adds	r3, r3, r3
 800420a:	653b      	str	r3, [r7, #80]	@ 0x50
 800420c:	4613      	mov	r3, r2
 800420e:	eb42 0303 	adc.w	r3, r2, r3
 8004212:	657b      	str	r3, [r7, #84]	@ 0x54
 8004214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800421c:	f7fc f848 	bl	80002b0 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4b61      	ldr	r3, [pc, #388]	@ (80043ac <UART_SetConfig+0x2d4>)
 8004226:	fba3 2302 	umull	r2, r3, r3, r2
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	011c      	lsls	r4, r3, #4
 800422e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004232:	2200      	movs	r2, #0
 8004234:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004238:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800423c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	1891      	adds	r1, r2, r2
 8004246:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004248:	415b      	adcs	r3, r3
 800424a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800424c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004250:	4641      	mov	r1, r8
 8004252:	eb12 0a01 	adds.w	sl, r2, r1
 8004256:	4649      	mov	r1, r9
 8004258:	eb43 0b01 	adc.w	fp, r3, r1
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800426c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004270:	4692      	mov	sl, r2
 8004272:	469b      	mov	fp, r3
 8004274:	4643      	mov	r3, r8
 8004276:	eb1a 0303 	adds.w	r3, sl, r3
 800427a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800427e:	464b      	mov	r3, r9
 8004280:	eb4b 0303 	adc.w	r3, fp, r3
 8004284:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004294:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800429c:	460b      	mov	r3, r1
 800429e:	18db      	adds	r3, r3, r3
 80042a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80042a2:	4613      	mov	r3, r2
 80042a4:	eb42 0303 	adc.w	r3, r2, r3
 80042a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80042ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80042b2:	f7fb fffd 	bl	80002b0 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	4b3b      	ldr	r3, [pc, #236]	@ (80043ac <UART_SetConfig+0x2d4>)
 80042be:	fba3 2301 	umull	r2, r3, r3, r1
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2264      	movs	r2, #100	@ 0x64
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	1acb      	subs	r3, r1, r3
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042d2:	4b36      	ldr	r3, [pc, #216]	@ (80043ac <UART_SetConfig+0x2d4>)
 80042d4:	fba3 2302 	umull	r2, r3, r3, r2
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042e0:	441c      	add	r4, r3
 80042e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	1891      	adds	r1, r2, r2
 80042fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042fc:	415b      	adcs	r3, r3
 80042fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004304:	4641      	mov	r1, r8
 8004306:	1851      	adds	r1, r2, r1
 8004308:	6339      	str	r1, [r7, #48]	@ 0x30
 800430a:	4649      	mov	r1, r9
 800430c:	414b      	adcs	r3, r1
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800431c:	4659      	mov	r1, fp
 800431e:	00cb      	lsls	r3, r1, #3
 8004320:	4651      	mov	r1, sl
 8004322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004326:	4651      	mov	r1, sl
 8004328:	00ca      	lsls	r2, r1, #3
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	4603      	mov	r3, r0
 8004330:	4642      	mov	r2, r8
 8004332:	189b      	adds	r3, r3, r2
 8004334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004338:	464b      	mov	r3, r9
 800433a:	460a      	mov	r2, r1
 800433c:	eb42 0303 	adc.w	r3, r2, r3
 8004340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004350:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004358:	460b      	mov	r3, r1
 800435a:	18db      	adds	r3, r3, r3
 800435c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800435e:	4613      	mov	r3, r2
 8004360:	eb42 0303 	adc.w	r3, r2, r3
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800436a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800436e:	f7fb ff9f 	bl	80002b0 <__aeabi_uldivmod>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4b0d      	ldr	r3, [pc, #52]	@ (80043ac <UART_SetConfig+0x2d4>)
 8004378:	fba3 1302 	umull	r1, r3, r3, r2
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	2164      	movs	r1, #100	@ 0x64
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	3332      	adds	r3, #50	@ 0x32
 800438a:	4a08      	ldr	r2, [pc, #32]	@ (80043ac <UART_SetConfig+0x2d4>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	f003 0207 	and.w	r2, r3, #7
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4422      	add	r2, r4
 800439e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043a0:	e106      	b.n	80045b0 <UART_SetConfig+0x4d8>
 80043a2:	bf00      	nop
 80043a4:	40011000 	.word	0x40011000
 80043a8:	40011400 	.word	0x40011400
 80043ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043b4:	2200      	movs	r2, #0
 80043b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80043be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80043c2:	4642      	mov	r2, r8
 80043c4:	464b      	mov	r3, r9
 80043c6:	1891      	adds	r1, r2, r2
 80043c8:	6239      	str	r1, [r7, #32]
 80043ca:	415b      	adcs	r3, r3
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043d2:	4641      	mov	r1, r8
 80043d4:	1854      	adds	r4, r2, r1
 80043d6:	4649      	mov	r1, r9
 80043d8:	eb43 0501 	adc.w	r5, r3, r1
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	00eb      	lsls	r3, r5, #3
 80043e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ea:	00e2      	lsls	r2, r4, #3
 80043ec:	4614      	mov	r4, r2
 80043ee:	461d      	mov	r5, r3
 80043f0:	4643      	mov	r3, r8
 80043f2:	18e3      	adds	r3, r4, r3
 80043f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043f8:	464b      	mov	r3, r9
 80043fa:	eb45 0303 	adc.w	r3, r5, r3
 80043fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800440e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800441e:	4629      	mov	r1, r5
 8004420:	008b      	lsls	r3, r1, #2
 8004422:	4621      	mov	r1, r4
 8004424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004428:	4621      	mov	r1, r4
 800442a:	008a      	lsls	r2, r1, #2
 800442c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004430:	f7fb ff3e 	bl	80002b0 <__aeabi_uldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4b60      	ldr	r3, [pc, #384]	@ (80045bc <UART_SetConfig+0x4e4>)
 800443a:	fba3 2302 	umull	r2, r3, r3, r2
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	011c      	lsls	r4, r3, #4
 8004442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004446:	2200      	movs	r2, #0
 8004448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800444c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004454:	4642      	mov	r2, r8
 8004456:	464b      	mov	r3, r9
 8004458:	1891      	adds	r1, r2, r2
 800445a:	61b9      	str	r1, [r7, #24]
 800445c:	415b      	adcs	r3, r3
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004464:	4641      	mov	r1, r8
 8004466:	1851      	adds	r1, r2, r1
 8004468:	6139      	str	r1, [r7, #16]
 800446a:	4649      	mov	r1, r9
 800446c:	414b      	adcs	r3, r1
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800447c:	4659      	mov	r1, fp
 800447e:	00cb      	lsls	r3, r1, #3
 8004480:	4651      	mov	r1, sl
 8004482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004486:	4651      	mov	r1, sl
 8004488:	00ca      	lsls	r2, r1, #3
 800448a:	4610      	mov	r0, r2
 800448c:	4619      	mov	r1, r3
 800448e:	4603      	mov	r3, r0
 8004490:	4642      	mov	r2, r8
 8004492:	189b      	adds	r3, r3, r2
 8004494:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004498:	464b      	mov	r3, r9
 800449a:	460a      	mov	r2, r1
 800449c:	eb42 0303 	adc.w	r3, r2, r3
 80044a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80044bc:	4649      	mov	r1, r9
 80044be:	008b      	lsls	r3, r1, #2
 80044c0:	4641      	mov	r1, r8
 80044c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044c6:	4641      	mov	r1, r8
 80044c8:	008a      	lsls	r2, r1, #2
 80044ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044ce:	f7fb feef 	bl	80002b0 <__aeabi_uldivmod>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	4b38      	ldr	r3, [pc, #224]	@ (80045bc <UART_SetConfig+0x4e4>)
 80044da:	fba3 2301 	umull	r2, r3, r3, r1
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	2264      	movs	r2, #100	@ 0x64
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	1acb      	subs	r3, r1, r3
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	3332      	adds	r3, #50	@ 0x32
 80044ec:	4a33      	ldr	r2, [pc, #204]	@ (80045bc <UART_SetConfig+0x4e4>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044f8:	441c      	add	r4, r3
 80044fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044fe:	2200      	movs	r2, #0
 8004500:	673b      	str	r3, [r7, #112]	@ 0x70
 8004502:	677a      	str	r2, [r7, #116]	@ 0x74
 8004504:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004508:	4642      	mov	r2, r8
 800450a:	464b      	mov	r3, r9
 800450c:	1891      	adds	r1, r2, r2
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	415b      	adcs	r3, r3
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004518:	4641      	mov	r1, r8
 800451a:	1851      	adds	r1, r2, r1
 800451c:	6039      	str	r1, [r7, #0]
 800451e:	4649      	mov	r1, r9
 8004520:	414b      	adcs	r3, r1
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004530:	4659      	mov	r1, fp
 8004532:	00cb      	lsls	r3, r1, #3
 8004534:	4651      	mov	r1, sl
 8004536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453a:	4651      	mov	r1, sl
 800453c:	00ca      	lsls	r2, r1, #3
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	4603      	mov	r3, r0
 8004544:	4642      	mov	r2, r8
 8004546:	189b      	adds	r3, r3, r2
 8004548:	66bb      	str	r3, [r7, #104]	@ 0x68
 800454a:	464b      	mov	r3, r9
 800454c:	460a      	mov	r2, r1
 800454e:	eb42 0303 	adc.w	r3, r2, r3
 8004552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	663b      	str	r3, [r7, #96]	@ 0x60
 800455e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800456c:	4649      	mov	r1, r9
 800456e:	008b      	lsls	r3, r1, #2
 8004570:	4641      	mov	r1, r8
 8004572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004576:	4641      	mov	r1, r8
 8004578:	008a      	lsls	r2, r1, #2
 800457a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800457e:	f7fb fe97 	bl	80002b0 <__aeabi_uldivmod>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4b0d      	ldr	r3, [pc, #52]	@ (80045bc <UART_SetConfig+0x4e4>)
 8004588:	fba3 1302 	umull	r1, r3, r3, r2
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	2164      	movs	r1, #100	@ 0x64
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	3332      	adds	r3, #50	@ 0x32
 800459a:	4a08      	ldr	r2, [pc, #32]	@ (80045bc <UART_SetConfig+0x4e4>)
 800459c:	fba2 2303 	umull	r2, r3, r2, r3
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	f003 020f 	and.w	r2, r3, #15
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4422      	add	r2, r4
 80045ae:	609a      	str	r2, [r3, #8]
}
 80045b0:	bf00      	nop
 80045b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80045b6:	46bd      	mov	sp, r7
 80045b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045bc:	51eb851f 	.word	0x51eb851f

080045c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045c0:	b084      	sub	sp, #16
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	f107 001c 	add.w	r0, r7, #28
 80045ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d123      	bne.n	8004622 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80045ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004602:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004606:	2b01      	cmp	r3, #1
 8004608:	d105      	bne.n	8004616 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa9a 	bl	8004b50 <USB_CoreReset>
 800461c:	4603      	mov	r3, r0
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e01b      	b.n	800465a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa8e 	bl	8004b50 <USB_CoreReset>
 8004634:	4603      	mov	r3, r0
 8004636:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004638:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	639a      	str	r2, [r3, #56]	@ 0x38
 800464c:	e005      	b.n	800465a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004652:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800465a:	7fbb      	ldrb	r3, [r7, #30]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10b      	bne.n	8004678 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f043 0206 	orr.w	r2, r3, #6
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004684:	b004      	add	sp, #16
 8004686:	4770      	bx	lr

08004688 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f023 0201 	bic.w	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d115      	bne.n	80046f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80046d8:	200a      	movs	r0, #10
 80046da:	f7fc ff4d 	bl	8001578 <HAL_Delay>
      ms += 10U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	330a      	adds	r3, #10
 80046e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fa25 	bl	8004b34 <USB_GetMode>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d01e      	beq.n	800472e <USB_SetCurrentMode+0x84>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80046f4:	d9f0      	bls.n	80046d8 <USB_SetCurrentMode+0x2e>
 80046f6:	e01a      	b.n	800472e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d115      	bne.n	800472a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800470a:	200a      	movs	r0, #10
 800470c:	f7fc ff34 	bl	8001578 <HAL_Delay>
      ms += 10U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	330a      	adds	r3, #10
 8004714:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fa0c 	bl	8004b34 <USB_GetMode>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <USB_SetCurrentMode+0x84>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2bc7      	cmp	r3, #199	@ 0xc7
 8004726:	d9f0      	bls.n	800470a <USB_SetCurrentMode+0x60>
 8004728:	e001      	b.n	800472e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e005      	b.n	800473a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2bc8      	cmp	r3, #200	@ 0xc8
 8004732:	d101      	bne.n	8004738 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004744:	b084      	sub	sp, #16
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800475e:	2300      	movs	r3, #0
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	e009      	b.n	8004778 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	3340      	adds	r3, #64	@ 0x40
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	2200      	movs	r2, #0
 8004770:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3301      	adds	r3, #1
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b0e      	cmp	r3, #14
 800477c:	d9f2      	bls.n	8004764 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800477e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004782:	2b00      	cmp	r3, #0
 8004784:	d11c      	bne.n	80047c0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004794:	f043 0302 	orr.w	r3, r3, #2
 8004798:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e005      	b.n	80047cc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047d2:	461a      	mov	r2, r3
 80047d4:	2300      	movs	r3, #0
 80047d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d10d      	bne.n	80047fc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d104      	bne.n	80047f2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047e8:	2100      	movs	r1, #0
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f968 	bl	8004ac0 <USB_SetDevSpeed>
 80047f0:	e008      	b.n	8004804 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047f2:	2101      	movs	r1, #1
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f963 	bl	8004ac0 <USB_SetDevSpeed>
 80047fa:	e003      	b.n	8004804 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047fc:	2103      	movs	r1, #3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f95e 	bl	8004ac0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004804:	2110      	movs	r1, #16
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f8fa 	bl	8004a00 <USB_FlushTxFifo>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f924 	bl	8004a64 <USB_FlushRxFifo>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800482c:	461a      	mov	r2, r3
 800482e:	2300      	movs	r3, #0
 8004830:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004838:	461a      	mov	r2, r3
 800483a:	2300      	movs	r3, #0
 800483c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004844:	461a      	mov	r2, r3
 8004846:	2300      	movs	r3, #0
 8004848:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	e043      	b.n	80048d8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004862:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004866:	d118      	bne.n	800489a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10a      	bne.n	8004884 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800487a:	461a      	mov	r2, r3
 800487c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	e013      	b.n	80048ac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004890:	461a      	mov	r2, r3
 8004892:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	e008      	b.n	80048ac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a6:	461a      	mov	r2, r3
 80048a8:	2300      	movs	r3, #0
 80048aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b8:	461a      	mov	r2, r3
 80048ba:	2300      	movs	r3, #0
 80048bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ca:	461a      	mov	r2, r3
 80048cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80048d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	3301      	adds	r3, #1
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80048dc:	461a      	mov	r2, r3
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d3b5      	bcc.n	8004850 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	e043      	b.n	8004972 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004900:	d118      	bne.n	8004934 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004914:	461a      	mov	r2, r3
 8004916:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	e013      	b.n	8004946 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800492a:	461a      	mov	r2, r3
 800492c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e008      	b.n	8004946 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004940:	461a      	mov	r2, r3
 8004942:	2300      	movs	r3, #0
 8004944:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004952:	461a      	mov	r2, r3
 8004954:	2300      	movs	r3, #0
 8004956:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004964:	461a      	mov	r2, r3
 8004966:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800496a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	3301      	adds	r3, #1
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004976:	461a      	mov	r2, r3
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4293      	cmp	r3, r2
 800497c:	d3b5      	bcc.n	80048ea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800498c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004990:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800499e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f043 0210 	orr.w	r2, r3, #16
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	4b10      	ldr	r3, [pc, #64]	@ (80049fc <USB_DevInit+0x2b8>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f043 0208 	orr.w	r2, r3, #8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d107      	bne.n	80049ec <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049e4:	f043 0304 	orr.w	r3, r3, #4
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049f8:	b004      	add	sp, #16
 80049fa:	4770      	bx	lr
 80049fc:	803c3800 	.word	0x803c3800

08004a00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3301      	adds	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a1a:	d901      	bls.n	8004a20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e01b      	b.n	8004a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	daf2      	bge.n	8004a0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	019b      	lsls	r3, r3, #6
 8004a30:	f043 0220 	orr.w	r2, r3, #32
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a44:	d901      	bls.n	8004a4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e006      	b.n	8004a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d0f0      	beq.n	8004a38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3301      	adds	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a7c:	d901      	bls.n	8004a82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e018      	b.n	8004ab4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	daf2      	bge.n	8004a70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2210      	movs	r2, #16
 8004a92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3301      	adds	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004aa0:	d901      	bls.n	8004aa6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e006      	b.n	8004ab4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0310 	and.w	r3, r3, #16
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d0f0      	beq.n	8004a94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	68f9      	ldr	r1, [r7, #12]
 8004adc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004b0c:	f023 0303 	bic.w	r3, r3, #3
 8004b10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f003 0301 	and.w	r3, r3, #1
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b68:	d901      	bls.n	8004b6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e01b      	b.n	8004ba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	daf2      	bge.n	8004b5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f043 0201 	orr.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b92:	d901      	bls.n	8004b98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e006      	b.n	8004ba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d0f0      	beq.n	8004b86 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <siprintf>:
 8004bb4:	b40e      	push	{r1, r2, r3}
 8004bb6:	b500      	push	{lr}
 8004bb8:	b09c      	sub	sp, #112	@ 0x70
 8004bba:	ab1d      	add	r3, sp, #116	@ 0x74
 8004bbc:	9002      	str	r0, [sp, #8]
 8004bbe:	9006      	str	r0, [sp, #24]
 8004bc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004bc4:	4809      	ldr	r0, [pc, #36]	@ (8004bec <siprintf+0x38>)
 8004bc6:	9107      	str	r1, [sp, #28]
 8004bc8:	9104      	str	r1, [sp, #16]
 8004bca:	4909      	ldr	r1, [pc, #36]	@ (8004bf0 <siprintf+0x3c>)
 8004bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd0:	9105      	str	r1, [sp, #20]
 8004bd2:	6800      	ldr	r0, [r0, #0]
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	a902      	add	r1, sp, #8
 8004bd8:	f000 f994 	bl	8004f04 <_svfiprintf_r>
 8004bdc:	9b02      	ldr	r3, [sp, #8]
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	b01c      	add	sp, #112	@ 0x70
 8004be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004be8:	b003      	add	sp, #12
 8004bea:	4770      	bx	lr
 8004bec:	2000000c 	.word	0x2000000c
 8004bf0:	ffff0208 	.word	0xffff0208

08004bf4 <memset>:
 8004bf4:	4402      	add	r2, r0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d100      	bne.n	8004bfe <memset+0xa>
 8004bfc:	4770      	bx	lr
 8004bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004c02:	e7f9      	b.n	8004bf8 <memset+0x4>

08004c04 <__errno>:
 8004c04:	4b01      	ldr	r3, [pc, #4]	@ (8004c0c <__errno+0x8>)
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	2000000c 	.word	0x2000000c

08004c10 <__libc_init_array>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4d0d      	ldr	r5, [pc, #52]	@ (8004c48 <__libc_init_array+0x38>)
 8004c14:	4c0d      	ldr	r4, [pc, #52]	@ (8004c4c <__libc_init_array+0x3c>)
 8004c16:	1b64      	subs	r4, r4, r5
 8004c18:	10a4      	asrs	r4, r4, #2
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	42a6      	cmp	r6, r4
 8004c1e:	d109      	bne.n	8004c34 <__libc_init_array+0x24>
 8004c20:	4d0b      	ldr	r5, [pc, #44]	@ (8004c50 <__libc_init_array+0x40>)
 8004c22:	4c0c      	ldr	r4, [pc, #48]	@ (8004c54 <__libc_init_array+0x44>)
 8004c24:	f000 fc66 	bl	80054f4 <_init>
 8004c28:	1b64      	subs	r4, r4, r5
 8004c2a:	10a4      	asrs	r4, r4, #2
 8004c2c:	2600      	movs	r6, #0
 8004c2e:	42a6      	cmp	r6, r4
 8004c30:	d105      	bne.n	8004c3e <__libc_init_array+0x2e>
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c38:	4798      	blx	r3
 8004c3a:	3601      	adds	r6, #1
 8004c3c:	e7ee      	b.n	8004c1c <__libc_init_array+0xc>
 8004c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c42:	4798      	blx	r3
 8004c44:	3601      	adds	r6, #1
 8004c46:	e7f2      	b.n	8004c2e <__libc_init_array+0x1e>
 8004c48:	0804ad1c 	.word	0x0804ad1c
 8004c4c:	0804ad1c 	.word	0x0804ad1c
 8004c50:	0804ad1c 	.word	0x0804ad1c
 8004c54:	0804ad20 	.word	0x0804ad20

08004c58 <__retarget_lock_acquire_recursive>:
 8004c58:	4770      	bx	lr

08004c5a <__retarget_lock_release_recursive>:
 8004c5a:	4770      	bx	lr

08004c5c <_free_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4605      	mov	r5, r0
 8004c60:	2900      	cmp	r1, #0
 8004c62:	d041      	beq.n	8004ce8 <_free_r+0x8c>
 8004c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c68:	1f0c      	subs	r4, r1, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bfb8      	it	lt
 8004c6e:	18e4      	addlt	r4, r4, r3
 8004c70:	f000 f8e0 	bl	8004e34 <__malloc_lock>
 8004c74:	4a1d      	ldr	r2, [pc, #116]	@ (8004cec <_free_r+0x90>)
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	b933      	cbnz	r3, 8004c88 <_free_r+0x2c>
 8004c7a:	6063      	str	r3, [r4, #4]
 8004c7c:	6014      	str	r4, [r2, #0]
 8004c7e:	4628      	mov	r0, r5
 8004c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c84:	f000 b8dc 	b.w	8004e40 <__malloc_unlock>
 8004c88:	42a3      	cmp	r3, r4
 8004c8a:	d908      	bls.n	8004c9e <_free_r+0x42>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	1821      	adds	r1, r4, r0
 8004c90:	428b      	cmp	r3, r1
 8004c92:	bf01      	itttt	eq
 8004c94:	6819      	ldreq	r1, [r3, #0]
 8004c96:	685b      	ldreq	r3, [r3, #4]
 8004c98:	1809      	addeq	r1, r1, r0
 8004c9a:	6021      	streq	r1, [r4, #0]
 8004c9c:	e7ed      	b.n	8004c7a <_free_r+0x1e>
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	b10b      	cbz	r3, 8004ca8 <_free_r+0x4c>
 8004ca4:	42a3      	cmp	r3, r4
 8004ca6:	d9fa      	bls.n	8004c9e <_free_r+0x42>
 8004ca8:	6811      	ldr	r1, [r2, #0]
 8004caa:	1850      	adds	r0, r2, r1
 8004cac:	42a0      	cmp	r0, r4
 8004cae:	d10b      	bne.n	8004cc8 <_free_r+0x6c>
 8004cb0:	6820      	ldr	r0, [r4, #0]
 8004cb2:	4401      	add	r1, r0
 8004cb4:	1850      	adds	r0, r2, r1
 8004cb6:	4283      	cmp	r3, r0
 8004cb8:	6011      	str	r1, [r2, #0]
 8004cba:	d1e0      	bne.n	8004c7e <_free_r+0x22>
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	6053      	str	r3, [r2, #4]
 8004cc2:	4408      	add	r0, r1
 8004cc4:	6010      	str	r0, [r2, #0]
 8004cc6:	e7da      	b.n	8004c7e <_free_r+0x22>
 8004cc8:	d902      	bls.n	8004cd0 <_free_r+0x74>
 8004cca:	230c      	movs	r3, #12
 8004ccc:	602b      	str	r3, [r5, #0]
 8004cce:	e7d6      	b.n	8004c7e <_free_r+0x22>
 8004cd0:	6820      	ldr	r0, [r4, #0]
 8004cd2:	1821      	adds	r1, r4, r0
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	bf04      	itt	eq
 8004cd8:	6819      	ldreq	r1, [r3, #0]
 8004cda:	685b      	ldreq	r3, [r3, #4]
 8004cdc:	6063      	str	r3, [r4, #4]
 8004cde:	bf04      	itt	eq
 8004ce0:	1809      	addeq	r1, r1, r0
 8004ce2:	6021      	streq	r1, [r4, #0]
 8004ce4:	6054      	str	r4, [r2, #4]
 8004ce6:	e7ca      	b.n	8004c7e <_free_r+0x22>
 8004ce8:	bd38      	pop	{r3, r4, r5, pc}
 8004cea:	bf00      	nop
 8004cec:	200007a4 	.word	0x200007a4

08004cf0 <sbrk_aligned>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4e0f      	ldr	r6, [pc, #60]	@ (8004d30 <sbrk_aligned+0x40>)
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	6831      	ldr	r1, [r6, #0]
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	b911      	cbnz	r1, 8004d02 <sbrk_aligned+0x12>
 8004cfc:	f000 fba6 	bl	800544c <_sbrk_r>
 8004d00:	6030      	str	r0, [r6, #0]
 8004d02:	4621      	mov	r1, r4
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 fba1 	bl	800544c <_sbrk_r>
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	d103      	bne.n	8004d16 <sbrk_aligned+0x26>
 8004d0e:	f04f 34ff 	mov.w	r4, #4294967295
 8004d12:	4620      	mov	r0, r4
 8004d14:	bd70      	pop	{r4, r5, r6, pc}
 8004d16:	1cc4      	adds	r4, r0, #3
 8004d18:	f024 0403 	bic.w	r4, r4, #3
 8004d1c:	42a0      	cmp	r0, r4
 8004d1e:	d0f8      	beq.n	8004d12 <sbrk_aligned+0x22>
 8004d20:	1a21      	subs	r1, r4, r0
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 fb92 	bl	800544c <_sbrk_r>
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d1f2      	bne.n	8004d12 <sbrk_aligned+0x22>
 8004d2c:	e7ef      	b.n	8004d0e <sbrk_aligned+0x1e>
 8004d2e:	bf00      	nop
 8004d30:	200007a0 	.word	0x200007a0

08004d34 <_malloc_r>:
 8004d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d38:	1ccd      	adds	r5, r1, #3
 8004d3a:	f025 0503 	bic.w	r5, r5, #3
 8004d3e:	3508      	adds	r5, #8
 8004d40:	2d0c      	cmp	r5, #12
 8004d42:	bf38      	it	cc
 8004d44:	250c      	movcc	r5, #12
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	4606      	mov	r6, r0
 8004d4a:	db01      	blt.n	8004d50 <_malloc_r+0x1c>
 8004d4c:	42a9      	cmp	r1, r5
 8004d4e:	d904      	bls.n	8004d5a <_malloc_r+0x26>
 8004d50:	230c      	movs	r3, #12
 8004d52:	6033      	str	r3, [r6, #0]
 8004d54:	2000      	movs	r0, #0
 8004d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e30 <_malloc_r+0xfc>
 8004d5e:	f000 f869 	bl	8004e34 <__malloc_lock>
 8004d62:	f8d8 3000 	ldr.w	r3, [r8]
 8004d66:	461c      	mov	r4, r3
 8004d68:	bb44      	cbnz	r4, 8004dbc <_malloc_r+0x88>
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f7ff ffbf 	bl	8004cf0 <sbrk_aligned>
 8004d72:	1c43      	adds	r3, r0, #1
 8004d74:	4604      	mov	r4, r0
 8004d76:	d158      	bne.n	8004e2a <_malloc_r+0xf6>
 8004d78:	f8d8 4000 	ldr.w	r4, [r8]
 8004d7c:	4627      	mov	r7, r4
 8004d7e:	2f00      	cmp	r7, #0
 8004d80:	d143      	bne.n	8004e0a <_malloc_r+0xd6>
 8004d82:	2c00      	cmp	r4, #0
 8004d84:	d04b      	beq.n	8004e1e <_malloc_r+0xea>
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	4639      	mov	r1, r7
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	eb04 0903 	add.w	r9, r4, r3
 8004d90:	f000 fb5c 	bl	800544c <_sbrk_r>
 8004d94:	4581      	cmp	r9, r0
 8004d96:	d142      	bne.n	8004e1e <_malloc_r+0xea>
 8004d98:	6821      	ldr	r1, [r4, #0]
 8004d9a:	1a6d      	subs	r5, r5, r1
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	4630      	mov	r0, r6
 8004da0:	f7ff ffa6 	bl	8004cf0 <sbrk_aligned>
 8004da4:	3001      	adds	r0, #1
 8004da6:	d03a      	beq.n	8004e1e <_malloc_r+0xea>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	442b      	add	r3, r5
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	f8d8 3000 	ldr.w	r3, [r8]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	bb62      	cbnz	r2, 8004e10 <_malloc_r+0xdc>
 8004db6:	f8c8 7000 	str.w	r7, [r8]
 8004dba:	e00f      	b.n	8004ddc <_malloc_r+0xa8>
 8004dbc:	6822      	ldr	r2, [r4, #0]
 8004dbe:	1b52      	subs	r2, r2, r5
 8004dc0:	d420      	bmi.n	8004e04 <_malloc_r+0xd0>
 8004dc2:	2a0b      	cmp	r2, #11
 8004dc4:	d917      	bls.n	8004df6 <_malloc_r+0xc2>
 8004dc6:	1961      	adds	r1, r4, r5
 8004dc8:	42a3      	cmp	r3, r4
 8004dca:	6025      	str	r5, [r4, #0]
 8004dcc:	bf18      	it	ne
 8004dce:	6059      	strne	r1, [r3, #4]
 8004dd0:	6863      	ldr	r3, [r4, #4]
 8004dd2:	bf08      	it	eq
 8004dd4:	f8c8 1000 	streq.w	r1, [r8]
 8004dd8:	5162      	str	r2, [r4, r5]
 8004dda:	604b      	str	r3, [r1, #4]
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f000 f82f 	bl	8004e40 <__malloc_unlock>
 8004de2:	f104 000b 	add.w	r0, r4, #11
 8004de6:	1d23      	adds	r3, r4, #4
 8004de8:	f020 0007 	bic.w	r0, r0, #7
 8004dec:	1ac2      	subs	r2, r0, r3
 8004dee:	bf1c      	itt	ne
 8004df0:	1a1b      	subne	r3, r3, r0
 8004df2:	50a3      	strne	r3, [r4, r2]
 8004df4:	e7af      	b.n	8004d56 <_malloc_r+0x22>
 8004df6:	6862      	ldr	r2, [r4, #4]
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	bf0c      	ite	eq
 8004dfc:	f8c8 2000 	streq.w	r2, [r8]
 8004e00:	605a      	strne	r2, [r3, #4]
 8004e02:	e7eb      	b.n	8004ddc <_malloc_r+0xa8>
 8004e04:	4623      	mov	r3, r4
 8004e06:	6864      	ldr	r4, [r4, #4]
 8004e08:	e7ae      	b.n	8004d68 <_malloc_r+0x34>
 8004e0a:	463c      	mov	r4, r7
 8004e0c:	687f      	ldr	r7, [r7, #4]
 8004e0e:	e7b6      	b.n	8004d7e <_malloc_r+0x4a>
 8004e10:	461a      	mov	r2, r3
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	d1fb      	bne.n	8004e10 <_malloc_r+0xdc>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	6053      	str	r3, [r2, #4]
 8004e1c:	e7de      	b.n	8004ddc <_malloc_r+0xa8>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	6033      	str	r3, [r6, #0]
 8004e22:	4630      	mov	r0, r6
 8004e24:	f000 f80c 	bl	8004e40 <__malloc_unlock>
 8004e28:	e794      	b.n	8004d54 <_malloc_r+0x20>
 8004e2a:	6005      	str	r5, [r0, #0]
 8004e2c:	e7d6      	b.n	8004ddc <_malloc_r+0xa8>
 8004e2e:	bf00      	nop
 8004e30:	200007a4 	.word	0x200007a4

08004e34 <__malloc_lock>:
 8004e34:	4801      	ldr	r0, [pc, #4]	@ (8004e3c <__malloc_lock+0x8>)
 8004e36:	f7ff bf0f 	b.w	8004c58 <__retarget_lock_acquire_recursive>
 8004e3a:	bf00      	nop
 8004e3c:	2000079c 	.word	0x2000079c

08004e40 <__malloc_unlock>:
 8004e40:	4801      	ldr	r0, [pc, #4]	@ (8004e48 <__malloc_unlock+0x8>)
 8004e42:	f7ff bf0a 	b.w	8004c5a <__retarget_lock_release_recursive>
 8004e46:	bf00      	nop
 8004e48:	2000079c 	.word	0x2000079c

08004e4c <__ssputs_r>:
 8004e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e50:	688e      	ldr	r6, [r1, #8]
 8004e52:	461f      	mov	r7, r3
 8004e54:	42be      	cmp	r6, r7
 8004e56:	680b      	ldr	r3, [r1, #0]
 8004e58:	4682      	mov	sl, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	4690      	mov	r8, r2
 8004e5e:	d82d      	bhi.n	8004ebc <__ssputs_r+0x70>
 8004e60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e68:	d026      	beq.n	8004eb8 <__ssputs_r+0x6c>
 8004e6a:	6965      	ldr	r5, [r4, #20]
 8004e6c:	6909      	ldr	r1, [r1, #16]
 8004e6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e72:	eba3 0901 	sub.w	r9, r3, r1
 8004e76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e7a:	1c7b      	adds	r3, r7, #1
 8004e7c:	444b      	add	r3, r9
 8004e7e:	106d      	asrs	r5, r5, #1
 8004e80:	429d      	cmp	r5, r3
 8004e82:	bf38      	it	cc
 8004e84:	461d      	movcc	r5, r3
 8004e86:	0553      	lsls	r3, r2, #21
 8004e88:	d527      	bpl.n	8004eda <__ssputs_r+0x8e>
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	f7ff ff52 	bl	8004d34 <_malloc_r>
 8004e90:	4606      	mov	r6, r0
 8004e92:	b360      	cbz	r0, 8004eee <__ssputs_r+0xa2>
 8004e94:	6921      	ldr	r1, [r4, #16]
 8004e96:	464a      	mov	r2, r9
 8004e98:	f000 fae8 	bl	800546c <memcpy>
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	6126      	str	r6, [r4, #16]
 8004eaa:	6165      	str	r5, [r4, #20]
 8004eac:	444e      	add	r6, r9
 8004eae:	eba5 0509 	sub.w	r5, r5, r9
 8004eb2:	6026      	str	r6, [r4, #0]
 8004eb4:	60a5      	str	r5, [r4, #8]
 8004eb6:	463e      	mov	r6, r7
 8004eb8:	42be      	cmp	r6, r7
 8004eba:	d900      	bls.n	8004ebe <__ssputs_r+0x72>
 8004ebc:	463e      	mov	r6, r7
 8004ebe:	6820      	ldr	r0, [r4, #0]
 8004ec0:	4632      	mov	r2, r6
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	f000 faa8 	bl	8005418 <memmove>
 8004ec8:	68a3      	ldr	r3, [r4, #8]
 8004eca:	1b9b      	subs	r3, r3, r6
 8004ecc:	60a3      	str	r3, [r4, #8]
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	4433      	add	r3, r6
 8004ed2:	6023      	str	r3, [r4, #0]
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eda:	462a      	mov	r2, r5
 8004edc:	f000 fad4 	bl	8005488 <_realloc_r>
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d1e0      	bne.n	8004ea8 <__ssputs_r+0x5c>
 8004ee6:	6921      	ldr	r1, [r4, #16]
 8004ee8:	4650      	mov	r0, sl
 8004eea:	f7ff feb7 	bl	8004c5c <_free_r>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	f8ca 3000 	str.w	r3, [sl]
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295
 8004f00:	e7e9      	b.n	8004ed6 <__ssputs_r+0x8a>
	...

08004f04 <_svfiprintf_r>:
 8004f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f08:	4698      	mov	r8, r3
 8004f0a:	898b      	ldrh	r3, [r1, #12]
 8004f0c:	061b      	lsls	r3, r3, #24
 8004f0e:	b09d      	sub	sp, #116	@ 0x74
 8004f10:	4607      	mov	r7, r0
 8004f12:	460d      	mov	r5, r1
 8004f14:	4614      	mov	r4, r2
 8004f16:	d510      	bpl.n	8004f3a <_svfiprintf_r+0x36>
 8004f18:	690b      	ldr	r3, [r1, #16]
 8004f1a:	b973      	cbnz	r3, 8004f3a <_svfiprintf_r+0x36>
 8004f1c:	2140      	movs	r1, #64	@ 0x40
 8004f1e:	f7ff ff09 	bl	8004d34 <_malloc_r>
 8004f22:	6028      	str	r0, [r5, #0]
 8004f24:	6128      	str	r0, [r5, #16]
 8004f26:	b930      	cbnz	r0, 8004f36 <_svfiprintf_r+0x32>
 8004f28:	230c      	movs	r3, #12
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f30:	b01d      	add	sp, #116	@ 0x74
 8004f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f36:	2340      	movs	r3, #64	@ 0x40
 8004f38:	616b      	str	r3, [r5, #20]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f3e:	2320      	movs	r3, #32
 8004f40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f48:	2330      	movs	r3, #48	@ 0x30
 8004f4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050e8 <_svfiprintf_r+0x1e4>
 8004f4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f52:	f04f 0901 	mov.w	r9, #1
 8004f56:	4623      	mov	r3, r4
 8004f58:	469a      	mov	sl, r3
 8004f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f5e:	b10a      	cbz	r2, 8004f64 <_svfiprintf_r+0x60>
 8004f60:	2a25      	cmp	r2, #37	@ 0x25
 8004f62:	d1f9      	bne.n	8004f58 <_svfiprintf_r+0x54>
 8004f64:	ebba 0b04 	subs.w	fp, sl, r4
 8004f68:	d00b      	beq.n	8004f82 <_svfiprintf_r+0x7e>
 8004f6a:	465b      	mov	r3, fp
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	4629      	mov	r1, r5
 8004f70:	4638      	mov	r0, r7
 8004f72:	f7ff ff6b 	bl	8004e4c <__ssputs_r>
 8004f76:	3001      	adds	r0, #1
 8004f78:	f000 80a7 	beq.w	80050ca <_svfiprintf_r+0x1c6>
 8004f7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f7e:	445a      	add	r2, fp
 8004f80:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f82:	f89a 3000 	ldrb.w	r3, [sl]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 809f 	beq.w	80050ca <_svfiprintf_r+0x1c6>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f96:	f10a 0a01 	add.w	sl, sl, #1
 8004f9a:	9304      	str	r3, [sp, #16]
 8004f9c:	9307      	str	r3, [sp, #28]
 8004f9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fa2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fa4:	4654      	mov	r4, sl
 8004fa6:	2205      	movs	r2, #5
 8004fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fac:	484e      	ldr	r0, [pc, #312]	@ (80050e8 <_svfiprintf_r+0x1e4>)
 8004fae:	f7fb f92f 	bl	8000210 <memchr>
 8004fb2:	9a04      	ldr	r2, [sp, #16]
 8004fb4:	b9d8      	cbnz	r0, 8004fee <_svfiprintf_r+0xea>
 8004fb6:	06d0      	lsls	r0, r2, #27
 8004fb8:	bf44      	itt	mi
 8004fba:	2320      	movmi	r3, #32
 8004fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fc0:	0711      	lsls	r1, r2, #28
 8004fc2:	bf44      	itt	mi
 8004fc4:	232b      	movmi	r3, #43	@ 0x2b
 8004fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fca:	f89a 3000 	ldrb.w	r3, [sl]
 8004fce:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fd0:	d015      	beq.n	8004ffe <_svfiprintf_r+0xfa>
 8004fd2:	9a07      	ldr	r2, [sp, #28]
 8004fd4:	4654      	mov	r4, sl
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	f04f 0c0a 	mov.w	ip, #10
 8004fdc:	4621      	mov	r1, r4
 8004fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fe2:	3b30      	subs	r3, #48	@ 0x30
 8004fe4:	2b09      	cmp	r3, #9
 8004fe6:	d94b      	bls.n	8005080 <_svfiprintf_r+0x17c>
 8004fe8:	b1b0      	cbz	r0, 8005018 <_svfiprintf_r+0x114>
 8004fea:	9207      	str	r2, [sp, #28]
 8004fec:	e014      	b.n	8005018 <_svfiprintf_r+0x114>
 8004fee:	eba0 0308 	sub.w	r3, r0, r8
 8004ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	9304      	str	r3, [sp, #16]
 8004ffa:	46a2      	mov	sl, r4
 8004ffc:	e7d2      	b.n	8004fa4 <_svfiprintf_r+0xa0>
 8004ffe:	9b03      	ldr	r3, [sp, #12]
 8005000:	1d19      	adds	r1, r3, #4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	9103      	str	r1, [sp, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	bfbb      	ittet	lt
 800500a:	425b      	neglt	r3, r3
 800500c:	f042 0202 	orrlt.w	r2, r2, #2
 8005010:	9307      	strge	r3, [sp, #28]
 8005012:	9307      	strlt	r3, [sp, #28]
 8005014:	bfb8      	it	lt
 8005016:	9204      	strlt	r2, [sp, #16]
 8005018:	7823      	ldrb	r3, [r4, #0]
 800501a:	2b2e      	cmp	r3, #46	@ 0x2e
 800501c:	d10a      	bne.n	8005034 <_svfiprintf_r+0x130>
 800501e:	7863      	ldrb	r3, [r4, #1]
 8005020:	2b2a      	cmp	r3, #42	@ 0x2a
 8005022:	d132      	bne.n	800508a <_svfiprintf_r+0x186>
 8005024:	9b03      	ldr	r3, [sp, #12]
 8005026:	1d1a      	adds	r2, r3, #4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	9203      	str	r2, [sp, #12]
 800502c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005030:	3402      	adds	r4, #2
 8005032:	9305      	str	r3, [sp, #20]
 8005034:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80050f8 <_svfiprintf_r+0x1f4>
 8005038:	7821      	ldrb	r1, [r4, #0]
 800503a:	2203      	movs	r2, #3
 800503c:	4650      	mov	r0, sl
 800503e:	f7fb f8e7 	bl	8000210 <memchr>
 8005042:	b138      	cbz	r0, 8005054 <_svfiprintf_r+0x150>
 8005044:	9b04      	ldr	r3, [sp, #16]
 8005046:	eba0 000a 	sub.w	r0, r0, sl
 800504a:	2240      	movs	r2, #64	@ 0x40
 800504c:	4082      	lsls	r2, r0
 800504e:	4313      	orrs	r3, r2
 8005050:	3401      	adds	r4, #1
 8005052:	9304      	str	r3, [sp, #16]
 8005054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005058:	4824      	ldr	r0, [pc, #144]	@ (80050ec <_svfiprintf_r+0x1e8>)
 800505a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800505e:	2206      	movs	r2, #6
 8005060:	f7fb f8d6 	bl	8000210 <memchr>
 8005064:	2800      	cmp	r0, #0
 8005066:	d036      	beq.n	80050d6 <_svfiprintf_r+0x1d2>
 8005068:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <_svfiprintf_r+0x1ec>)
 800506a:	bb1b      	cbnz	r3, 80050b4 <_svfiprintf_r+0x1b0>
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	3307      	adds	r3, #7
 8005070:	f023 0307 	bic.w	r3, r3, #7
 8005074:	3308      	adds	r3, #8
 8005076:	9303      	str	r3, [sp, #12]
 8005078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800507a:	4433      	add	r3, r6
 800507c:	9309      	str	r3, [sp, #36]	@ 0x24
 800507e:	e76a      	b.n	8004f56 <_svfiprintf_r+0x52>
 8005080:	fb0c 3202 	mla	r2, ip, r2, r3
 8005084:	460c      	mov	r4, r1
 8005086:	2001      	movs	r0, #1
 8005088:	e7a8      	b.n	8004fdc <_svfiprintf_r+0xd8>
 800508a:	2300      	movs	r3, #0
 800508c:	3401      	adds	r4, #1
 800508e:	9305      	str	r3, [sp, #20]
 8005090:	4619      	mov	r1, r3
 8005092:	f04f 0c0a 	mov.w	ip, #10
 8005096:	4620      	mov	r0, r4
 8005098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800509c:	3a30      	subs	r2, #48	@ 0x30
 800509e:	2a09      	cmp	r2, #9
 80050a0:	d903      	bls.n	80050aa <_svfiprintf_r+0x1a6>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0c6      	beq.n	8005034 <_svfiprintf_r+0x130>
 80050a6:	9105      	str	r1, [sp, #20]
 80050a8:	e7c4      	b.n	8005034 <_svfiprintf_r+0x130>
 80050aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ae:	4604      	mov	r4, r0
 80050b0:	2301      	movs	r3, #1
 80050b2:	e7f0      	b.n	8005096 <_svfiprintf_r+0x192>
 80050b4:	ab03      	add	r3, sp, #12
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	462a      	mov	r2, r5
 80050ba:	4b0e      	ldr	r3, [pc, #56]	@ (80050f4 <_svfiprintf_r+0x1f0>)
 80050bc:	a904      	add	r1, sp, #16
 80050be:	4638      	mov	r0, r7
 80050c0:	f3af 8000 	nop.w
 80050c4:	1c42      	adds	r2, r0, #1
 80050c6:	4606      	mov	r6, r0
 80050c8:	d1d6      	bne.n	8005078 <_svfiprintf_r+0x174>
 80050ca:	89ab      	ldrh	r3, [r5, #12]
 80050cc:	065b      	lsls	r3, r3, #25
 80050ce:	f53f af2d 	bmi.w	8004f2c <_svfiprintf_r+0x28>
 80050d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050d4:	e72c      	b.n	8004f30 <_svfiprintf_r+0x2c>
 80050d6:	ab03      	add	r3, sp, #12
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	462a      	mov	r2, r5
 80050dc:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <_svfiprintf_r+0x1f0>)
 80050de:	a904      	add	r1, sp, #16
 80050e0:	4638      	mov	r0, r7
 80050e2:	f000 f879 	bl	80051d8 <_printf_i>
 80050e6:	e7ed      	b.n	80050c4 <_svfiprintf_r+0x1c0>
 80050e8:	0804ace0 	.word	0x0804ace0
 80050ec:	0804acea 	.word	0x0804acea
 80050f0:	00000000 	.word	0x00000000
 80050f4:	08004e4d 	.word	0x08004e4d
 80050f8:	0804ace6 	.word	0x0804ace6

080050fc <_printf_common>:
 80050fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	4616      	mov	r6, r2
 8005102:	4698      	mov	r8, r3
 8005104:	688a      	ldr	r2, [r1, #8]
 8005106:	690b      	ldr	r3, [r1, #16]
 8005108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800510c:	4293      	cmp	r3, r2
 800510e:	bfb8      	it	lt
 8005110:	4613      	movlt	r3, r2
 8005112:	6033      	str	r3, [r6, #0]
 8005114:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005118:	4607      	mov	r7, r0
 800511a:	460c      	mov	r4, r1
 800511c:	b10a      	cbz	r2, 8005122 <_printf_common+0x26>
 800511e:	3301      	adds	r3, #1
 8005120:	6033      	str	r3, [r6, #0]
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	0699      	lsls	r1, r3, #26
 8005126:	bf42      	ittt	mi
 8005128:	6833      	ldrmi	r3, [r6, #0]
 800512a:	3302      	addmi	r3, #2
 800512c:	6033      	strmi	r3, [r6, #0]
 800512e:	6825      	ldr	r5, [r4, #0]
 8005130:	f015 0506 	ands.w	r5, r5, #6
 8005134:	d106      	bne.n	8005144 <_printf_common+0x48>
 8005136:	f104 0a19 	add.w	sl, r4, #25
 800513a:	68e3      	ldr	r3, [r4, #12]
 800513c:	6832      	ldr	r2, [r6, #0]
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	42ab      	cmp	r3, r5
 8005142:	dc26      	bgt.n	8005192 <_printf_common+0x96>
 8005144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	3b00      	subs	r3, #0
 800514c:	bf18      	it	ne
 800514e:	2301      	movne	r3, #1
 8005150:	0692      	lsls	r2, r2, #26
 8005152:	d42b      	bmi.n	80051ac <_printf_common+0xb0>
 8005154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005158:	4641      	mov	r1, r8
 800515a:	4638      	mov	r0, r7
 800515c:	47c8      	blx	r9
 800515e:	3001      	adds	r0, #1
 8005160:	d01e      	beq.n	80051a0 <_printf_common+0xa4>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	6922      	ldr	r2, [r4, #16]
 8005166:	f003 0306 	and.w	r3, r3, #6
 800516a:	2b04      	cmp	r3, #4
 800516c:	bf02      	ittt	eq
 800516e:	68e5      	ldreq	r5, [r4, #12]
 8005170:	6833      	ldreq	r3, [r6, #0]
 8005172:	1aed      	subeq	r5, r5, r3
 8005174:	68a3      	ldr	r3, [r4, #8]
 8005176:	bf0c      	ite	eq
 8005178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800517c:	2500      	movne	r5, #0
 800517e:	4293      	cmp	r3, r2
 8005180:	bfc4      	itt	gt
 8005182:	1a9b      	subgt	r3, r3, r2
 8005184:	18ed      	addgt	r5, r5, r3
 8005186:	2600      	movs	r6, #0
 8005188:	341a      	adds	r4, #26
 800518a:	42b5      	cmp	r5, r6
 800518c:	d11a      	bne.n	80051c4 <_printf_common+0xc8>
 800518e:	2000      	movs	r0, #0
 8005190:	e008      	b.n	80051a4 <_printf_common+0xa8>
 8005192:	2301      	movs	r3, #1
 8005194:	4652      	mov	r2, sl
 8005196:	4641      	mov	r1, r8
 8005198:	4638      	mov	r0, r7
 800519a:	47c8      	blx	r9
 800519c:	3001      	adds	r0, #1
 800519e:	d103      	bne.n	80051a8 <_printf_common+0xac>
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a8:	3501      	adds	r5, #1
 80051aa:	e7c6      	b.n	800513a <_printf_common+0x3e>
 80051ac:	18e1      	adds	r1, r4, r3
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	2030      	movs	r0, #48	@ 0x30
 80051b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051b6:	4422      	add	r2, r4
 80051b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051c0:	3302      	adds	r3, #2
 80051c2:	e7c7      	b.n	8005154 <_printf_common+0x58>
 80051c4:	2301      	movs	r3, #1
 80051c6:	4622      	mov	r2, r4
 80051c8:	4641      	mov	r1, r8
 80051ca:	4638      	mov	r0, r7
 80051cc:	47c8      	blx	r9
 80051ce:	3001      	adds	r0, #1
 80051d0:	d0e6      	beq.n	80051a0 <_printf_common+0xa4>
 80051d2:	3601      	adds	r6, #1
 80051d4:	e7d9      	b.n	800518a <_printf_common+0x8e>
	...

080051d8 <_printf_i>:
 80051d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051dc:	7e0f      	ldrb	r7, [r1, #24]
 80051de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051e0:	2f78      	cmp	r7, #120	@ 0x78
 80051e2:	4691      	mov	r9, r2
 80051e4:	4680      	mov	r8, r0
 80051e6:	460c      	mov	r4, r1
 80051e8:	469a      	mov	sl, r3
 80051ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051ee:	d807      	bhi.n	8005200 <_printf_i+0x28>
 80051f0:	2f62      	cmp	r7, #98	@ 0x62
 80051f2:	d80a      	bhi.n	800520a <_printf_i+0x32>
 80051f4:	2f00      	cmp	r7, #0
 80051f6:	f000 80d2 	beq.w	800539e <_printf_i+0x1c6>
 80051fa:	2f58      	cmp	r7, #88	@ 0x58
 80051fc:	f000 80b9 	beq.w	8005372 <_printf_i+0x19a>
 8005200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005208:	e03a      	b.n	8005280 <_printf_i+0xa8>
 800520a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800520e:	2b15      	cmp	r3, #21
 8005210:	d8f6      	bhi.n	8005200 <_printf_i+0x28>
 8005212:	a101      	add	r1, pc, #4	@ (adr r1, 8005218 <_printf_i+0x40>)
 8005214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005218:	08005271 	.word	0x08005271
 800521c:	08005285 	.word	0x08005285
 8005220:	08005201 	.word	0x08005201
 8005224:	08005201 	.word	0x08005201
 8005228:	08005201 	.word	0x08005201
 800522c:	08005201 	.word	0x08005201
 8005230:	08005285 	.word	0x08005285
 8005234:	08005201 	.word	0x08005201
 8005238:	08005201 	.word	0x08005201
 800523c:	08005201 	.word	0x08005201
 8005240:	08005201 	.word	0x08005201
 8005244:	08005385 	.word	0x08005385
 8005248:	080052af 	.word	0x080052af
 800524c:	0800533f 	.word	0x0800533f
 8005250:	08005201 	.word	0x08005201
 8005254:	08005201 	.word	0x08005201
 8005258:	080053a7 	.word	0x080053a7
 800525c:	08005201 	.word	0x08005201
 8005260:	080052af 	.word	0x080052af
 8005264:	08005201 	.word	0x08005201
 8005268:	08005201 	.word	0x08005201
 800526c:	08005347 	.word	0x08005347
 8005270:	6833      	ldr	r3, [r6, #0]
 8005272:	1d1a      	adds	r2, r3, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6032      	str	r2, [r6, #0]
 8005278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800527c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005280:	2301      	movs	r3, #1
 8005282:	e09d      	b.n	80053c0 <_printf_i+0x1e8>
 8005284:	6833      	ldr	r3, [r6, #0]
 8005286:	6820      	ldr	r0, [r4, #0]
 8005288:	1d19      	adds	r1, r3, #4
 800528a:	6031      	str	r1, [r6, #0]
 800528c:	0606      	lsls	r6, r0, #24
 800528e:	d501      	bpl.n	8005294 <_printf_i+0xbc>
 8005290:	681d      	ldr	r5, [r3, #0]
 8005292:	e003      	b.n	800529c <_printf_i+0xc4>
 8005294:	0645      	lsls	r5, r0, #25
 8005296:	d5fb      	bpl.n	8005290 <_printf_i+0xb8>
 8005298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800529c:	2d00      	cmp	r5, #0
 800529e:	da03      	bge.n	80052a8 <_printf_i+0xd0>
 80052a0:	232d      	movs	r3, #45	@ 0x2d
 80052a2:	426d      	negs	r5, r5
 80052a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052a8:	4859      	ldr	r0, [pc, #356]	@ (8005410 <_printf_i+0x238>)
 80052aa:	230a      	movs	r3, #10
 80052ac:	e011      	b.n	80052d2 <_printf_i+0xfa>
 80052ae:	6821      	ldr	r1, [r4, #0]
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	0608      	lsls	r0, r1, #24
 80052b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80052b8:	d402      	bmi.n	80052c0 <_printf_i+0xe8>
 80052ba:	0649      	lsls	r1, r1, #25
 80052bc:	bf48      	it	mi
 80052be:	b2ad      	uxthmi	r5, r5
 80052c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80052c2:	4853      	ldr	r0, [pc, #332]	@ (8005410 <_printf_i+0x238>)
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	bf14      	ite	ne
 80052c8:	230a      	movne	r3, #10
 80052ca:	2308      	moveq	r3, #8
 80052cc:	2100      	movs	r1, #0
 80052ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052d2:	6866      	ldr	r6, [r4, #4]
 80052d4:	60a6      	str	r6, [r4, #8]
 80052d6:	2e00      	cmp	r6, #0
 80052d8:	bfa2      	ittt	ge
 80052da:	6821      	ldrge	r1, [r4, #0]
 80052dc:	f021 0104 	bicge.w	r1, r1, #4
 80052e0:	6021      	strge	r1, [r4, #0]
 80052e2:	b90d      	cbnz	r5, 80052e8 <_printf_i+0x110>
 80052e4:	2e00      	cmp	r6, #0
 80052e6:	d04b      	beq.n	8005380 <_printf_i+0x1a8>
 80052e8:	4616      	mov	r6, r2
 80052ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80052ee:	fb03 5711 	mls	r7, r3, r1, r5
 80052f2:	5dc7      	ldrb	r7, [r0, r7]
 80052f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052f8:	462f      	mov	r7, r5
 80052fa:	42bb      	cmp	r3, r7
 80052fc:	460d      	mov	r5, r1
 80052fe:	d9f4      	bls.n	80052ea <_printf_i+0x112>
 8005300:	2b08      	cmp	r3, #8
 8005302:	d10b      	bne.n	800531c <_printf_i+0x144>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	07df      	lsls	r7, r3, #31
 8005308:	d508      	bpl.n	800531c <_printf_i+0x144>
 800530a:	6923      	ldr	r3, [r4, #16]
 800530c:	6861      	ldr	r1, [r4, #4]
 800530e:	4299      	cmp	r1, r3
 8005310:	bfde      	ittt	le
 8005312:	2330      	movle	r3, #48	@ 0x30
 8005314:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005318:	f106 36ff 	addle.w	r6, r6, #4294967295
 800531c:	1b92      	subs	r2, r2, r6
 800531e:	6122      	str	r2, [r4, #16]
 8005320:	f8cd a000 	str.w	sl, [sp]
 8005324:	464b      	mov	r3, r9
 8005326:	aa03      	add	r2, sp, #12
 8005328:	4621      	mov	r1, r4
 800532a:	4640      	mov	r0, r8
 800532c:	f7ff fee6 	bl	80050fc <_printf_common>
 8005330:	3001      	adds	r0, #1
 8005332:	d14a      	bne.n	80053ca <_printf_i+0x1f2>
 8005334:	f04f 30ff 	mov.w	r0, #4294967295
 8005338:	b004      	add	sp, #16
 800533a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	f043 0320 	orr.w	r3, r3, #32
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	4833      	ldr	r0, [pc, #204]	@ (8005414 <_printf_i+0x23c>)
 8005348:	2778      	movs	r7, #120	@ 0x78
 800534a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	6831      	ldr	r1, [r6, #0]
 8005352:	061f      	lsls	r7, r3, #24
 8005354:	f851 5b04 	ldr.w	r5, [r1], #4
 8005358:	d402      	bmi.n	8005360 <_printf_i+0x188>
 800535a:	065f      	lsls	r7, r3, #25
 800535c:	bf48      	it	mi
 800535e:	b2ad      	uxthmi	r5, r5
 8005360:	6031      	str	r1, [r6, #0]
 8005362:	07d9      	lsls	r1, r3, #31
 8005364:	bf44      	itt	mi
 8005366:	f043 0320 	orrmi.w	r3, r3, #32
 800536a:	6023      	strmi	r3, [r4, #0]
 800536c:	b11d      	cbz	r5, 8005376 <_printf_i+0x19e>
 800536e:	2310      	movs	r3, #16
 8005370:	e7ac      	b.n	80052cc <_printf_i+0xf4>
 8005372:	4827      	ldr	r0, [pc, #156]	@ (8005410 <_printf_i+0x238>)
 8005374:	e7e9      	b.n	800534a <_printf_i+0x172>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	f023 0320 	bic.w	r3, r3, #32
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	e7f6      	b.n	800536e <_printf_i+0x196>
 8005380:	4616      	mov	r6, r2
 8005382:	e7bd      	b.n	8005300 <_printf_i+0x128>
 8005384:	6833      	ldr	r3, [r6, #0]
 8005386:	6825      	ldr	r5, [r4, #0]
 8005388:	6961      	ldr	r1, [r4, #20]
 800538a:	1d18      	adds	r0, r3, #4
 800538c:	6030      	str	r0, [r6, #0]
 800538e:	062e      	lsls	r6, r5, #24
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	d501      	bpl.n	8005398 <_printf_i+0x1c0>
 8005394:	6019      	str	r1, [r3, #0]
 8005396:	e002      	b.n	800539e <_printf_i+0x1c6>
 8005398:	0668      	lsls	r0, r5, #25
 800539a:	d5fb      	bpl.n	8005394 <_printf_i+0x1bc>
 800539c:	8019      	strh	r1, [r3, #0]
 800539e:	2300      	movs	r3, #0
 80053a0:	6123      	str	r3, [r4, #16]
 80053a2:	4616      	mov	r6, r2
 80053a4:	e7bc      	b.n	8005320 <_printf_i+0x148>
 80053a6:	6833      	ldr	r3, [r6, #0]
 80053a8:	1d1a      	adds	r2, r3, #4
 80053aa:	6032      	str	r2, [r6, #0]
 80053ac:	681e      	ldr	r6, [r3, #0]
 80053ae:	6862      	ldr	r2, [r4, #4]
 80053b0:	2100      	movs	r1, #0
 80053b2:	4630      	mov	r0, r6
 80053b4:	f7fa ff2c 	bl	8000210 <memchr>
 80053b8:	b108      	cbz	r0, 80053be <_printf_i+0x1e6>
 80053ba:	1b80      	subs	r0, r0, r6
 80053bc:	6060      	str	r0, [r4, #4]
 80053be:	6863      	ldr	r3, [r4, #4]
 80053c0:	6123      	str	r3, [r4, #16]
 80053c2:	2300      	movs	r3, #0
 80053c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053c8:	e7aa      	b.n	8005320 <_printf_i+0x148>
 80053ca:	6923      	ldr	r3, [r4, #16]
 80053cc:	4632      	mov	r2, r6
 80053ce:	4649      	mov	r1, r9
 80053d0:	4640      	mov	r0, r8
 80053d2:	47d0      	blx	sl
 80053d4:	3001      	adds	r0, #1
 80053d6:	d0ad      	beq.n	8005334 <_printf_i+0x15c>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	079b      	lsls	r3, r3, #30
 80053dc:	d413      	bmi.n	8005406 <_printf_i+0x22e>
 80053de:	68e0      	ldr	r0, [r4, #12]
 80053e0:	9b03      	ldr	r3, [sp, #12]
 80053e2:	4298      	cmp	r0, r3
 80053e4:	bfb8      	it	lt
 80053e6:	4618      	movlt	r0, r3
 80053e8:	e7a6      	b.n	8005338 <_printf_i+0x160>
 80053ea:	2301      	movs	r3, #1
 80053ec:	4632      	mov	r2, r6
 80053ee:	4649      	mov	r1, r9
 80053f0:	4640      	mov	r0, r8
 80053f2:	47d0      	blx	sl
 80053f4:	3001      	adds	r0, #1
 80053f6:	d09d      	beq.n	8005334 <_printf_i+0x15c>
 80053f8:	3501      	adds	r5, #1
 80053fa:	68e3      	ldr	r3, [r4, #12]
 80053fc:	9903      	ldr	r1, [sp, #12]
 80053fe:	1a5b      	subs	r3, r3, r1
 8005400:	42ab      	cmp	r3, r5
 8005402:	dcf2      	bgt.n	80053ea <_printf_i+0x212>
 8005404:	e7eb      	b.n	80053de <_printf_i+0x206>
 8005406:	2500      	movs	r5, #0
 8005408:	f104 0619 	add.w	r6, r4, #25
 800540c:	e7f5      	b.n	80053fa <_printf_i+0x222>
 800540e:	bf00      	nop
 8005410:	0804acf1 	.word	0x0804acf1
 8005414:	0804ad02 	.word	0x0804ad02

08005418 <memmove>:
 8005418:	4288      	cmp	r0, r1
 800541a:	b510      	push	{r4, lr}
 800541c:	eb01 0402 	add.w	r4, r1, r2
 8005420:	d902      	bls.n	8005428 <memmove+0x10>
 8005422:	4284      	cmp	r4, r0
 8005424:	4623      	mov	r3, r4
 8005426:	d807      	bhi.n	8005438 <memmove+0x20>
 8005428:	1e43      	subs	r3, r0, #1
 800542a:	42a1      	cmp	r1, r4
 800542c:	d008      	beq.n	8005440 <memmove+0x28>
 800542e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005432:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005436:	e7f8      	b.n	800542a <memmove+0x12>
 8005438:	4402      	add	r2, r0
 800543a:	4601      	mov	r1, r0
 800543c:	428a      	cmp	r2, r1
 800543e:	d100      	bne.n	8005442 <memmove+0x2a>
 8005440:	bd10      	pop	{r4, pc}
 8005442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800544a:	e7f7      	b.n	800543c <memmove+0x24>

0800544c <_sbrk_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d06      	ldr	r5, [pc, #24]	@ (8005468 <_sbrk_r+0x1c>)
 8005450:	2300      	movs	r3, #0
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	602b      	str	r3, [r5, #0]
 8005458:	f7fb ffaa 	bl	80013b0 <_sbrk>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_sbrk_r+0x1a>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b103      	cbz	r3, 8005466 <_sbrk_r+0x1a>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	20000798 	.word	0x20000798

0800546c <memcpy>:
 800546c:	440a      	add	r2, r1
 800546e:	4291      	cmp	r1, r2
 8005470:	f100 33ff 	add.w	r3, r0, #4294967295
 8005474:	d100      	bne.n	8005478 <memcpy+0xc>
 8005476:	4770      	bx	lr
 8005478:	b510      	push	{r4, lr}
 800547a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800547e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005482:	4291      	cmp	r1, r2
 8005484:	d1f9      	bne.n	800547a <memcpy+0xe>
 8005486:	bd10      	pop	{r4, pc}

08005488 <_realloc_r>:
 8005488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548c:	4680      	mov	r8, r0
 800548e:	4615      	mov	r5, r2
 8005490:	460c      	mov	r4, r1
 8005492:	b921      	cbnz	r1, 800549e <_realloc_r+0x16>
 8005494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005498:	4611      	mov	r1, r2
 800549a:	f7ff bc4b 	b.w	8004d34 <_malloc_r>
 800549e:	b92a      	cbnz	r2, 80054ac <_realloc_r+0x24>
 80054a0:	f7ff fbdc 	bl	8004c5c <_free_r>
 80054a4:	2400      	movs	r4, #0
 80054a6:	4620      	mov	r0, r4
 80054a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ac:	f000 f81a 	bl	80054e4 <_malloc_usable_size_r>
 80054b0:	4285      	cmp	r5, r0
 80054b2:	4606      	mov	r6, r0
 80054b4:	d802      	bhi.n	80054bc <_realloc_r+0x34>
 80054b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80054ba:	d8f4      	bhi.n	80054a6 <_realloc_r+0x1e>
 80054bc:	4629      	mov	r1, r5
 80054be:	4640      	mov	r0, r8
 80054c0:	f7ff fc38 	bl	8004d34 <_malloc_r>
 80054c4:	4607      	mov	r7, r0
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d0ec      	beq.n	80054a4 <_realloc_r+0x1c>
 80054ca:	42b5      	cmp	r5, r6
 80054cc:	462a      	mov	r2, r5
 80054ce:	4621      	mov	r1, r4
 80054d0:	bf28      	it	cs
 80054d2:	4632      	movcs	r2, r6
 80054d4:	f7ff ffca 	bl	800546c <memcpy>
 80054d8:	4621      	mov	r1, r4
 80054da:	4640      	mov	r0, r8
 80054dc:	f7ff fbbe 	bl	8004c5c <_free_r>
 80054e0:	463c      	mov	r4, r7
 80054e2:	e7e0      	b.n	80054a6 <_realloc_r+0x1e>

080054e4 <_malloc_usable_size_r>:
 80054e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e8:	1f18      	subs	r0, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bfbc      	itt	lt
 80054ee:	580b      	ldrlt	r3, [r1, r0]
 80054f0:	18c0      	addlt	r0, r0, r3
 80054f2:	4770      	bx	lr

080054f4 <_init>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	bf00      	nop
 80054f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fa:	bc08      	pop	{r3}
 80054fc:	469e      	mov	lr, r3
 80054fe:	4770      	bx	lr

08005500 <_fini>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr
