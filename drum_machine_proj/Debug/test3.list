
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e2e8  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023058  08023058  0004005c  2**0
                  CONTENTS
  4 .ARM          00000008  08023058  08023058  00033058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023060  08023060  0004005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023060  08023060  00033060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023064  08023064  00033064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08023068  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  2000005c  080230c4  0004005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  080230c4  00040758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0004008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000120ae  00000000  00000000  000400cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002698  00000000  00000000  0005217d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001038  00000000  00000000  00054818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca7  00000000  00000000  00055850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d2d  00000000  00000000  000564f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013633  00000000  00000000  00079224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4af3  00000000  00000000  0008c857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a98  00000000  00000000  0016134c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00165de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004d58 	.word	0x08004d58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004d58 	.word	0x08004d58

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <play_sound>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void play_sound(int totalSamples, const int16_t sound[]) {
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	int currentSampleIndex = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
	while (currentSampleIndex < totalSamples)
 80005ba:	e02c      	b.n	8000616 <play_sound+0x6a>
	  {
		  sample = sound[currentSampleIndex]; // Get the current sample
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <play_sound+0x80>)
 80005cc:	601a      	str	r2, [r3, #0]

		  sample += 32768; // Convert to unsigned by adding DC offset for DAC
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <play_sound+0x80>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <play_sound+0x80>)
 80005d8:	6013      	str	r3, [r2, #0]
		  if (sample < -32768)
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <play_sound+0x80>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80005e2:	da03      	bge.n	80005ec <play_sound+0x40>
			  sample = -32768;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <play_sound+0x80>)
 80005e6:	4a12      	ldr	r2, [pc, #72]	; (8000630 <play_sound+0x84>)
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e008      	b.n	80005fe <play_sound+0x52>
		  else if (sample > 32767)
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <play_sound+0x80>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005f4:	db03      	blt.n	80005fe <play_sound+0x52>
			sample = 32767;
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <play_sound+0x80>)
 80005f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80005fc:	601a      	str	r2, [r3, #0]

		  currentSampleIndex++; // Move to the next sample
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	3301      	adds	r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
		  while(timer_called == 0) {
 8000604:	e000      	b.n	8000608 <play_sound+0x5c>
			continue;
 8000606:	bf00      	nop
		  while(timer_called == 0) {
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <play_sound+0x88>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0fa      	beq.n	8000606 <play_sound+0x5a>
		  }
		  timer_called = 0;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <play_sound+0x88>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
	while (currentSampleIndex < totalSamples)
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	429a      	cmp	r2, r3
 800061c:	dbce      	blt.n	80005bc <play_sound+0x10>
	  }
	// File done playing, reset current index
}
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	20000604 	.word	0x20000604
 8000630:	ffff8000 	.word	0xffff8000
 8000634:	20000600 	.word	0x20000600

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b092      	sub	sp, #72	; 0x48
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char uart_buf[50];
  int uart_buf_len;
  uint8_t B10 = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  uint8_t B20 = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  uint8_t B30 = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  int b10_pressed = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  int b20_pressed = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  int b30_pressed = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fca6 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f888 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f9c2 	bl	80009ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000668:	f000 f968 	bl	800093c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800066c:	f000 f990 	bl	8000990 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000670:	f000 f8ec 	bl	800084c <MX_DAC_Init>
  MX_TIM4_Init();
 8000674:	f000 f914 	bl	80008a0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uart_buf_len = sprintf(uart_buf, "Initialization complete.\r\n");
 8000678:	463b      	mov	r3, r7
 800067a:	4934      	ldr	r1, [pc, #208]	; (800074c <main+0x114>)
 800067c:	4618      	mov	r0, r3
 800067e:	f003 fec7 	bl	8004410 <siprintf>
 8000682:	6378      	str	r0, [r7, #52]	; 0x34
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000686:	b29a      	uxth	r2, r3
 8000688:	4639      	mov	r1, r7
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	4830      	ldr	r0, [pc, #192]	; (8000750 <main+0x118>)
 800068e:	f003 f809 	bl	80036a4 <HAL_UART_Transmit>
  timer_called = 0;
 8000692:	4b30      	ldr	r3, [pc, #192]	; (8000754 <main+0x11c>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000698:	2100      	movs	r1, #0
 800069a:	482f      	ldr	r0, [pc, #188]	; (8000758 <main+0x120>)
 800069c:	f000 fe4f 	bl	800133e <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80006a0:	482e      	ldr	r0, [pc, #184]	; (800075c <main+0x124>)
 80006a2:	f002 fb89 	bl	8002db8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	B10 = HAL_GPIO_ReadPin(B10_GPIO_Port, B10_Pin);
 80006a6:	2108      	movs	r1, #8
 80006a8:	482d      	ldr	r0, [pc, #180]	; (8000760 <main+0x128>)
 80006aa:	f001 f8b7 	bl	800181c <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	B20 = HAL_GPIO_ReadPin(B20_GPIO_Port, B20_Pin);
 80006b4:	2101      	movs	r1, #1
 80006b6:	482b      	ldr	r0, [pc, #172]	; (8000764 <main+0x12c>)
 80006b8:	f001 f8b0 	bl	800181c <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	B30 = HAL_GPIO_ReadPin(B30_GPIO_Port, B30_Pin);
 80006c2:	2108      	movs	r1, #8
 80006c4:	4827      	ldr	r0, [pc, #156]	; (8000764 <main+0x12c>)
 80006c6:	f001 f8a9 	bl	800181c <HAL_GPIO_ReadPin>
 80006ca:	4603      	mov	r3, r0
 80006cc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

	if(B10 == 0) {
 80006d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d101      	bne.n	80006dc <main+0xa4>
		b10_pressed = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if(B20 == 0) {
 80006dc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d101      	bne.n	80006e8 <main+0xb0>
		b20_pressed = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
	}
	if(B30 == 0) {
 80006e8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <main+0xbc>
		b30_pressed = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}


	 if(B10 == 1 && b10_pressed == 0) {
 80006f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d109      	bne.n	8000710 <main+0xd8>
 80006fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d106      	bne.n	8000710 <main+0xd8>

		 b10_pressed = 1;
 8000702:	2301      	movs	r3, #1
 8000704:	647b      	str	r3, [r7, #68]	; 0x44
		 play_sound(sizeof(crash)/sizeof(int16_t), crash);
 8000706:	4918      	ldr	r1, [pc, #96]	; (8000768 <main+0x130>)
 8000708:	f649 308c 	movw	r0, #39820	; 0x9b8c
 800070c:	f7ff ff4e 	bl	80005ac <play_sound>

	 }

	 if(B20 == 1 && b20_pressed == 0) {
 8000710:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000714:	2b01      	cmp	r3, #1
 8000716:	d109      	bne.n	800072c <main+0xf4>
 8000718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800071a:	2b00      	cmp	r3, #0
 800071c:	d106      	bne.n	800072c <main+0xf4>

		 b20_pressed = 1;
 800071e:	2301      	movs	r3, #1
 8000720:	643b      	str	r3, [r7, #64]	; 0x40
		 play_sound(sizeof(kick)/sizeof(int16_t), kick);
 8000722:	4912      	ldr	r1, [pc, #72]	; (800076c <main+0x134>)
 8000724:	f44f 5061 	mov.w	r0, #14400	; 0x3840
 8000728:	f7ff ff40 	bl	80005ac <play_sound>

	 }

	 if(B30 == 1 && b30_pressed == 0) {
 800072c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000730:	2b01      	cmp	r3, #1
 8000732:	d1b8      	bne.n	80006a6 <main+0x6e>
 8000734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1b5      	bne.n	80006a6 <main+0x6e>

		 b30_pressed = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	63fb      	str	r3, [r7, #60]	; 0x3c
		 play_sound(sizeof(snare)/sizeof(int16_t), snare);
 800073e:	490c      	ldr	r1, [pc, #48]	; (8000770 <main+0x138>)
 8000740:	f641 5074 	movw	r0, #7540	; 0x1d74
 8000744:	f7ff ff32 	bl	80005ac <play_sound>
	B10 = HAL_GPIO_ReadPin(B10_GPIO_Port, B10_Pin);
 8000748:	e7ad      	b.n	80006a6 <main+0x6e>
 800074a:	bf00      	nop
 800074c:	08004d70 	.word	0x08004d70
 8000750:	200000d4 	.word	0x200000d4
 8000754:	20000600 	.word	0x20000600
 8000758:	20000078 	.word	0x20000078
 800075c:	2000008c 	.word	0x2000008c
 8000760:	40020000 	.word	0x40020000
 8000764:	40020800 	.word	0x40020800
 8000768:	08004d8c 	.word	0x08004d8c
 800076c:	080184a4 	.word	0x080184a4
 8000770:	0801f524 	.word	0x0801f524

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	; 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2234      	movs	r2, #52	; 0x34
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f003 fe64 	bl	8004450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <SystemClock_Config+0xd0>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	4a28      	ldr	r2, [pc, #160]	; (8000844 <SystemClock_Config+0xd0>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <SystemClock_Config+0xd0>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	4b23      	ldr	r3, [pc, #140]	; (8000848 <SystemClock_Config+0xd4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a22      	ldr	r2, [pc, #136]	; (8000848 <SystemClock_Config+0xd4>)
 80007be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <SystemClock_Config+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007e8:	23a8      	movs	r3, #168	; 0xa8
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007f0:	2307      	movs	r3, #7
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 ffed 	bl	80027dc <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000808:	f000 f9d8 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000818:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800081c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000822:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2105      	movs	r1, #5
 800082a:	4618      	mov	r0, r3
 800082c:	f001 f962 	bl	8001af4 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000836:	f000 f9c1 	bl	8000bbc <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	; 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_DAC_Init+0x4c>)
 800085c:	4a0f      	ldr	r2, [pc, #60]	; (800089c <MX_DAC_Init+0x50>)
 800085e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_DAC_Init+0x4c>)
 8000862:	f000 fd4a 	bl	80012fa <HAL_DAC_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800086c:	f000 f9a6 	bl	8000bbc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000870:	232c      	movs	r3, #44	; 0x2c
 8000872:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	4619      	mov	r1, r3
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <MX_DAC_Init+0x4c>)
 8000880:	f000 fdde 	bl	8001440 <HAL_DAC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800088a:	f000 f997 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000078 	.word	0x20000078
 800089c:	40007400 	.word	0x40007400

080008a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_TIM4_Init+0x94>)
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <MX_TIM4_Init+0x98>)
 80008c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_TIM4_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_TIM4_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3809;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_TIM4_Init+0x94>)
 80008d0:	f640 62e1 	movw	r2, #3809	; 0xee1
 80008d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_TIM4_Init+0x94>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_TIM4_Init+0x94>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008e2:	4814      	ldr	r0, [pc, #80]	; (8000934 <MX_TIM4_Init+0x94>)
 80008e4:	f002 fa18 	bl	8002d18 <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80008ee:	f000 f965 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	4619      	mov	r1, r3
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_TIM4_Init+0x94>)
 8000900:	f002 fbba 	bl	8003078 <HAL_TIM_ConfigClockSource>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f957 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800090e:	2320      	movs	r3, #32
 8000910:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_TIM4_Init+0x94>)
 800091c:	f002 fde2 	bl	80034e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000926:	f000 f949 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000008c 	.word	0x2000008c
 8000938:	40000800 	.word	0x40000800

0800093c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <MX_USART3_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000974:	f002 fe46 	bl	8003604 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f000 f91d 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000d4 	.word	0x200000d4
 800098c:	40004800 	.word	0x40004800

08000990 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800099a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	2206      	movs	r2, #6
 80009a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d4:	f000 ff53 	bl	800187e <HAL_PCD_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 f8ed 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000011c 	.word	0x2000011c

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	4b58      	ldr	r3, [pc, #352]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a57      	ldr	r2, [pc, #348]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b55      	ldr	r3, [pc, #340]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	4b51      	ldr	r3, [pc, #324]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a50      	ldr	r2, [pc, #320]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b4e      	ldr	r3, [pc, #312]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a49      	ldr	r2, [pc, #292]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a42      	ldr	r2, [pc, #264]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b40      	ldr	r3, [pc, #256]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b3c      	ldr	r3, [pc, #240]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a3b      	ldr	r2, [pc, #236]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a34      	ldr	r2, [pc, #208]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ab0:	482e      	ldr	r0, [pc, #184]	; (8000b6c <MX_GPIO_Init+0x180>)
 8000ab2:	f000 fecb 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2140      	movs	r1, #64	; 0x40
 8000aba:	482d      	ldr	r0, [pc, #180]	; (8000b70 <MX_GPIO_Init+0x184>)
 8000abc:	f000 fec6 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4827      	ldr	r0, [pc, #156]	; (8000b74 <MX_GPIO_Init+0x188>)
 8000ad8:	f000 fd0c 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B20_Pin B30_Pin */
  GPIO_InitStruct.Pin = B20_Pin|B30_Pin;
 8000adc:	2309      	movs	r3, #9
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4821      	ldr	r0, [pc, #132]	; (8000b74 <MX_GPIO_Init+0x188>)
 8000af0:	f000 fd00 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B10_Pin */
  GPIO_InitStruct.Pin = B10_Pin;
 8000af4:	2308      	movs	r3, #8
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000afc:	2302      	movs	r3, #2
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B10_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	481c      	ldr	r0, [pc, #112]	; (8000b78 <MX_GPIO_Init+0x18c>)
 8000b08:	f000 fcf4 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b0c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_GPIO_Init+0x180>)
 8000b26:	f000 fce5 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b2a:	2340      	movs	r3, #64	; 0x40
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <MX_GPIO_Init+0x184>)
 8000b42:	f000 fcd7 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_GPIO_Init+0x184>)
 8000b5a:	f000 fccb 	bl	80014f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3730      	adds	r7, #48	; 0x30
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40021800 	.word	0x40021800
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40020000 	.word	0x40020000

08000b7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	if(htim == &htim4) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a09      	ldr	r2, [pc, #36]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d10a      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sample >>4);
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	111b      	asrs	r3, r3, #4
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b98:	f000 fc28 	bl	80013ec <HAL_DAC_SetValue>
		timer_called = 1;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000008c 	.word	0x2000008c
 8000bb0:	20000604 	.word	0x20000604
 8000bb4:	20000078 	.word	0x20000078
 8000bb8:	20000600 	.word	0x20000600

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_DAC_MspInit+0x7c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d127      	bne.n	8000c8a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_DAC_MspInit+0x80>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <HAL_DAC_MspInit+0x80>)
 8000c44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <HAL_DAC_MspInit+0x80>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_DAC_MspInit+0x80>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <HAL_DAC_MspInit+0x80>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <HAL_DAC_MspInit+0x80>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c72:	2310      	movs	r3, #16
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c76:	2303      	movs	r3, #3
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_DAC_MspInit+0x84>)
 8000c86:	f000 fc35 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40007400 	.word	0x40007400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_TIM_Base_MspInit+0x48>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d115      	bne.n	8000cde <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_TIM_Base_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <HAL_TIM_Base_MspInit+0x4c>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_TIM_Base_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	201e      	movs	r0, #30
 8000cd4:	f000 fadb 	bl	800128e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cd8:	201e      	movs	r0, #30
 8000cda:	f000 faf4 	bl	80012c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40000800 	.word	0x40000800
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_UART_MspInit+0x84>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12c      	bne.n	8000d6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d68:	f000 fbc4 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40004800 	.word	0x40004800
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020c00 	.word	0x40020c00

08000d80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0a0      	sub	sp, #128	; 0x80
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	225c      	movs	r2, #92	; 0x5c
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 fb55 	bl	8004450 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dae:	d14e      	bne.n	8000e4e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000db6:	2300      	movs	r3, #0
 8000db8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 ffb2 	bl	8001d28 <HAL_RCCEx_PeriphCLKConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000dca:	f7ff fef7 	bl	8000bbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <HAL_PCD_MspInit+0xd8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <HAL_PCD_MspInit+0xd8>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <HAL_PCD_MspInit+0xd8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e04:	4619      	mov	r1, r3
 8000e06:	4815      	ldr	r0, [pc, #84]	; (8000e5c <HAL_PCD_MspInit+0xdc>)
 8000e08:	f000 fb74 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e10:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480e      	ldr	r0, [pc, #56]	; (8000e5c <HAL_PCD_MspInit+0xdc>)
 8000e22:	f000 fb67 	bl	80014f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_PCD_MspInit+0xd8>)
 8000e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <HAL_PCD_MspInit+0xd8>)
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	6353      	str	r3, [r2, #52]	; 0x34
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_PCD_MspInit+0xd8>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_PCD_MspInit+0xd8>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_PCD_MspInit+0xd8>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3780      	adds	r7, #128	; 0x80
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f8d0 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <TIM4_IRQHandler+0x10>)
 8000eba:	f001 ffed 	bl	8002e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000008c 	.word	0x2000008c

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f003 fab2 	bl	8004460 <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20020000 	.word	0x20020000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20000608 	.word	0x20000608
 8000f30:	20000758 	.word	0x20000758

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f5c:	f7ff ffea 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f62:	490d      	ldr	r1, [pc, #52]	; (8000f98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f78:	4c0a      	ldr	r4, [pc, #40]	; (8000fa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f003 fa71 	bl	800446c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fb55 	bl	8000638 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f9c:	08023068 	.word	0x08023068
  ldr r2, =_sbss
 8000fa0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fa4:	20000758 	.word	0x20000758

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f94f 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fdf2 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f967 	bl	80012e2 <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f000 f92f 	bl	800128e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	20000008 	.word	0x20000008
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	2000060c 	.word	0x2000060c

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2000060c 	.word	0x2000060c

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4907      	ldr	r1, [pc, #28]	; (8001174 <__NVIC_EnableIRQ+0x38>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001244:	d301      	bcc.n	800124a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2301      	movs	r3, #1
 8001248:	e00f      	b.n	800126a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <SysTick_Config+0x40>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001252:	210f      	movs	r1, #15
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f7ff ff8e 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SysTick_Config+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SysTick_Config+0x40>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff29 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a0:	f7ff ff3e 	bl	8001120 <__NVIC_GetPriorityGrouping>
 80012a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff ff8e 	bl	80011cc <NVIC_EncodePriority>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff5d 	bl	8001178 <__NVIC_SetPriority>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff31 	bl	800113c <__NVIC_EnableIRQ>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffa2 	bl	8001234 <SysTick_Config>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e014      	b.n	8001336 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	791b      	ldrb	r3, [r3, #4]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d105      	bne.n	8001322 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fc7b 	bl	8000c18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2202      	movs	r2, #2
 8001326:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e046      	b.n	80013e0 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	795b      	ldrb	r3, [r3, #5]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_DAC_Start+0x20>
 800135a:	2302      	movs	r3, #2
 800135c:	e040      	b.n	80013e0 <HAL_DAC_Start+0xa2>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2202      	movs	r2, #2
 8001368:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6819      	ldr	r1, [r3, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2201      	movs	r2, #1
 8001378:	409a      	lsls	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10f      	bne.n	80013a8 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001392:	2b3c      	cmp	r3, #60	; 0x3c
 8001394:	d11d      	bne.n	80013d2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0201 	orr.w	r2, r2, #1
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	e014      	b.n	80013d2 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	213c      	movs	r1, #60	; 0x3c
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	429a      	cmp	r2, r3
 80013c0:	d107      	bne.n	80013d2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0202 	orr.w	r2, r2, #2
 80013d0:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e015      	b.n	8001434 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	3308      	adds	r3, #8
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e004      	b.n	800142a <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	3314      	adds	r3, #20
 8001428:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	461a      	mov	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <HAL_DAC_ConfigChannel+0x1c>
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e042      	b.n	80014e6 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	795b      	ldrb	r3, [r3, #5]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_DAC_ConfigChannel+0x2c>
 8001468:	2302      	movs	r3, #2
 800146a:	e03c      	b.n	80014e6 <HAL_DAC_ConfigChannel+0xa6>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2201      	movs	r2, #1
 8001470:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2202      	movs	r2, #2
 8001476:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	f640 72fe 	movw	r2, #4094	; 0xffe
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4313      	orrs	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6819      	ldr	r1, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	22c0      	movs	r2, #192	; 0xc0
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	400a      	ands	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80014e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	e165      	b.n	80017dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001510:	2201      	movs	r2, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 8154 	bne.w	80017d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d005      	beq.n	8001546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001542:	2b02      	cmp	r3, #2
 8001544:	d130      	bne.n	80015a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800157c:	2201      	movs	r2, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 0201 	and.w	r2, r3, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d017      	beq.n	80015e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d123      	bne.n	8001638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	69b9      	ldr	r1, [r7, #24]
 8001634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0203 	and.w	r2, r3, #3
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80ae 	beq.w	80017d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b5d      	ldr	r3, [pc, #372]	; (80017f4 <HAL_GPIO_Init+0x300>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a5c      	ldr	r2, [pc, #368]	; (80017f4 <HAL_GPIO_Init+0x300>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b5a      	ldr	r3, [pc, #360]	; (80017f4 <HAL_GPIO_Init+0x300>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001696:	4a58      	ldr	r2, [pc, #352]	; (80017f8 <HAL_GPIO_Init+0x304>)
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	220f      	movs	r2, #15
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4f      	ldr	r2, [pc, #316]	; (80017fc <HAL_GPIO_Init+0x308>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d025      	beq.n	800170e <HAL_GPIO_Init+0x21a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4e      	ldr	r2, [pc, #312]	; (8001800 <HAL_GPIO_Init+0x30c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d01f      	beq.n	800170a <HAL_GPIO_Init+0x216>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4d      	ldr	r2, [pc, #308]	; (8001804 <HAL_GPIO_Init+0x310>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <HAL_GPIO_Init+0x212>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4c      	ldr	r2, [pc, #304]	; (8001808 <HAL_GPIO_Init+0x314>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x20e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4b      	ldr	r2, [pc, #300]	; (800180c <HAL_GPIO_Init+0x318>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x20a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4a      	ldr	r2, [pc, #296]	; (8001810 <HAL_GPIO_Init+0x31c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x206>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a49      	ldr	r2, [pc, #292]	; (8001814 <HAL_GPIO_Init+0x320>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x202>
 80016f2:	2306      	movs	r3, #6
 80016f4:	e00c      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 80016f6:	2307      	movs	r3, #7
 80016f8:	e00a      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 80016fa:	2305      	movs	r3, #5
 80016fc:	e008      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 80016fe:	2304      	movs	r3, #4
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 8001702:	2303      	movs	r3, #3
 8001704:	e004      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 800170e:	2300      	movs	r3, #0
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	f002 0203 	and.w	r2, r2, #3
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	4093      	lsls	r3, r2
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001720:	4935      	ldr	r1, [pc, #212]	; (80017f8 <HAL_GPIO_Init+0x304>)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172e:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <HAL_GPIO_Init+0x324>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001752:	4a31      	ldr	r2, [pc, #196]	; (8001818 <HAL_GPIO_Init+0x324>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001758:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <HAL_GPIO_Init+0x324>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800177c:	4a26      	ldr	r2, [pc, #152]	; (8001818 <HAL_GPIO_Init+0x324>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001782:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_GPIO_Init+0x324>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a6:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <HAL_GPIO_Init+0x324>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <HAL_GPIO_Init+0x324>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d0:	4a11      	ldr	r2, [pc, #68]	; (8001818 <HAL_GPIO_Init+0x324>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3301      	adds	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	f67f ae96 	bls.w	8001510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	40020800 	.word	0x40020800
 8001808:	40020c00 	.word	0x40020c00
 800180c:	40021000 	.word	0x40021000
 8001810:	40021400 	.word	0x40021400
 8001814:	40021800 	.word	0x40021800
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e001      	b.n	800183e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	619a      	str	r2, [r3, #24]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af02      	add	r7, sp, #8
 8001884:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e108      	b.n	8001aa2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fa68 	bl	8000d80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2203      	movs	r2, #3
 80018b4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018be:	d102      	bne.n	80018c6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 fb0a 	bl	8003ee4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7c1a      	ldrb	r2, [r3, #16]
 80018d8:	f88d 2000 	strb.w	r2, [sp]
 80018dc:	3304      	adds	r3, #4
 80018de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e0:	f002 fa9c 	bl	8003e1c <USB_CoreInit>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2202      	movs	r2, #2
 80018ee:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0d5      	b.n	8001aa2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 fb02 	bl	8003f06 <USB_SetCurrentMode>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0c6      	b.n	8001aa2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e04a      	b.n	80019b0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3315      	adds	r3, #21
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3314      	adds	r3, #20
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	b298      	uxth	r0, r3
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	332e      	adds	r3, #46	; 0x2e
 8001956:	4602      	mov	r2, r0
 8001958:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	3318      	adds	r3, #24
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	331c      	adds	r3, #28
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	3320      	adds	r3, #32
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	3324      	adds	r3, #36	; 0x24
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	3301      	adds	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d3af      	bcc.n	800191a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	e044      	b.n	8001a4a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	f203 2355 	addw	r3, r3, #597	; 0x255
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019ec:	7bfa      	ldrb	r2, [r7, #15]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	3301      	adds	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	791b      	ldrb	r3, [r3, #4]
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d3b5      	bcc.n	80019c0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7c1a      	ldrb	r2, [r3, #16]
 8001a5c:	f88d 2000 	strb.w	r2, [sp]
 8001a60:	3304      	adds	r3, #4
 8001a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a64:	f002 fa9c 	bl	8003fa0 <USB_DevInit>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e013      	b.n	8001aa2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7b1b      	ldrb	r3, [r3, #12]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d102      	bne.n	8001a96 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f80a 	bl	8001aaa <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fc57 	bl	800434e <USB_DevDisconnect>

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	f043 0303 	orr.w	r3, r3, #3
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0cc      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d90c      	bls.n	8001b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b65      	ldr	r3, [pc, #404]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b63      	ldr	r3, [pc, #396]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0b8      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b48:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a58      	ldr	r2, [pc, #352]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b60:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6c:	4b50      	ldr	r3, [pc, #320]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	494d      	ldr	r1, [pc, #308]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d044      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d119      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e07f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e06f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e067      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4934      	ldr	r1, [pc, #208]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be4:	f7ff fa48 	bl	8001078 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7ff fa44 	bl	8001078 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e04f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 020c 	and.w	r2, r3, #12
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1eb      	bne.n	8001bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d20c      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e032      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4916      	ldr	r1, [pc, #88]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c7a:	f000 fb7f 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	490a      	ldr	r1, [pc, #40]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	5ccb      	ldrb	r3, [r1, r3]
 8001c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c92:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f9a8 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	0802300c 	.word	0x0802300c
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cdc:	f7ff fff0 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0a9b      	lsrs	r3, r3, #10
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4903      	ldr	r1, [pc, #12]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	0802301c 	.word	0x0802301c

08001d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d04:	f7ff ffdc 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0b5b      	lsrs	r3, r3, #13
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4903      	ldr	r1, [pc, #12]	; (8001d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	0802301c 	.word	0x0802301c

08001d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	; 0x30
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d010      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001d60:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d66:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6e:	496c      	ldr	r1, [pc, #432]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d010      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001d8e:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d94:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	4960      	ldr	r1, [pc, #384]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001dac:	2301      	movs	r3, #1
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d017      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dbc:	4b58      	ldr	r3, [pc, #352]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4955      	ldr	r1, [pc, #340]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dda:	d101      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001de8:	2301      	movs	r3, #1
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d017      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001df8:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e06:	4946      	ldr	r1, [pc, #280]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e16:	d101      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001e24:	2301      	movs	r3, #1
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 808a 	beq.w	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a38      	ldr	r2, [pc, #224]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e52:	4b34      	ldr	r3, [pc, #208]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a33      	ldr	r2, [pc, #204]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e5e:	f7ff f90b 	bl	8001078 <HAL_GetTick>
 8001e62:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e66:	f7ff f907 	bl	8001078 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e278      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e84:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d02f      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9c:	6a3a      	ldr	r2, [r7, #32]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d028      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eaa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d114      	bne.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff f8d5 	bl	8001078 <HAL_GetTick>
 8001ece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7ff f8d1 	bl	8001078 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e240      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ee      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f00:	d114      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f16:	4902      	ldr	r1, [pc, #8]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]
 8001f1c:	e00c      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40007000 	.word	0x40007000
 8001f28:	42470e40 	.word	0x42470e40
 8001f2c:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4a49      	ldr	r2, [pc, #292]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f32:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f36:	6093      	str	r3, [r2, #8]
 8001f38:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f44:	4944      	ldr	r1, [pc, #272]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d004      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001f5c:	4b3f      	ldr	r3, [pc, #252]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001f5e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001f6c:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	4937      	ldr	r1, [pc, #220]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f8e:	4b32      	ldr	r3, [pc, #200]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f94:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9c:	492e      	ldr	r1, [pc, #184]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d011      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	4926      	ldr	r1, [pc, #152]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	491a      	ldr	r1, [pc, #104]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d011      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002008:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002010:	4911      	ldr	r1, [pc, #68]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002020:	d101      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002022:	2301      	movs	r3, #1
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d005      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002034:	f040 80ff 	bne.w	8002236 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800203e:	f7ff f81b 	bl	8001078 <HAL_GetTick>
 8002042:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002044:	e00e      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002046:	f7ff f817 	bl	8001078 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d907      	bls.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e188      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002058:	40023800 	.word	0x40023800
 800205c:	424711e0 	.word	0x424711e0
 8002060:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002064:	4b7e      	ldr	r3, [pc, #504]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1ea      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800208c:	2b00      	cmp	r3, #0
 800208e:	d028      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d124      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002098:	4b71      	ldr	r3, [pc, #452]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800209a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800209e:	0c1b      	lsrs	r3, r3, #16
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	3301      	adds	r3, #1
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020aa:	4b6d      	ldr	r3, [pc, #436]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b0:	0e1b      	lsrs	r3, r3, #24
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	019b      	lsls	r3, r3, #6
 80020c2:	431a      	orrs	r2, r3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	431a      	orrs	r2, r3
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	061b      	lsls	r3, r3, #24
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	071b      	lsls	r3, r3, #28
 80020da:	4961      	ldr	r1, [pc, #388]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d004      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002100:	2b00      	cmp	r3, #0
 8002102:	d035      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800210c:	d130      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800210e:	4b54      	ldr	r3, [pc, #336]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002114:	0c1b      	lsrs	r3, r3, #16
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	3301      	adds	r3, #1
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002120:	4b4f      	ldr	r3, [pc, #316]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002126:	0f1b      	lsrs	r3, r3, #28
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	019b      	lsls	r3, r3, #6
 8002138:	431a      	orrs	r2, r3
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	3b01      	subs	r3, #1
 8002140:	041b      	lsls	r3, r3, #16
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	061b      	lsls	r3, r3, #24
 800214a:	431a      	orrs	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	071b      	lsls	r3, r3, #28
 8002150:	4943      	ldr	r1, [pc, #268]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002158:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800215a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800215e:	f023 021f 	bic.w	r2, r3, #31
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	3b01      	subs	r3, #1
 8002168:	493d      	ldr	r1, [pc, #244]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	2b00      	cmp	r3, #0
 800217a:	d029      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002184:	d124      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002186:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800218c:	0c1b      	lsrs	r3, r3, #16
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	3301      	adds	r3, #1
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800219a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800219e:	0f1b      	lsrs	r3, r3, #28
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	019b      	lsls	r3, r3, #6
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	085b      	lsrs	r3, r3, #1
 80021b8:	3b01      	subs	r3, #1
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	431a      	orrs	r2, r3
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	061b      	lsls	r3, r3, #24
 80021c2:	431a      	orrs	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	071b      	lsls	r3, r3, #28
 80021c8:	4925      	ldr	r1, [pc, #148]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d016      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	019b      	lsls	r3, r3, #6
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	085b      	lsrs	r3, r3, #1
 80021ee:	3b01      	subs	r3, #1
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	071b      	lsls	r3, r3, #28
 8002202:	4917      	ldr	r1, [pc, #92]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002210:	f7fe ff32 	bl	8001078 <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002218:	f7fe ff2e 	bl	8001078 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e09f      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	2b01      	cmp	r3, #1
 800223a:	f040 8095 	bne.w	8002368 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002244:	f7fe ff18 	bl	8001078 <HAL_GetTick>
 8002248:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800224a:	e00f      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800224c:	f7fe ff14 	bl	8001078 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d908      	bls.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e085      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	42470068 	.word	0x42470068
 8002268:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800226c:	4b41      	ldr	r3, [pc, #260]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002278:	d0e8      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002296:	2b00      	cmp	r3, #0
 8002298:	d02b      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d127      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80022a2:	4b34      	ldr	r3, [pc, #208]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	3301      	adds	r3, #1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	431a      	orrs	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	3b01      	subs	r3, #1
 80022c6:	041b      	lsls	r3, r3, #16
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	061b      	lsls	r3, r3, #24
 80022d0:	4928      	ldr	r1, [pc, #160]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80022d8:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022de:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	3b01      	subs	r3, #1
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	4922      	ldr	r1, [pc, #136]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d01d      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002306:	d118      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	0e1b      	lsrs	r3, r3, #24
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	019b      	lsls	r3, r3, #6
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	3b01      	subs	r3, #1
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	431a      	orrs	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	4910      	ldr	r1, [pc, #64]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002340:	f7fe fe9a 	bl	8001078 <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002348:	f7fe fe96 	bl	8001078 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e007      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002366:	d1ef      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3730      	adds	r7, #48	; 0x30
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800
 8002378:	42470070 	.word	0x42470070

0800237c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800237c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002380:	b0ae      	sub	sp, #184	; 0xb8
 8002382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023a2:	4bcb      	ldr	r3, [pc, #812]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b0c      	cmp	r3, #12
 80023ac:	f200 8206 	bhi.w	80027bc <HAL_RCC_GetSysClockFreq+0x440>
 80023b0:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80023b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b6:	bf00      	nop
 80023b8:	080023ed 	.word	0x080023ed
 80023bc:	080027bd 	.word	0x080027bd
 80023c0:	080027bd 	.word	0x080027bd
 80023c4:	080027bd 	.word	0x080027bd
 80023c8:	080023f5 	.word	0x080023f5
 80023cc:	080027bd 	.word	0x080027bd
 80023d0:	080027bd 	.word	0x080027bd
 80023d4:	080027bd 	.word	0x080027bd
 80023d8:	080023fd 	.word	0x080023fd
 80023dc:	080027bd 	.word	0x080027bd
 80023e0:	080027bd 	.word	0x080027bd
 80023e4:	080027bd 	.word	0x080027bd
 80023e8:	080025ed 	.word	0x080025ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4bb9      	ldr	r3, [pc, #740]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80023ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80023f2:	e1e7      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f4:	4bb8      	ldr	r3, [pc, #736]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023fa:	e1e3      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023fc:	4bb4      	ldr	r3, [pc, #720]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002408:	4bb1      	ldr	r3, [pc, #708]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x354>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d071      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002414:	4bae      	ldr	r3, [pc, #696]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	2200      	movs	r2, #0
 800241c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002420:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002436:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800243a:	4622      	mov	r2, r4
 800243c:	462b      	mov	r3, r5
 800243e:	f04f 0000 	mov.w	r0, #0
 8002442:	f04f 0100 	mov.w	r1, #0
 8002446:	0159      	lsls	r1, r3, #5
 8002448:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800244c:	0150      	lsls	r0, r2, #5
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4621      	mov	r1, r4
 8002454:	1a51      	subs	r1, r2, r1
 8002456:	6439      	str	r1, [r7, #64]	; 0x40
 8002458:	4629      	mov	r1, r5
 800245a:	eb63 0301 	sbc.w	r3, r3, r1
 800245e:	647b      	str	r3, [r7, #68]	; 0x44
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800246c:	4649      	mov	r1, r9
 800246e:	018b      	lsls	r3, r1, #6
 8002470:	4641      	mov	r1, r8
 8002472:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002476:	4641      	mov	r1, r8
 8002478:	018a      	lsls	r2, r1, #6
 800247a:	4641      	mov	r1, r8
 800247c:	1a51      	subs	r1, r2, r1
 800247e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002480:	4649      	mov	r1, r9
 8002482:	eb63 0301 	sbc.w	r3, r3, r1
 8002486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002494:	4649      	mov	r1, r9
 8002496:	00cb      	lsls	r3, r1, #3
 8002498:	4641      	mov	r1, r8
 800249a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800249e:	4641      	mov	r1, r8
 80024a0:	00ca      	lsls	r2, r1, #3
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	4603      	mov	r3, r0
 80024a8:	4622      	mov	r2, r4
 80024aa:	189b      	adds	r3, r3, r2
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
 80024ae:	462b      	mov	r3, r5
 80024b0:	460a      	mov	r2, r1
 80024b2:	eb42 0303 	adc.w	r3, r2, r3
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024c4:	4629      	mov	r1, r5
 80024c6:	024b      	lsls	r3, r1, #9
 80024c8:	4621      	mov	r1, r4
 80024ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024ce:	4621      	mov	r1, r4
 80024d0:	024a      	lsls	r2, r1, #9
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024da:	2200      	movs	r2, #0
 80024dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80024e8:	f7fd fee2 	bl	80002b0 <__aeabi_uldivmod>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4613      	mov	r3, r2
 80024f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024f6:	e067      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f8:	4b75      	ldr	r3, [pc, #468]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002504:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800250c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002510:	67bb      	str	r3, [r7, #120]	; 0x78
 8002512:	2300      	movs	r3, #0
 8002514:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002516:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800251a:	4622      	mov	r2, r4
 800251c:	462b      	mov	r3, r5
 800251e:	f04f 0000 	mov.w	r0, #0
 8002522:	f04f 0100 	mov.w	r1, #0
 8002526:	0159      	lsls	r1, r3, #5
 8002528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800252c:	0150      	lsls	r0, r2, #5
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4621      	mov	r1, r4
 8002534:	1a51      	subs	r1, r2, r1
 8002536:	62b9      	str	r1, [r7, #40]	; 0x28
 8002538:	4629      	mov	r1, r5
 800253a:	eb63 0301 	sbc.w	r3, r3, r1
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800254c:	4649      	mov	r1, r9
 800254e:	018b      	lsls	r3, r1, #6
 8002550:	4641      	mov	r1, r8
 8002552:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002556:	4641      	mov	r1, r8
 8002558:	018a      	lsls	r2, r1, #6
 800255a:	4641      	mov	r1, r8
 800255c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002560:	4649      	mov	r1, r9
 8002562:	eb63 0b01 	sbc.w	fp, r3, r1
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002572:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002576:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800257a:	4692      	mov	sl, r2
 800257c:	469b      	mov	fp, r3
 800257e:	4623      	mov	r3, r4
 8002580:	eb1a 0303 	adds.w	r3, sl, r3
 8002584:	623b      	str	r3, [r7, #32]
 8002586:	462b      	mov	r3, r5
 8002588:	eb4b 0303 	adc.w	r3, fp, r3
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800259a:	4629      	mov	r1, r5
 800259c:	028b      	lsls	r3, r1, #10
 800259e:	4621      	mov	r1, r4
 80025a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025a4:	4621      	mov	r1, r4
 80025a6:	028a      	lsls	r2, r1, #10
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025b0:	2200      	movs	r2, #0
 80025b2:	673b      	str	r3, [r7, #112]	; 0x70
 80025b4:	677a      	str	r2, [r7, #116]	; 0x74
 80025b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80025ba:	f7fd fe79 	bl	80002b0 <__aeabi_uldivmod>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4613      	mov	r3, r2
 80025c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025c8:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	0c1b      	lsrs	r3, r3, #16
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	3301      	adds	r3, #1
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80025da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025ea:	e0eb      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ec:	4b38      	ldr	r3, [pc, #224]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f8:	4b35      	ldr	r3, [pc, #212]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d06b      	beq.n	80026dc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002604:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	099b      	lsrs	r3, r3, #6
 800260a:	2200      	movs	r2, #0
 800260c:	66bb      	str	r3, [r7, #104]	; 0x68
 800260e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002616:	663b      	str	r3, [r7, #96]	; 0x60
 8002618:	2300      	movs	r3, #0
 800261a:	667b      	str	r3, [r7, #100]	; 0x64
 800261c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002620:	4622      	mov	r2, r4
 8002622:	462b      	mov	r3, r5
 8002624:	f04f 0000 	mov.w	r0, #0
 8002628:	f04f 0100 	mov.w	r1, #0
 800262c:	0159      	lsls	r1, r3, #5
 800262e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002632:	0150      	lsls	r0, r2, #5
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4621      	mov	r1, r4
 800263a:	1a51      	subs	r1, r2, r1
 800263c:	61b9      	str	r1, [r7, #24]
 800263e:	4629      	mov	r1, r5
 8002640:	eb63 0301 	sbc.w	r3, r3, r1
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002652:	4659      	mov	r1, fp
 8002654:	018b      	lsls	r3, r1, #6
 8002656:	4651      	mov	r1, sl
 8002658:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800265c:	4651      	mov	r1, sl
 800265e:	018a      	lsls	r2, r1, #6
 8002660:	4651      	mov	r1, sl
 8002662:	ebb2 0801 	subs.w	r8, r2, r1
 8002666:	4659      	mov	r1, fp
 8002668:	eb63 0901 	sbc.w	r9, r3, r1
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002678:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800267c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002680:	4690      	mov	r8, r2
 8002682:	4699      	mov	r9, r3
 8002684:	4623      	mov	r3, r4
 8002686:	eb18 0303 	adds.w	r3, r8, r3
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	462b      	mov	r3, r5
 800268e:	eb49 0303 	adc.w	r3, r9, r3
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026a0:	4629      	mov	r1, r5
 80026a2:	024b      	lsls	r3, r1, #9
 80026a4:	4621      	mov	r1, r4
 80026a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026aa:	4621      	mov	r1, r4
 80026ac:	024a      	lsls	r2, r1, #9
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026b6:	2200      	movs	r2, #0
 80026b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80026ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80026bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026c0:	f7fd fdf6 	bl	80002b0 <__aeabi_uldivmod>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4613      	mov	r3, r2
 80026ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026ce:	e065      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x420>
 80026d0:	40023800 	.word	0x40023800
 80026d4:	00f42400 	.word	0x00f42400
 80026d8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026dc:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x458>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	099b      	lsrs	r3, r3, #6
 80026e2:	2200      	movs	r2, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	4611      	mov	r1, r2
 80026e8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026ec:	653b      	str	r3, [r7, #80]	; 0x50
 80026ee:	2300      	movs	r3, #0
 80026f0:	657b      	str	r3, [r7, #84]	; 0x54
 80026f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80026f6:	4642      	mov	r2, r8
 80026f8:	464b      	mov	r3, r9
 80026fa:	f04f 0000 	mov.w	r0, #0
 80026fe:	f04f 0100 	mov.w	r1, #0
 8002702:	0159      	lsls	r1, r3, #5
 8002704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002708:	0150      	lsls	r0, r2, #5
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4641      	mov	r1, r8
 8002710:	1a51      	subs	r1, r2, r1
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	4649      	mov	r1, r9
 8002716:	eb63 0301 	sbc.w	r3, r3, r1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002728:	4659      	mov	r1, fp
 800272a:	018b      	lsls	r3, r1, #6
 800272c:	4651      	mov	r1, sl
 800272e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002732:	4651      	mov	r1, sl
 8002734:	018a      	lsls	r2, r1, #6
 8002736:	4651      	mov	r1, sl
 8002738:	1a54      	subs	r4, r2, r1
 800273a:	4659      	mov	r1, fp
 800273c:	eb63 0501 	sbc.w	r5, r3, r1
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	00eb      	lsls	r3, r5, #3
 800274a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800274e:	00e2      	lsls	r2, r4, #3
 8002750:	4614      	mov	r4, r2
 8002752:	461d      	mov	r5, r3
 8002754:	4643      	mov	r3, r8
 8002756:	18e3      	adds	r3, r4, r3
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	464b      	mov	r3, r9
 800275c:	eb45 0303 	adc.w	r3, r5, r3
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800276e:	4629      	mov	r1, r5
 8002770:	028b      	lsls	r3, r1, #10
 8002772:	4621      	mov	r1, r4
 8002774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002778:	4621      	mov	r1, r4
 800277a:	028a      	lsls	r2, r1, #10
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002784:	2200      	movs	r2, #0
 8002786:	64bb      	str	r3, [r7, #72]	; 0x48
 8002788:	64fa      	str	r2, [r7, #76]	; 0x4c
 800278a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800278e:	f7fd fd8f 	bl	80002b0 <__aeabi_uldivmod>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4613      	mov	r3, r2
 8002798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x458>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	0f1b      	lsrs	r3, r3, #28
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80027aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027ba:	e003      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80027be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	37b8      	adds	r7, #184	; 0xb8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	00f42400 	.word	0x00f42400

080027dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e28d      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8083 	beq.w	8002902 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027fc:	4b94      	ldr	r3, [pc, #592]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b04      	cmp	r3, #4
 8002806:	d019      	beq.n	800283c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002808:	4b91      	ldr	r3, [pc, #580]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002810:	2b08      	cmp	r3, #8
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002814:	4b8e      	ldr	r3, [pc, #568]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002820:	d00c      	beq.n	800283c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002822:	4b8b      	ldr	r3, [pc, #556]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d112      	bne.n	8002854 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282e:	4b88      	ldr	r3, [pc, #544]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800283a:	d10b      	bne.n	8002854 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	4b84      	ldr	r3, [pc, #528]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d05b      	beq.n	8002900 <HAL_RCC_OscConfig+0x124>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d157      	bne.n	8002900 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e25a      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d106      	bne.n	800286c <HAL_RCC_OscConfig+0x90>
 800285e:	4b7c      	ldr	r3, [pc, #496]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7b      	ldr	r2, [pc, #492]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0xcc>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0xb4>
 8002876:	4b76      	ldr	r3, [pc, #472]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a75      	ldr	r2, [pc, #468]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b73      	ldr	r3, [pc, #460]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a72      	ldr	r2, [pc, #456]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0xcc>
 8002890:	4b6f      	ldr	r3, [pc, #444]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a6e      	ldr	r2, [pc, #440]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b6c      	ldr	r3, [pc, #432]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a6b      	ldr	r2, [pc, #428]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fbe2 	bl	8001078 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fe fbde 	bl	8001078 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e21f      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0xdc>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fbce 	bl	8001078 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fe fbca 	bl	8001078 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e20b      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	4b57      	ldr	r3, [pc, #348]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x104>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d06f      	beq.n	80029ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800290e:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b00      	cmp	r3, #0
 8002918:	d017      	beq.n	800294a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800291a:	4b4d      	ldr	r3, [pc, #308]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002922:	2b08      	cmp	r3, #8
 8002924:	d105      	bne.n	8002932 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002926:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d11c      	bne.n	8002978 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293e:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d116      	bne.n	8002978 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_RCC_OscConfig+0x186>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d001      	beq.n	8002962 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e1d3      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4937      	ldr	r1, [pc, #220]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	e03a      	b.n	80029ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002980:	4b34      	ldr	r3, [pc, #208]	; (8002a54 <HAL_RCC_OscConfig+0x278>)
 8002982:	2201      	movs	r2, #1
 8002984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe fb77 	bl	8001078 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298e:	f7fe fb73 	bl	8001078 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e1b4      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ac:	4b28      	ldr	r3, [pc, #160]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4925      	ldr	r1, [pc, #148]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]
 80029c0:	e015      	b.n	80029ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_RCC_OscConfig+0x278>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe fb56 	bl	8001078 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d0:	f7fe fb52 	bl	8001078 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e193      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d036      	beq.n	8002a68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d016      	beq.n	8002a30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_RCC_OscConfig+0x27c>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe fb36 	bl	8001078 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a10:	f7fe fb32 	bl	8001078 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e173      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x234>
 8002a2e:	e01b      	b.n	8002a68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_RCC_OscConfig+0x27c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fe fb1f 	bl	8001078 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3c:	e00e      	b.n	8002a5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fb1b 	bl	8001078 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d907      	bls.n	8002a5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e15c      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
 8002a50:	40023800 	.word	0x40023800
 8002a54:	42470000 	.word	0x42470000
 8002a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5c:	4b8a      	ldr	r3, [pc, #552]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1ea      	bne.n	8002a3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 8097 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7a:	4b83      	ldr	r3, [pc, #524]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	4b7f      	ldr	r3, [pc, #508]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a7e      	ldr	r2, [pc, #504]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b7c      	ldr	r3, [pc, #496]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	4b79      	ldr	r3, [pc, #484]	; (8002c8c <HAL_RCC_OscConfig+0x4b0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d118      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab2:	4b76      	ldr	r3, [pc, #472]	; (8002c8c <HAL_RCC_OscConfig+0x4b0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a75      	ldr	r2, [pc, #468]	; (8002c8c <HAL_RCC_OscConfig+0x4b0>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fadb 	bl	8001078 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac6:	f7fe fad7 	bl	8001078 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e118      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	4b6c      	ldr	r3, [pc, #432]	; (8002c8c <HAL_RCC_OscConfig+0x4b0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x31e>
 8002aec:	4b66      	ldr	r3, [pc, #408]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	4a65      	ldr	r2, [pc, #404]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6713      	str	r3, [r2, #112]	; 0x70
 8002af8:	e01c      	b.n	8002b34 <HAL_RCC_OscConfig+0x358>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b05      	cmp	r3, #5
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x340>
 8002b02:	4b61      	ldr	r3, [pc, #388]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	4a60      	ldr	r2, [pc, #384]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	f043 0304 	orr.w	r3, r3, #4
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0e:	4b5e      	ldr	r3, [pc, #376]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	4a5d      	ldr	r2, [pc, #372]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_OscConfig+0x358>
 8002b1c:	4b5a      	ldr	r3, [pc, #360]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	4a59      	ldr	r2, [pc, #356]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	6713      	str	r3, [r2, #112]	; 0x70
 8002b28:	4b57      	ldr	r3, [pc, #348]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	4a56      	ldr	r2, [pc, #344]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002b2e:	f023 0304 	bic.w	r3, r3, #4
 8002b32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d015      	beq.n	8002b68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3c:	f7fe fa9c 	bl	8001078 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7fe fa98 	bl	8001078 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e0d7      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5a:	4b4b      	ldr	r3, [pc, #300]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0ee      	beq.n	8002b44 <HAL_RCC_OscConfig+0x368>
 8002b66:	e014      	b.n	8002b92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fe fa86 	bl	8001078 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7fe fa82 	bl	8001078 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0c1      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b86:	4b40      	ldr	r3, [pc, #256]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ee      	bne.n	8002b70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b98:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	4a3a      	ldr	r2, [pc, #232]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80ad 	beq.w	8002d08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bae:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d060      	beq.n	8002c7c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d145      	bne.n	8002c4e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc2:	4b33      	ldr	r3, [pc, #204]	; (8002c90 <HAL_RCC_OscConfig+0x4b4>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fa56 	bl	8001078 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fe fa52 	bl	8001078 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e093      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be2:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	019b      	lsls	r3, r3, #6
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	3b01      	subs	r3, #1
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	061b      	lsls	r3, r3, #24
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	071b      	lsls	r3, r3, #28
 8002c1a:	491b      	ldr	r1, [pc, #108]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x4b4>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe fa27 	bl	8001078 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2e:	f7fe fa23 	bl	8001078 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e064      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x452>
 8002c4c:	e05c      	b.n	8002d08 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <HAL_RCC_OscConfig+0x4b4>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fa10 	bl	8001078 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe fa0c 	bl	8001078 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e04d      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_RCC_OscConfig+0x4ac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x480>
 8002c7a:	e045      	b.n	8002d08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e040      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c94:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <HAL_RCC_OscConfig+0x538>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d030      	beq.n	8002d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d129      	bne.n	8002d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d122      	bne.n	8002d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d119      	bne.n	8002d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d10f      	bne.n	8002d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800

08002d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e041      	b.n	8002dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd ffae 	bl	8000ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f000 fa7e 	bl	8003258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d001      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e04e      	b.n	8002e6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <HAL_TIM_Base_Start_IT+0xc4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d022      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0x80>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfa:	d01d      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0x80>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d018      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0x80>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0x80>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00e      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0x80>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d009      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0x80>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a19      	ldr	r2, [pc, #100]	; (8002e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0x80>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d111      	bne.n	8002e5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d010      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5a:	e007      	b.n	8002e6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800
 8002e88:	40000c00 	.word	0x40000c00
 8002e8c:	40010400 	.word	0x40010400
 8002e90:	40014000 	.word	0x40014000
 8002e94:	40001800 	.word	0x40001800

08002e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d020      	beq.n	8002efc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01b      	beq.n	8002efc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0202 	mvn.w	r2, #2
 8002ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f999 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f98b 	bl	8003206 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f99c 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d020      	beq.n	8002f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01b      	beq.n	8002f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0204 	mvn.w	r2, #4
 8002f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f973 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f965 	bl	8003206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f976 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d020      	beq.n	8002f94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01b      	beq.n	8002f94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0208 	mvn.w	r2, #8
 8002f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2204      	movs	r2, #4
 8002f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f94d 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 8002f80:	e005      	b.n	8002f8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f93f 	bl	8003206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f950 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d020      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01b      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0210 	mvn.w	r2, #16
 8002fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f927 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 8002fcc:	e005      	b.n	8002fda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f919 	bl	8003206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f92a 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00c      	beq.n	8003004 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0201 	mvn.w	r2, #1
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd fdbc 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00c      	beq.n	8003028 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fae4 	bl	80035f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00c      	beq.n	800304c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f8fb 	bl	8003242 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00c      	beq.n	8003070 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0220 	mvn.w	r2, #32
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fab6 	bl	80035dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_TIM_ConfigClockSource+0x1c>
 8003090:	2302      	movs	r3, #2
 8003092:	e0b4      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x186>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030cc:	d03e      	beq.n	800314c <HAL_TIM_ConfigClockSource+0xd4>
 80030ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d2:	f200 8087 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030da:	f000 8086 	beq.w	80031ea <HAL_TIM_ConfigClockSource+0x172>
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	d87f      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b70      	cmp	r3, #112	; 0x70
 80030e6:	d01a      	beq.n	800311e <HAL_TIM_ConfigClockSource+0xa6>
 80030e8:	2b70      	cmp	r3, #112	; 0x70
 80030ea:	d87b      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b60      	cmp	r3, #96	; 0x60
 80030ee:	d050      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x11a>
 80030f0:	2b60      	cmp	r3, #96	; 0x60
 80030f2:	d877      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b50      	cmp	r3, #80	; 0x50
 80030f6:	d03c      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0xfa>
 80030f8:	2b50      	cmp	r3, #80	; 0x50
 80030fa:	d873      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d058      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d86f      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b30      	cmp	r3, #48	; 0x30
 8003106:	d064      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003108:	2b30      	cmp	r3, #48	; 0x30
 800310a:	d86b      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b20      	cmp	r3, #32
 800310e:	d060      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003110:	2b20      	cmp	r3, #32
 8003112:	d867      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d05c      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003118:	2b10      	cmp	r3, #16
 800311a:	d05a      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15a>
 800311c:	e062      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800312e:	f000 f9b9 	bl	80034a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003140:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	609a      	str	r2, [r3, #8]
      break;
 800314a:	e04f      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800315c:	f000 f9a2 	bl	80034a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800316e:	609a      	str	r2, [r3, #8]
      break;
 8003170:	e03c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317e:	461a      	mov	r2, r3
 8003180:	f000 f916 	bl	80033b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2150      	movs	r1, #80	; 0x50
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f96f 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 8003190:	e02c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 f935 	bl	800340e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2160      	movs	r1, #96	; 0x60
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f95f 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 80031b0:	e01c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031be:	461a      	mov	r2, r3
 80031c0:	f000 f8f6 	bl	80033b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2140      	movs	r1, #64	; 0x40
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f94f 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 80031d0:	e00c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f000 f946 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 80031e2:	e003      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      break;
 80031e8:	e000      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a46      	ldr	r2, [pc, #280]	; (8003384 <TIM_Base_SetConfig+0x12c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003276:	d00f      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a43      	ldr	r2, [pc, #268]	; (8003388 <TIM_Base_SetConfig+0x130>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00b      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a42      	ldr	r2, [pc, #264]	; (800338c <TIM_Base_SetConfig+0x134>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d007      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a41      	ldr	r2, [pc, #260]	; (8003390 <TIM_Base_SetConfig+0x138>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a40      	ldr	r2, [pc, #256]	; (8003394 <TIM_Base_SetConfig+0x13c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d108      	bne.n	80032aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a35      	ldr	r2, [pc, #212]	; (8003384 <TIM_Base_SetConfig+0x12c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d02b      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d027      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a32      	ldr	r2, [pc, #200]	; (8003388 <TIM_Base_SetConfig+0x130>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d023      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a31      	ldr	r2, [pc, #196]	; (800338c <TIM_Base_SetConfig+0x134>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01f      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a30      	ldr	r2, [pc, #192]	; (8003390 <TIM_Base_SetConfig+0x138>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01b      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a2f      	ldr	r2, [pc, #188]	; (8003394 <TIM_Base_SetConfig+0x13c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d017      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2e      	ldr	r2, [pc, #184]	; (8003398 <TIM_Base_SetConfig+0x140>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2d      	ldr	r2, [pc, #180]	; (800339c <TIM_Base_SetConfig+0x144>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00f      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <TIM_Base_SetConfig+0x148>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <TIM_Base_SetConfig+0x14c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <TIM_Base_SetConfig+0x150>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a29      	ldr	r2, [pc, #164]	; (80033ac <TIM_Base_SetConfig+0x154>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a10      	ldr	r2, [pc, #64]	; (8003384 <TIM_Base_SetConfig+0x12c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d003      	beq.n	8003350 <TIM_Base_SetConfig+0xf8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a12      	ldr	r2, [pc, #72]	; (8003394 <TIM_Base_SetConfig+0x13c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d103      	bne.n	8003358 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b01      	cmp	r3, #1
 8003368:	d105      	bne.n	8003376 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f023 0201 	bic.w	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	611a      	str	r2, [r3, #16]
  }
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40010000 	.word	0x40010000
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	40000c00 	.word	0x40000c00
 8003394:	40010400 	.word	0x40010400
 8003398:	40014000 	.word	0x40014000
 800339c:	40014400 	.word	0x40014400
 80033a0:	40014800 	.word	0x40014800
 80033a4:	40001800 	.word	0x40001800
 80033a8:	40001c00 	.word	0x40001c00
 80033ac:	40002000 	.word	0x40002000

080033b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f023 0201 	bic.w	r2, r3, #1
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f023 030a 	bic.w	r3, r3, #10
 80033ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800340e:	b480      	push	{r7}
 8003410:	b087      	sub	sp, #28
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f023 0210 	bic.w	r2, r3, #16
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	031b      	lsls	r3, r3, #12
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800344a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	621a      	str	r2, [r3, #32]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	f043 0307 	orr.w	r3, r3, #7
 8003490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	021a      	lsls	r2, r3, #8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	609a      	str	r2, [r3, #8]
}
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e05a      	b.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a21      	ldr	r2, [pc, #132]	; (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d022      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003548:	d01d      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d018      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1a      	ldr	r2, [pc, #104]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a18      	ldr	r2, [pc, #96]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d009      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10c      	bne.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800358c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	4313      	orrs	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40010000 	.word	0x40010000
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	40010400 	.word	0x40010400
 80035d4:	40014000 	.word	0x40014000
 80035d8:	40001800 	.word	0x40001800

080035dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e042      	b.n	800369c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd fb60 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2224      	movs	r2, #36	; 0x24
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f973 	bl	8003934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800365c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800366c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800367c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d175      	bne.n	80037b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_UART_Transmit+0x2c>
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e06e      	b.n	80037b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2221      	movs	r2, #33	; 0x21
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e2:	f7fd fcc9 	bl	8001078 <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fc:	d108      	bne.n	8003710 <HAL_UART_Transmit+0x6c>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d104      	bne.n	8003710 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	e003      	b.n	8003718 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003714:	2300      	movs	r3, #0
 8003716:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003718:	e02e      	b.n	8003778 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2200      	movs	r2, #0
 8003722:	2180      	movs	r1, #128	; 0x80
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f848 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e03a      	b.n	80037b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10b      	bne.n	800375a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003750:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	3302      	adds	r3, #2
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	e007      	b.n	800376a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	3301      	adds	r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1cb      	bne.n	800371a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2200      	movs	r2, #0
 800378a:	2140      	movs	r1, #64	; 0x40
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f814 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e006      	b.n	80037b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b086      	sub	sp, #24
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	4613      	mov	r3, r2
 80037c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ca:	e03b      	b.n	8003844 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d037      	beq.n	8003844 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d4:	f7fd fc50 	bl	8001078 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	6a3a      	ldr	r2, [r7, #32]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d302      	bcc.n	80037ea <UART_WaitOnFlagUntilTimeout+0x30>
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e03a      	b.n	8003864 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d023      	beq.n	8003844 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d020      	beq.n	8003844 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d01d      	beq.n	8003844 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b08      	cmp	r3, #8
 8003814:	d116      	bne.n	8003844 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f81d 	bl	800386c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2208      	movs	r2, #8
 8003836:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e00f      	b.n	8003864 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	429a      	cmp	r2, r3
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	429a      	cmp	r2, r3
 8003860:	d0b4      	beq.n	80037cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b095      	sub	sp, #84	; 0x54
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800388a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	330c      	adds	r3, #12
 8003892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003894:	643a      	str	r2, [r7, #64]	; 0x40
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800389a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e5      	bne.n	8003874 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3314      	adds	r3, #20
 80038c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e5      	bne.n	80038a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d119      	bne.n	8003918 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f023 0310 	bic.w	r3, r3, #16
 80038fa:	647b      	str	r3, [r7, #68]	; 0x44
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003904:	61ba      	str	r2, [r7, #24]
 8003906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6979      	ldr	r1, [r7, #20]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	613b      	str	r3, [r7, #16]
   return(result);
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e5      	bne.n	80038e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003926:	bf00      	nop
 8003928:	3754      	adds	r7, #84	; 0x54
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003938:	b0c0      	sub	sp, #256	; 0x100
 800393a:	af00      	add	r7, sp, #0
 800393c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	68d9      	ldr	r1, [r3, #12]
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	ea40 0301 	orr.w	r3, r0, r1
 800395c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	431a      	orrs	r2, r3
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	431a      	orrs	r2, r3
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800398c:	f021 010c 	bic.w	r1, r1, #12
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800399a:	430b      	orrs	r3, r1
 800399c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ae:	6999      	ldr	r1, [r3, #24]
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	ea40 0301 	orr.w	r3, r0, r1
 80039ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4b8f      	ldr	r3, [pc, #572]	; (8003c00 <UART_SetConfig+0x2cc>)
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d005      	beq.n	80039d4 <UART_SetConfig+0xa0>
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b8d      	ldr	r3, [pc, #564]	; (8003c04 <UART_SetConfig+0x2d0>)
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d104      	bne.n	80039de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039d4:	f7fe f994 	bl	8001d00 <HAL_RCC_GetPCLK2Freq>
 80039d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039dc:	e003      	b.n	80039e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039de:	f7fe f97b 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 80039e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f0:	f040 810c 	bne.w	8003c0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a06:	4622      	mov	r2, r4
 8003a08:	462b      	mov	r3, r5
 8003a0a:	1891      	adds	r1, r2, r2
 8003a0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a0e:	415b      	adcs	r3, r3
 8003a10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a16:	4621      	mov	r1, r4
 8003a18:	eb12 0801 	adds.w	r8, r2, r1
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	eb43 0901 	adc.w	r9, r3, r1
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a36:	4690      	mov	r8, r2
 8003a38:	4699      	mov	r9, r3
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	eb18 0303 	adds.w	r3, r8, r3
 8003a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a44:	462b      	mov	r3, r5
 8003a46:	eb49 0303 	adc.w	r3, r9, r3
 8003a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a62:	460b      	mov	r3, r1
 8003a64:	18db      	adds	r3, r3, r3
 8003a66:	653b      	str	r3, [r7, #80]	; 0x50
 8003a68:	4613      	mov	r3, r2
 8003a6a:	eb42 0303 	adc.w	r3, r2, r3
 8003a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a78:	f7fc fc1a 	bl	80002b0 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4b61      	ldr	r3, [pc, #388]	; (8003c08 <UART_SetConfig+0x2d4>)
 8003a82:	fba3 2302 	umull	r2, r3, r3, r2
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	011c      	lsls	r4, r3, #4
 8003a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	1891      	adds	r1, r2, r2
 8003aa2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003aa4:	415b      	adcs	r3, r3
 8003aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003aac:	4641      	mov	r1, r8
 8003aae:	eb12 0a01 	adds.w	sl, r2, r1
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ac4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003acc:	4692      	mov	sl, r2
 8003ace:	469b      	mov	fp, r3
 8003ad0:	4643      	mov	r3, r8
 8003ad2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ada:	464b      	mov	r3, r9
 8003adc:	eb4b 0303 	adc.w	r3, fp, r3
 8003ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003af0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003af4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003af8:	460b      	mov	r3, r1
 8003afa:	18db      	adds	r3, r3, r3
 8003afc:	643b      	str	r3, [r7, #64]	; 0x40
 8003afe:	4613      	mov	r3, r2
 8003b00:	eb42 0303 	adc.w	r3, r2, r3
 8003b04:	647b      	str	r3, [r7, #68]	; 0x44
 8003b06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b0e:	f7fc fbcf 	bl	80002b0 <__aeabi_uldivmod>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4611      	mov	r1, r2
 8003b18:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <UART_SetConfig+0x2d4>)
 8003b1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	2264      	movs	r2, #100	; 0x64
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	1acb      	subs	r3, r1, r3
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b2e:	4b36      	ldr	r3, [pc, #216]	; (8003c08 <UART_SetConfig+0x2d4>)
 8003b30:	fba3 2302 	umull	r2, r3, r3, r2
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b3c:	441c      	add	r4, r3
 8003b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b50:	4642      	mov	r2, r8
 8003b52:	464b      	mov	r3, r9
 8003b54:	1891      	adds	r1, r2, r2
 8003b56:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b58:	415b      	adcs	r3, r3
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b60:	4641      	mov	r1, r8
 8003b62:	1851      	adds	r1, r2, r1
 8003b64:	6339      	str	r1, [r7, #48]	; 0x30
 8003b66:	4649      	mov	r1, r9
 8003b68:	414b      	adcs	r3, r1
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b78:	4659      	mov	r1, fp
 8003b7a:	00cb      	lsls	r3, r1, #3
 8003b7c:	4651      	mov	r1, sl
 8003b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b82:	4651      	mov	r1, sl
 8003b84:	00ca      	lsls	r2, r1, #3
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b94:	464b      	mov	r3, r9
 8003b96:	460a      	mov	r2, r1
 8003b98:	eb42 0303 	adc.w	r3, r2, r3
 8003b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	18db      	adds	r3, r3, r3
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bba:	4613      	mov	r3, r2
 8003bbc:	eb42 0303 	adc.w	r3, r2, r3
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bca:	f7fc fb71 	bl	80002b0 <__aeabi_uldivmod>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <UART_SetConfig+0x2d4>)
 8003bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	2164      	movs	r1, #100	; 0x64
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	3332      	adds	r3, #50	; 0x32
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <UART_SetConfig+0x2d4>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	f003 0207 	and.w	r2, r3, #7
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4422      	add	r2, r4
 8003bfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bfc:	e106      	b.n	8003e0c <UART_SetConfig+0x4d8>
 8003bfe:	bf00      	nop
 8003c00:	40011000 	.word	0x40011000
 8003c04:	40011400 	.word	0x40011400
 8003c08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c1e:	4642      	mov	r2, r8
 8003c20:	464b      	mov	r3, r9
 8003c22:	1891      	adds	r1, r2, r2
 8003c24:	6239      	str	r1, [r7, #32]
 8003c26:	415b      	adcs	r3, r3
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c2e:	4641      	mov	r1, r8
 8003c30:	1854      	adds	r4, r2, r1
 8003c32:	4649      	mov	r1, r9
 8003c34:	eb43 0501 	adc.w	r5, r3, r1
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	00eb      	lsls	r3, r5, #3
 8003c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c46:	00e2      	lsls	r2, r4, #3
 8003c48:	4614      	mov	r4, r2
 8003c4a:	461d      	mov	r5, r3
 8003c4c:	4643      	mov	r3, r8
 8003c4e:	18e3      	adds	r3, r4, r3
 8003c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c54:	464b      	mov	r3, r9
 8003c56:	eb45 0303 	adc.w	r3, r5, r3
 8003c5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	008b      	lsls	r3, r1, #2
 8003c7e:	4621      	mov	r1, r4
 8003c80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c84:	4621      	mov	r1, r4
 8003c86:	008a      	lsls	r2, r1, #2
 8003c88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c8c:	f7fc fb10 	bl	80002b0 <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4b60      	ldr	r3, [pc, #384]	; (8003e18 <UART_SetConfig+0x4e4>)
 8003c96:	fba3 2302 	umull	r2, r3, r3, r2
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	011c      	lsls	r4, r3, #4
 8003c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ca8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	1891      	adds	r1, r2, r2
 8003cb6:	61b9      	str	r1, [r7, #24]
 8003cb8:	415b      	adcs	r3, r3
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	1851      	adds	r1, r2, r1
 8003cc4:	6139      	str	r1, [r7, #16]
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	414b      	adcs	r3, r1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cd8:	4659      	mov	r1, fp
 8003cda:	00cb      	lsls	r3, r1, #3
 8003cdc:	4651      	mov	r1, sl
 8003cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ce2:	4651      	mov	r1, sl
 8003ce4:	00ca      	lsls	r2, r1, #3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	4642      	mov	r2, r8
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cf4:	464b      	mov	r3, r9
 8003cf6:	460a      	mov	r2, r1
 8003cf8:	eb42 0303 	adc.w	r3, r2, r3
 8003cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d18:	4649      	mov	r1, r9
 8003d1a:	008b      	lsls	r3, r1, #2
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d22:	4641      	mov	r1, r8
 8003d24:	008a      	lsls	r2, r1, #2
 8003d26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d2a:	f7fc fac1 	bl	80002b0 <__aeabi_uldivmod>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <UART_SetConfig+0x4e4>)
 8003d36:	fba3 2301 	umull	r2, r3, r3, r1
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2264      	movs	r2, #100	; 0x64
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	1acb      	subs	r3, r1, r3
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	3332      	adds	r3, #50	; 0x32
 8003d48:	4a33      	ldr	r2, [pc, #204]	; (8003e18 <UART_SetConfig+0x4e4>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d54:	441c      	add	r4, r3
 8003d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	673b      	str	r3, [r7, #112]	; 0x70
 8003d5e:	677a      	str	r2, [r7, #116]	; 0x74
 8003d60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d64:	4642      	mov	r2, r8
 8003d66:	464b      	mov	r3, r9
 8003d68:	1891      	adds	r1, r2, r2
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	415b      	adcs	r3, r3
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d74:	4641      	mov	r1, r8
 8003d76:	1851      	adds	r1, r2, r1
 8003d78:	6039      	str	r1, [r7, #0]
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	414b      	adcs	r3, r1
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d8c:	4659      	mov	r1, fp
 8003d8e:	00cb      	lsls	r3, r1, #3
 8003d90:	4651      	mov	r1, sl
 8003d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d96:	4651      	mov	r1, sl
 8003d98:	00ca      	lsls	r2, r1, #3
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4642      	mov	r2, r8
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003da6:	464b      	mov	r3, r9
 8003da8:	460a      	mov	r2, r1
 8003daa:	eb42 0303 	adc.w	r3, r2, r3
 8003dae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	663b      	str	r3, [r7, #96]	; 0x60
 8003dba:	667a      	str	r2, [r7, #100]	; 0x64
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dc8:	4649      	mov	r1, r9
 8003dca:	008b      	lsls	r3, r1, #2
 8003dcc:	4641      	mov	r1, r8
 8003dce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	008a      	lsls	r2, r1, #2
 8003dd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dda:	f7fc fa69 	bl	80002b0 <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <UART_SetConfig+0x4e4>)
 8003de4:	fba3 1302 	umull	r1, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	2164      	movs	r1, #100	; 0x64
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	3332      	adds	r3, #50	; 0x32
 8003df6:	4a08      	ldr	r2, [pc, #32]	; (8003e18 <UART_SetConfig+0x4e4>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	f003 020f 	and.w	r2, r3, #15
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4422      	add	r2, r4
 8003e0a:	609a      	str	r2, [r3, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e12:	46bd      	mov	sp, r7
 8003e14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e18:	51eb851f 	.word	0x51eb851f

08003e1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	f107 001c 	add.w	r0, r7, #28
 8003e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e2e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d123      	bne.n	8003e7e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa9a 	bl	80043ac <USB_CoreReset>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]
 8003e7c:	e01b      	b.n	8003eb6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa8e 	bl	80043ac <USB_CoreReset>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ea8:	e005      	b.n	8003eb6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003eb6:	7fbb      	ldrb	r3, [r7, #30]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d10b      	bne.n	8003ed4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f043 0206 	orr.w	r2, r3, #6
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ee0:	b004      	add	sp, #16
 8003ee2:	4770      	bx	lr

08003ee4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f023 0201 	bic.w	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d115      	bne.n	8003f54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003f34:	200a      	movs	r0, #10
 8003f36:	f7fd f8ab 	bl	8001090 <HAL_Delay>
      ms += 10U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	330a      	adds	r3, #10
 8003f3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fa25 	bl	8004390 <USB_GetMode>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d01e      	beq.n	8003f8a <USB_SetCurrentMode+0x84>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2bc7      	cmp	r3, #199	; 0xc7
 8003f50:	d9f0      	bls.n	8003f34 <USB_SetCurrentMode+0x2e>
 8003f52:	e01a      	b.n	8003f8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d115      	bne.n	8003f86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003f66:	200a      	movs	r0, #10
 8003f68:	f7fd f892 	bl	8001090 <HAL_Delay>
      ms += 10U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	330a      	adds	r3, #10
 8003f70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fa0c 	bl	8004390 <USB_GetMode>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <USB_SetCurrentMode+0x84>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2bc7      	cmp	r3, #199	; 0xc7
 8003f82:	d9f0      	bls.n	8003f66 <USB_SetCurrentMode+0x60>
 8003f84:	e001      	b.n	8003f8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e005      	b.n	8003f96 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2bc8      	cmp	r3, #200	; 0xc8
 8003f8e:	d101      	bne.n	8003f94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	e009      	b.n	8003fd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	3340      	adds	r3, #64	; 0x40
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	2200      	movs	r2, #0
 8003fcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	2b0e      	cmp	r3, #14
 8003fd8:	d9f2      	bls.n	8003fc0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003fda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11c      	bne.n	800401c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e005      	b.n	8004028 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800402e:	461a      	mov	r2, r3
 8004030:	2300      	movs	r3, #0
 8004032:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004034:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004038:	2b01      	cmp	r3, #1
 800403a:	d10d      	bne.n	8004058 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800403c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004040:	2b00      	cmp	r3, #0
 8004042:	d104      	bne.n	800404e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004044:	2100      	movs	r1, #0
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f968 	bl	800431c <USB_SetDevSpeed>
 800404c:	e008      	b.n	8004060 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800404e:	2101      	movs	r1, #1
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f963 	bl	800431c <USB_SetDevSpeed>
 8004056:	e003      	b.n	8004060 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004058:	2103      	movs	r1, #3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f95e 	bl	800431c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004060:	2110      	movs	r1, #16
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f8fa 	bl	800425c <USB_FlushTxFifo>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f924 	bl	80042c0 <USB_FlushRxFifo>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004088:	461a      	mov	r2, r3
 800408a:	2300      	movs	r3, #0
 800408c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004094:	461a      	mov	r2, r3
 8004096:	2300      	movs	r3, #0
 8004098:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a0:	461a      	mov	r2, r3
 80040a2:	2300      	movs	r3, #0
 80040a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	e043      	b.n	8004134 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040c2:	d118      	bne.n	80040f6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d6:	461a      	mov	r2, r3
 80040d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e013      	b.n	8004108 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ec:	461a      	mov	r2, r3
 80040ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	e008      	b.n	8004108 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004102:	461a      	mov	r2, r3
 8004104:	2300      	movs	r3, #0
 8004106:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004114:	461a      	mov	r2, r3
 8004116:	2300      	movs	r3, #0
 8004118:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004126:	461a      	mov	r2, r3
 8004128:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800412c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	3301      	adds	r3, #1
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004138:	461a      	mov	r2, r3
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4293      	cmp	r3, r2
 800413e:	d3b5      	bcc.n	80040ac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	e043      	b.n	80041ce <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800415c:	d118      	bne.n	8004190 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	461a      	mov	r2, r3
 8004172:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	e013      	b.n	80041a2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004186:	461a      	mov	r2, r3
 8004188:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e008      	b.n	80041a2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419c:	461a      	mov	r2, r3
 800419e:	2300      	movs	r3, #0
 80041a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ae:	461a      	mov	r2, r3
 80041b0:	2300      	movs	r3, #0
 80041b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	3301      	adds	r3, #1
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041d2:	461a      	mov	r2, r3
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d3b5      	bcc.n	8004146 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f043 0210 	orr.w	r2, r3, #16
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <USB_DevInit+0x2b8>)
 8004216:	4313      	orrs	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800421c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f043 0208 	orr.w	r2, r3, #8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004230:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004234:	2b01      	cmp	r3, #1
 8004236:	d107      	bne.n	8004248 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004240:	f043 0304 	orr.w	r3, r3, #4
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004248:	7dfb      	ldrb	r3, [r7, #23]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004254:	b004      	add	sp, #16
 8004256:	4770      	bx	lr
 8004258:	803c3800 	.word	0x803c3800

0800425c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3301      	adds	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004276:	d901      	bls.n	800427c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e01b      	b.n	80042b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	daf2      	bge.n	800426a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	019b      	lsls	r3, r3, #6
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3301      	adds	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80042a0:	d901      	bls.n	80042a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e006      	b.n	80042b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d0f0      	beq.n	8004294 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3301      	adds	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80042d8:	d901      	bls.n	80042de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e018      	b.n	8004310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	daf2      	bge.n	80042cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2210      	movs	r2, #16
 80042ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80042fc:	d901      	bls.n	8004302 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e006      	b.n	8004310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0310 	and.w	r3, r3, #16
 800430a:	2b10      	cmp	r3, #16
 800430c:	d0f0      	beq.n	80042f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	68f9      	ldr	r1, [r7, #12]
 8004338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800433c:	4313      	orrs	r3, r2
 800433e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004368:	f023 0303 	bic.w	r3, r3, #3
 800436c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437c:	f043 0302 	orr.w	r3, r3, #2
 8004380:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f003 0301 	and.w	r3, r3, #1
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3301      	adds	r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80043c4:	d901      	bls.n	80043ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e01b      	b.n	8004402 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	daf2      	bge.n	80043b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f043 0201 	orr.w	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80043ee:	d901      	bls.n	80043f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e006      	b.n	8004402 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d0f0      	beq.n	80043e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <siprintf>:
 8004410:	b40e      	push	{r1, r2, r3}
 8004412:	b500      	push	{lr}
 8004414:	b09c      	sub	sp, #112	; 0x70
 8004416:	ab1d      	add	r3, sp, #116	; 0x74
 8004418:	9002      	str	r0, [sp, #8]
 800441a:	9006      	str	r0, [sp, #24]
 800441c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004420:	4809      	ldr	r0, [pc, #36]	; (8004448 <siprintf+0x38>)
 8004422:	9107      	str	r1, [sp, #28]
 8004424:	9104      	str	r1, [sp, #16]
 8004426:	4909      	ldr	r1, [pc, #36]	; (800444c <siprintf+0x3c>)
 8004428:	f853 2b04 	ldr.w	r2, [r3], #4
 800442c:	9105      	str	r1, [sp, #20]
 800442e:	6800      	ldr	r0, [r0, #0]
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	a902      	add	r1, sp, #8
 8004434:	f000 f992 	bl	800475c <_svfiprintf_r>
 8004438:	9b02      	ldr	r3, [sp, #8]
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	b01c      	add	sp, #112	; 0x70
 8004440:	f85d eb04 	ldr.w	lr, [sp], #4
 8004444:	b003      	add	sp, #12
 8004446:	4770      	bx	lr
 8004448:	20000058 	.word	0x20000058
 800444c:	ffff0208 	.word	0xffff0208

08004450 <memset>:
 8004450:	4402      	add	r2, r0
 8004452:	4603      	mov	r3, r0
 8004454:	4293      	cmp	r3, r2
 8004456:	d100      	bne.n	800445a <memset+0xa>
 8004458:	4770      	bx	lr
 800445a:	f803 1b01 	strb.w	r1, [r3], #1
 800445e:	e7f9      	b.n	8004454 <memset+0x4>

08004460 <__errno>:
 8004460:	4b01      	ldr	r3, [pc, #4]	; (8004468 <__errno+0x8>)
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000058 	.word	0x20000058

0800446c <__libc_init_array>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	4d0d      	ldr	r5, [pc, #52]	; (80044a4 <__libc_init_array+0x38>)
 8004470:	4c0d      	ldr	r4, [pc, #52]	; (80044a8 <__libc_init_array+0x3c>)
 8004472:	1b64      	subs	r4, r4, r5
 8004474:	10a4      	asrs	r4, r4, #2
 8004476:	2600      	movs	r6, #0
 8004478:	42a6      	cmp	r6, r4
 800447a:	d109      	bne.n	8004490 <__libc_init_array+0x24>
 800447c:	4d0b      	ldr	r5, [pc, #44]	; (80044ac <__libc_init_array+0x40>)
 800447e:	4c0c      	ldr	r4, [pc, #48]	; (80044b0 <__libc_init_array+0x44>)
 8004480:	f000 fc6a 	bl	8004d58 <_init>
 8004484:	1b64      	subs	r4, r4, r5
 8004486:	10a4      	asrs	r4, r4, #2
 8004488:	2600      	movs	r6, #0
 800448a:	42a6      	cmp	r6, r4
 800448c:	d105      	bne.n	800449a <__libc_init_array+0x2e>
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	f855 3b04 	ldr.w	r3, [r5], #4
 8004494:	4798      	blx	r3
 8004496:	3601      	adds	r6, #1
 8004498:	e7ee      	b.n	8004478 <__libc_init_array+0xc>
 800449a:	f855 3b04 	ldr.w	r3, [r5], #4
 800449e:	4798      	blx	r3
 80044a0:	3601      	adds	r6, #1
 80044a2:	e7f2      	b.n	800448a <__libc_init_array+0x1e>
 80044a4:	08023060 	.word	0x08023060
 80044a8:	08023060 	.word	0x08023060
 80044ac:	08023060 	.word	0x08023060
 80044b0:	08023064 	.word	0x08023064

080044b4 <__retarget_lock_acquire_recursive>:
 80044b4:	4770      	bx	lr

080044b6 <__retarget_lock_release_recursive>:
 80044b6:	4770      	bx	lr

080044b8 <_free_r>:
 80044b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044ba:	2900      	cmp	r1, #0
 80044bc:	d044      	beq.n	8004548 <_free_r+0x90>
 80044be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c2:	9001      	str	r0, [sp, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f1a1 0404 	sub.w	r4, r1, #4
 80044ca:	bfb8      	it	lt
 80044cc:	18e4      	addlt	r4, r4, r3
 80044ce:	f000 f8df 	bl	8004690 <__malloc_lock>
 80044d2:	4a1e      	ldr	r2, [pc, #120]	; (800454c <_free_r+0x94>)
 80044d4:	9801      	ldr	r0, [sp, #4]
 80044d6:	6813      	ldr	r3, [r2, #0]
 80044d8:	b933      	cbnz	r3, 80044e8 <_free_r+0x30>
 80044da:	6063      	str	r3, [r4, #4]
 80044dc:	6014      	str	r4, [r2, #0]
 80044de:	b003      	add	sp, #12
 80044e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044e4:	f000 b8da 	b.w	800469c <__malloc_unlock>
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	d908      	bls.n	80044fe <_free_r+0x46>
 80044ec:	6825      	ldr	r5, [r4, #0]
 80044ee:	1961      	adds	r1, r4, r5
 80044f0:	428b      	cmp	r3, r1
 80044f2:	bf01      	itttt	eq
 80044f4:	6819      	ldreq	r1, [r3, #0]
 80044f6:	685b      	ldreq	r3, [r3, #4]
 80044f8:	1949      	addeq	r1, r1, r5
 80044fa:	6021      	streq	r1, [r4, #0]
 80044fc:	e7ed      	b.n	80044da <_free_r+0x22>
 80044fe:	461a      	mov	r2, r3
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	b10b      	cbz	r3, 8004508 <_free_r+0x50>
 8004504:	42a3      	cmp	r3, r4
 8004506:	d9fa      	bls.n	80044fe <_free_r+0x46>
 8004508:	6811      	ldr	r1, [r2, #0]
 800450a:	1855      	adds	r5, r2, r1
 800450c:	42a5      	cmp	r5, r4
 800450e:	d10b      	bne.n	8004528 <_free_r+0x70>
 8004510:	6824      	ldr	r4, [r4, #0]
 8004512:	4421      	add	r1, r4
 8004514:	1854      	adds	r4, r2, r1
 8004516:	42a3      	cmp	r3, r4
 8004518:	6011      	str	r1, [r2, #0]
 800451a:	d1e0      	bne.n	80044de <_free_r+0x26>
 800451c:	681c      	ldr	r4, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	6053      	str	r3, [r2, #4]
 8004522:	440c      	add	r4, r1
 8004524:	6014      	str	r4, [r2, #0]
 8004526:	e7da      	b.n	80044de <_free_r+0x26>
 8004528:	d902      	bls.n	8004530 <_free_r+0x78>
 800452a:	230c      	movs	r3, #12
 800452c:	6003      	str	r3, [r0, #0]
 800452e:	e7d6      	b.n	80044de <_free_r+0x26>
 8004530:	6825      	ldr	r5, [r4, #0]
 8004532:	1961      	adds	r1, r4, r5
 8004534:	428b      	cmp	r3, r1
 8004536:	bf04      	itt	eq
 8004538:	6819      	ldreq	r1, [r3, #0]
 800453a:	685b      	ldreq	r3, [r3, #4]
 800453c:	6063      	str	r3, [r4, #4]
 800453e:	bf04      	itt	eq
 8004540:	1949      	addeq	r1, r1, r5
 8004542:	6021      	streq	r1, [r4, #0]
 8004544:	6054      	str	r4, [r2, #4]
 8004546:	e7ca      	b.n	80044de <_free_r+0x26>
 8004548:	b003      	add	sp, #12
 800454a:	bd30      	pop	{r4, r5, pc}
 800454c:	20000750 	.word	0x20000750

08004550 <sbrk_aligned>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	4e0e      	ldr	r6, [pc, #56]	; (800458c <sbrk_aligned+0x3c>)
 8004554:	460c      	mov	r4, r1
 8004556:	6831      	ldr	r1, [r6, #0]
 8004558:	4605      	mov	r5, r0
 800455a:	b911      	cbnz	r1, 8004562 <sbrk_aligned+0x12>
 800455c:	f000 fba6 	bl	8004cac <_sbrk_r>
 8004560:	6030      	str	r0, [r6, #0]
 8004562:	4621      	mov	r1, r4
 8004564:	4628      	mov	r0, r5
 8004566:	f000 fba1 	bl	8004cac <_sbrk_r>
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	d00a      	beq.n	8004584 <sbrk_aligned+0x34>
 800456e:	1cc4      	adds	r4, r0, #3
 8004570:	f024 0403 	bic.w	r4, r4, #3
 8004574:	42a0      	cmp	r0, r4
 8004576:	d007      	beq.n	8004588 <sbrk_aligned+0x38>
 8004578:	1a21      	subs	r1, r4, r0
 800457a:	4628      	mov	r0, r5
 800457c:	f000 fb96 	bl	8004cac <_sbrk_r>
 8004580:	3001      	adds	r0, #1
 8004582:	d101      	bne.n	8004588 <sbrk_aligned+0x38>
 8004584:	f04f 34ff 	mov.w	r4, #4294967295
 8004588:	4620      	mov	r0, r4
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	20000754 	.word	0x20000754

08004590 <_malloc_r>:
 8004590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004594:	1ccd      	adds	r5, r1, #3
 8004596:	f025 0503 	bic.w	r5, r5, #3
 800459a:	3508      	adds	r5, #8
 800459c:	2d0c      	cmp	r5, #12
 800459e:	bf38      	it	cc
 80045a0:	250c      	movcc	r5, #12
 80045a2:	2d00      	cmp	r5, #0
 80045a4:	4607      	mov	r7, r0
 80045a6:	db01      	blt.n	80045ac <_malloc_r+0x1c>
 80045a8:	42a9      	cmp	r1, r5
 80045aa:	d905      	bls.n	80045b8 <_malloc_r+0x28>
 80045ac:	230c      	movs	r3, #12
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	2600      	movs	r6, #0
 80045b2:	4630      	mov	r0, r6
 80045b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800468c <_malloc_r+0xfc>
 80045bc:	f000 f868 	bl	8004690 <__malloc_lock>
 80045c0:	f8d8 3000 	ldr.w	r3, [r8]
 80045c4:	461c      	mov	r4, r3
 80045c6:	bb5c      	cbnz	r4, 8004620 <_malloc_r+0x90>
 80045c8:	4629      	mov	r1, r5
 80045ca:	4638      	mov	r0, r7
 80045cc:	f7ff ffc0 	bl	8004550 <sbrk_aligned>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	4604      	mov	r4, r0
 80045d4:	d155      	bne.n	8004682 <_malloc_r+0xf2>
 80045d6:	f8d8 4000 	ldr.w	r4, [r8]
 80045da:	4626      	mov	r6, r4
 80045dc:	2e00      	cmp	r6, #0
 80045de:	d145      	bne.n	800466c <_malloc_r+0xdc>
 80045e0:	2c00      	cmp	r4, #0
 80045e2:	d048      	beq.n	8004676 <_malloc_r+0xe6>
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	4631      	mov	r1, r6
 80045e8:	4638      	mov	r0, r7
 80045ea:	eb04 0903 	add.w	r9, r4, r3
 80045ee:	f000 fb5d 	bl	8004cac <_sbrk_r>
 80045f2:	4581      	cmp	r9, r0
 80045f4:	d13f      	bne.n	8004676 <_malloc_r+0xe6>
 80045f6:	6821      	ldr	r1, [r4, #0]
 80045f8:	1a6d      	subs	r5, r5, r1
 80045fa:	4629      	mov	r1, r5
 80045fc:	4638      	mov	r0, r7
 80045fe:	f7ff ffa7 	bl	8004550 <sbrk_aligned>
 8004602:	3001      	adds	r0, #1
 8004604:	d037      	beq.n	8004676 <_malloc_r+0xe6>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	442b      	add	r3, r5
 800460a:	6023      	str	r3, [r4, #0]
 800460c:	f8d8 3000 	ldr.w	r3, [r8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d038      	beq.n	8004686 <_malloc_r+0xf6>
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	42a2      	cmp	r2, r4
 8004618:	d12b      	bne.n	8004672 <_malloc_r+0xe2>
 800461a:	2200      	movs	r2, #0
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	e00f      	b.n	8004640 <_malloc_r+0xb0>
 8004620:	6822      	ldr	r2, [r4, #0]
 8004622:	1b52      	subs	r2, r2, r5
 8004624:	d41f      	bmi.n	8004666 <_malloc_r+0xd6>
 8004626:	2a0b      	cmp	r2, #11
 8004628:	d917      	bls.n	800465a <_malloc_r+0xca>
 800462a:	1961      	adds	r1, r4, r5
 800462c:	42a3      	cmp	r3, r4
 800462e:	6025      	str	r5, [r4, #0]
 8004630:	bf18      	it	ne
 8004632:	6059      	strne	r1, [r3, #4]
 8004634:	6863      	ldr	r3, [r4, #4]
 8004636:	bf08      	it	eq
 8004638:	f8c8 1000 	streq.w	r1, [r8]
 800463c:	5162      	str	r2, [r4, r5]
 800463e:	604b      	str	r3, [r1, #4]
 8004640:	4638      	mov	r0, r7
 8004642:	f104 060b 	add.w	r6, r4, #11
 8004646:	f000 f829 	bl	800469c <__malloc_unlock>
 800464a:	f026 0607 	bic.w	r6, r6, #7
 800464e:	1d23      	adds	r3, r4, #4
 8004650:	1af2      	subs	r2, r6, r3
 8004652:	d0ae      	beq.n	80045b2 <_malloc_r+0x22>
 8004654:	1b9b      	subs	r3, r3, r6
 8004656:	50a3      	str	r3, [r4, r2]
 8004658:	e7ab      	b.n	80045b2 <_malloc_r+0x22>
 800465a:	42a3      	cmp	r3, r4
 800465c:	6862      	ldr	r2, [r4, #4]
 800465e:	d1dd      	bne.n	800461c <_malloc_r+0x8c>
 8004660:	f8c8 2000 	str.w	r2, [r8]
 8004664:	e7ec      	b.n	8004640 <_malloc_r+0xb0>
 8004666:	4623      	mov	r3, r4
 8004668:	6864      	ldr	r4, [r4, #4]
 800466a:	e7ac      	b.n	80045c6 <_malloc_r+0x36>
 800466c:	4634      	mov	r4, r6
 800466e:	6876      	ldr	r6, [r6, #4]
 8004670:	e7b4      	b.n	80045dc <_malloc_r+0x4c>
 8004672:	4613      	mov	r3, r2
 8004674:	e7cc      	b.n	8004610 <_malloc_r+0x80>
 8004676:	230c      	movs	r3, #12
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	4638      	mov	r0, r7
 800467c:	f000 f80e 	bl	800469c <__malloc_unlock>
 8004680:	e797      	b.n	80045b2 <_malloc_r+0x22>
 8004682:	6025      	str	r5, [r4, #0]
 8004684:	e7dc      	b.n	8004640 <_malloc_r+0xb0>
 8004686:	605b      	str	r3, [r3, #4]
 8004688:	deff      	udf	#255	; 0xff
 800468a:	bf00      	nop
 800468c:	20000750 	.word	0x20000750

08004690 <__malloc_lock>:
 8004690:	4801      	ldr	r0, [pc, #4]	; (8004698 <__malloc_lock+0x8>)
 8004692:	f7ff bf0f 	b.w	80044b4 <__retarget_lock_acquire_recursive>
 8004696:	bf00      	nop
 8004698:	2000074c 	.word	0x2000074c

0800469c <__malloc_unlock>:
 800469c:	4801      	ldr	r0, [pc, #4]	; (80046a4 <__malloc_unlock+0x8>)
 800469e:	f7ff bf0a 	b.w	80044b6 <__retarget_lock_release_recursive>
 80046a2:	bf00      	nop
 80046a4:	2000074c 	.word	0x2000074c

080046a8 <__ssputs_r>:
 80046a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ac:	688e      	ldr	r6, [r1, #8]
 80046ae:	461f      	mov	r7, r3
 80046b0:	42be      	cmp	r6, r7
 80046b2:	680b      	ldr	r3, [r1, #0]
 80046b4:	4682      	mov	sl, r0
 80046b6:	460c      	mov	r4, r1
 80046b8:	4690      	mov	r8, r2
 80046ba:	d82c      	bhi.n	8004716 <__ssputs_r+0x6e>
 80046bc:	898a      	ldrh	r2, [r1, #12]
 80046be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046c2:	d026      	beq.n	8004712 <__ssputs_r+0x6a>
 80046c4:	6965      	ldr	r5, [r4, #20]
 80046c6:	6909      	ldr	r1, [r1, #16]
 80046c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046cc:	eba3 0901 	sub.w	r9, r3, r1
 80046d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046d4:	1c7b      	adds	r3, r7, #1
 80046d6:	444b      	add	r3, r9
 80046d8:	106d      	asrs	r5, r5, #1
 80046da:	429d      	cmp	r5, r3
 80046dc:	bf38      	it	cc
 80046de:	461d      	movcc	r5, r3
 80046e0:	0553      	lsls	r3, r2, #21
 80046e2:	d527      	bpl.n	8004734 <__ssputs_r+0x8c>
 80046e4:	4629      	mov	r1, r5
 80046e6:	f7ff ff53 	bl	8004590 <_malloc_r>
 80046ea:	4606      	mov	r6, r0
 80046ec:	b360      	cbz	r0, 8004748 <__ssputs_r+0xa0>
 80046ee:	6921      	ldr	r1, [r4, #16]
 80046f0:	464a      	mov	r2, r9
 80046f2:	f000 faeb 	bl	8004ccc <memcpy>
 80046f6:	89a3      	ldrh	r3, [r4, #12]
 80046f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004700:	81a3      	strh	r3, [r4, #12]
 8004702:	6126      	str	r6, [r4, #16]
 8004704:	6165      	str	r5, [r4, #20]
 8004706:	444e      	add	r6, r9
 8004708:	eba5 0509 	sub.w	r5, r5, r9
 800470c:	6026      	str	r6, [r4, #0]
 800470e:	60a5      	str	r5, [r4, #8]
 8004710:	463e      	mov	r6, r7
 8004712:	42be      	cmp	r6, r7
 8004714:	d900      	bls.n	8004718 <__ssputs_r+0x70>
 8004716:	463e      	mov	r6, r7
 8004718:	6820      	ldr	r0, [r4, #0]
 800471a:	4632      	mov	r2, r6
 800471c:	4641      	mov	r1, r8
 800471e:	f000 faab 	bl	8004c78 <memmove>
 8004722:	68a3      	ldr	r3, [r4, #8]
 8004724:	1b9b      	subs	r3, r3, r6
 8004726:	60a3      	str	r3, [r4, #8]
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	4433      	add	r3, r6
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	2000      	movs	r0, #0
 8004730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004734:	462a      	mov	r2, r5
 8004736:	f000 fad7 	bl	8004ce8 <_realloc_r>
 800473a:	4606      	mov	r6, r0
 800473c:	2800      	cmp	r0, #0
 800473e:	d1e0      	bne.n	8004702 <__ssputs_r+0x5a>
 8004740:	6921      	ldr	r1, [r4, #16]
 8004742:	4650      	mov	r0, sl
 8004744:	f7ff feb8 	bl	80044b8 <_free_r>
 8004748:	230c      	movs	r3, #12
 800474a:	f8ca 3000 	str.w	r3, [sl]
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004754:	81a3      	strh	r3, [r4, #12]
 8004756:	f04f 30ff 	mov.w	r0, #4294967295
 800475a:	e7e9      	b.n	8004730 <__ssputs_r+0x88>

0800475c <_svfiprintf_r>:
 800475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004760:	4698      	mov	r8, r3
 8004762:	898b      	ldrh	r3, [r1, #12]
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	b09d      	sub	sp, #116	; 0x74
 8004768:	4607      	mov	r7, r0
 800476a:	460d      	mov	r5, r1
 800476c:	4614      	mov	r4, r2
 800476e:	d50e      	bpl.n	800478e <_svfiprintf_r+0x32>
 8004770:	690b      	ldr	r3, [r1, #16]
 8004772:	b963      	cbnz	r3, 800478e <_svfiprintf_r+0x32>
 8004774:	2140      	movs	r1, #64	; 0x40
 8004776:	f7ff ff0b 	bl	8004590 <_malloc_r>
 800477a:	6028      	str	r0, [r5, #0]
 800477c:	6128      	str	r0, [r5, #16]
 800477e:	b920      	cbnz	r0, 800478a <_svfiprintf_r+0x2e>
 8004780:	230c      	movs	r3, #12
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	e0d0      	b.n	800492c <_svfiprintf_r+0x1d0>
 800478a:	2340      	movs	r3, #64	; 0x40
 800478c:	616b      	str	r3, [r5, #20]
 800478e:	2300      	movs	r3, #0
 8004790:	9309      	str	r3, [sp, #36]	; 0x24
 8004792:	2320      	movs	r3, #32
 8004794:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004798:	f8cd 800c 	str.w	r8, [sp, #12]
 800479c:	2330      	movs	r3, #48	; 0x30
 800479e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004944 <_svfiprintf_r+0x1e8>
 80047a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047a6:	f04f 0901 	mov.w	r9, #1
 80047aa:	4623      	mov	r3, r4
 80047ac:	469a      	mov	sl, r3
 80047ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047b2:	b10a      	cbz	r2, 80047b8 <_svfiprintf_r+0x5c>
 80047b4:	2a25      	cmp	r2, #37	; 0x25
 80047b6:	d1f9      	bne.n	80047ac <_svfiprintf_r+0x50>
 80047b8:	ebba 0b04 	subs.w	fp, sl, r4
 80047bc:	d00b      	beq.n	80047d6 <_svfiprintf_r+0x7a>
 80047be:	465b      	mov	r3, fp
 80047c0:	4622      	mov	r2, r4
 80047c2:	4629      	mov	r1, r5
 80047c4:	4638      	mov	r0, r7
 80047c6:	f7ff ff6f 	bl	80046a8 <__ssputs_r>
 80047ca:	3001      	adds	r0, #1
 80047cc:	f000 80a9 	beq.w	8004922 <_svfiprintf_r+0x1c6>
 80047d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047d2:	445a      	add	r2, fp
 80047d4:	9209      	str	r2, [sp, #36]	; 0x24
 80047d6:	f89a 3000 	ldrb.w	r3, [sl]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80a1 	beq.w	8004922 <_svfiprintf_r+0x1c6>
 80047e0:	2300      	movs	r3, #0
 80047e2:	f04f 32ff 	mov.w	r2, #4294967295
 80047e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ea:	f10a 0a01 	add.w	sl, sl, #1
 80047ee:	9304      	str	r3, [sp, #16]
 80047f0:	9307      	str	r3, [sp, #28]
 80047f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047f6:	931a      	str	r3, [sp, #104]	; 0x68
 80047f8:	4654      	mov	r4, sl
 80047fa:	2205      	movs	r2, #5
 80047fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004800:	4850      	ldr	r0, [pc, #320]	; (8004944 <_svfiprintf_r+0x1e8>)
 8004802:	f7fb fd05 	bl	8000210 <memchr>
 8004806:	9a04      	ldr	r2, [sp, #16]
 8004808:	b9d8      	cbnz	r0, 8004842 <_svfiprintf_r+0xe6>
 800480a:	06d0      	lsls	r0, r2, #27
 800480c:	bf44      	itt	mi
 800480e:	2320      	movmi	r3, #32
 8004810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004814:	0711      	lsls	r1, r2, #28
 8004816:	bf44      	itt	mi
 8004818:	232b      	movmi	r3, #43	; 0x2b
 800481a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800481e:	f89a 3000 	ldrb.w	r3, [sl]
 8004822:	2b2a      	cmp	r3, #42	; 0x2a
 8004824:	d015      	beq.n	8004852 <_svfiprintf_r+0xf6>
 8004826:	9a07      	ldr	r2, [sp, #28]
 8004828:	4654      	mov	r4, sl
 800482a:	2000      	movs	r0, #0
 800482c:	f04f 0c0a 	mov.w	ip, #10
 8004830:	4621      	mov	r1, r4
 8004832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004836:	3b30      	subs	r3, #48	; 0x30
 8004838:	2b09      	cmp	r3, #9
 800483a:	d94d      	bls.n	80048d8 <_svfiprintf_r+0x17c>
 800483c:	b1b0      	cbz	r0, 800486c <_svfiprintf_r+0x110>
 800483e:	9207      	str	r2, [sp, #28]
 8004840:	e014      	b.n	800486c <_svfiprintf_r+0x110>
 8004842:	eba0 0308 	sub.w	r3, r0, r8
 8004846:	fa09 f303 	lsl.w	r3, r9, r3
 800484a:	4313      	orrs	r3, r2
 800484c:	9304      	str	r3, [sp, #16]
 800484e:	46a2      	mov	sl, r4
 8004850:	e7d2      	b.n	80047f8 <_svfiprintf_r+0x9c>
 8004852:	9b03      	ldr	r3, [sp, #12]
 8004854:	1d19      	adds	r1, r3, #4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	9103      	str	r1, [sp, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfbb      	ittet	lt
 800485e:	425b      	neglt	r3, r3
 8004860:	f042 0202 	orrlt.w	r2, r2, #2
 8004864:	9307      	strge	r3, [sp, #28]
 8004866:	9307      	strlt	r3, [sp, #28]
 8004868:	bfb8      	it	lt
 800486a:	9204      	strlt	r2, [sp, #16]
 800486c:	7823      	ldrb	r3, [r4, #0]
 800486e:	2b2e      	cmp	r3, #46	; 0x2e
 8004870:	d10c      	bne.n	800488c <_svfiprintf_r+0x130>
 8004872:	7863      	ldrb	r3, [r4, #1]
 8004874:	2b2a      	cmp	r3, #42	; 0x2a
 8004876:	d134      	bne.n	80048e2 <_svfiprintf_r+0x186>
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	1d1a      	adds	r2, r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	9203      	str	r2, [sp, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	bfb8      	it	lt
 8004884:	f04f 33ff 	movlt.w	r3, #4294967295
 8004888:	3402      	adds	r4, #2
 800488a:	9305      	str	r3, [sp, #20]
 800488c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004954 <_svfiprintf_r+0x1f8>
 8004890:	7821      	ldrb	r1, [r4, #0]
 8004892:	2203      	movs	r2, #3
 8004894:	4650      	mov	r0, sl
 8004896:	f7fb fcbb 	bl	8000210 <memchr>
 800489a:	b138      	cbz	r0, 80048ac <_svfiprintf_r+0x150>
 800489c:	9b04      	ldr	r3, [sp, #16]
 800489e:	eba0 000a 	sub.w	r0, r0, sl
 80048a2:	2240      	movs	r2, #64	; 0x40
 80048a4:	4082      	lsls	r2, r0
 80048a6:	4313      	orrs	r3, r2
 80048a8:	3401      	adds	r4, #1
 80048aa:	9304      	str	r3, [sp, #16]
 80048ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048b0:	4825      	ldr	r0, [pc, #148]	; (8004948 <_svfiprintf_r+0x1ec>)
 80048b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048b6:	2206      	movs	r2, #6
 80048b8:	f7fb fcaa 	bl	8000210 <memchr>
 80048bc:	2800      	cmp	r0, #0
 80048be:	d038      	beq.n	8004932 <_svfiprintf_r+0x1d6>
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <_svfiprintf_r+0x1f0>)
 80048c2:	bb1b      	cbnz	r3, 800490c <_svfiprintf_r+0x1b0>
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	3307      	adds	r3, #7
 80048c8:	f023 0307 	bic.w	r3, r3, #7
 80048cc:	3308      	adds	r3, #8
 80048ce:	9303      	str	r3, [sp, #12]
 80048d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d2:	4433      	add	r3, r6
 80048d4:	9309      	str	r3, [sp, #36]	; 0x24
 80048d6:	e768      	b.n	80047aa <_svfiprintf_r+0x4e>
 80048d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80048dc:	460c      	mov	r4, r1
 80048de:	2001      	movs	r0, #1
 80048e0:	e7a6      	b.n	8004830 <_svfiprintf_r+0xd4>
 80048e2:	2300      	movs	r3, #0
 80048e4:	3401      	adds	r4, #1
 80048e6:	9305      	str	r3, [sp, #20]
 80048e8:	4619      	mov	r1, r3
 80048ea:	f04f 0c0a 	mov.w	ip, #10
 80048ee:	4620      	mov	r0, r4
 80048f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048f4:	3a30      	subs	r2, #48	; 0x30
 80048f6:	2a09      	cmp	r2, #9
 80048f8:	d903      	bls.n	8004902 <_svfiprintf_r+0x1a6>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0c6      	beq.n	800488c <_svfiprintf_r+0x130>
 80048fe:	9105      	str	r1, [sp, #20]
 8004900:	e7c4      	b.n	800488c <_svfiprintf_r+0x130>
 8004902:	fb0c 2101 	mla	r1, ip, r1, r2
 8004906:	4604      	mov	r4, r0
 8004908:	2301      	movs	r3, #1
 800490a:	e7f0      	b.n	80048ee <_svfiprintf_r+0x192>
 800490c:	ab03      	add	r3, sp, #12
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	462a      	mov	r2, r5
 8004912:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <_svfiprintf_r+0x1f4>)
 8004914:	a904      	add	r1, sp, #16
 8004916:	4638      	mov	r0, r7
 8004918:	f3af 8000 	nop.w
 800491c:	1c42      	adds	r2, r0, #1
 800491e:	4606      	mov	r6, r0
 8004920:	d1d6      	bne.n	80048d0 <_svfiprintf_r+0x174>
 8004922:	89ab      	ldrh	r3, [r5, #12]
 8004924:	065b      	lsls	r3, r3, #25
 8004926:	f53f af2d 	bmi.w	8004784 <_svfiprintf_r+0x28>
 800492a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800492c:	b01d      	add	sp, #116	; 0x74
 800492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004932:	ab03      	add	r3, sp, #12
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	462a      	mov	r2, r5
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <_svfiprintf_r+0x1f4>)
 800493a:	a904      	add	r1, sp, #16
 800493c:	4638      	mov	r0, r7
 800493e:	f000 f879 	bl	8004a34 <_printf_i>
 8004942:	e7eb      	b.n	800491c <_svfiprintf_r+0x1c0>
 8004944:	08023024 	.word	0x08023024
 8004948:	0802302e 	.word	0x0802302e
 800494c:	00000000 	.word	0x00000000
 8004950:	080046a9 	.word	0x080046a9
 8004954:	0802302a 	.word	0x0802302a

08004958 <_printf_common>:
 8004958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	4616      	mov	r6, r2
 800495e:	4699      	mov	r9, r3
 8004960:	688a      	ldr	r2, [r1, #8]
 8004962:	690b      	ldr	r3, [r1, #16]
 8004964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004968:	4293      	cmp	r3, r2
 800496a:	bfb8      	it	lt
 800496c:	4613      	movlt	r3, r2
 800496e:	6033      	str	r3, [r6, #0]
 8004970:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004974:	4607      	mov	r7, r0
 8004976:	460c      	mov	r4, r1
 8004978:	b10a      	cbz	r2, 800497e <_printf_common+0x26>
 800497a:	3301      	adds	r3, #1
 800497c:	6033      	str	r3, [r6, #0]
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	0699      	lsls	r1, r3, #26
 8004982:	bf42      	ittt	mi
 8004984:	6833      	ldrmi	r3, [r6, #0]
 8004986:	3302      	addmi	r3, #2
 8004988:	6033      	strmi	r3, [r6, #0]
 800498a:	6825      	ldr	r5, [r4, #0]
 800498c:	f015 0506 	ands.w	r5, r5, #6
 8004990:	d106      	bne.n	80049a0 <_printf_common+0x48>
 8004992:	f104 0a19 	add.w	sl, r4, #25
 8004996:	68e3      	ldr	r3, [r4, #12]
 8004998:	6832      	ldr	r2, [r6, #0]
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	42ab      	cmp	r3, r5
 800499e:	dc26      	bgt.n	80049ee <_printf_common+0x96>
 80049a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049a4:	1e13      	subs	r3, r2, #0
 80049a6:	6822      	ldr	r2, [r4, #0]
 80049a8:	bf18      	it	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	0692      	lsls	r2, r2, #26
 80049ae:	d42b      	bmi.n	8004a08 <_printf_common+0xb0>
 80049b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049b4:	4649      	mov	r1, r9
 80049b6:	4638      	mov	r0, r7
 80049b8:	47c0      	blx	r8
 80049ba:	3001      	adds	r0, #1
 80049bc:	d01e      	beq.n	80049fc <_printf_common+0xa4>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	6922      	ldr	r2, [r4, #16]
 80049c2:	f003 0306 	and.w	r3, r3, #6
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	bf02      	ittt	eq
 80049ca:	68e5      	ldreq	r5, [r4, #12]
 80049cc:	6833      	ldreq	r3, [r6, #0]
 80049ce:	1aed      	subeq	r5, r5, r3
 80049d0:	68a3      	ldr	r3, [r4, #8]
 80049d2:	bf0c      	ite	eq
 80049d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d8:	2500      	movne	r5, #0
 80049da:	4293      	cmp	r3, r2
 80049dc:	bfc4      	itt	gt
 80049de:	1a9b      	subgt	r3, r3, r2
 80049e0:	18ed      	addgt	r5, r5, r3
 80049e2:	2600      	movs	r6, #0
 80049e4:	341a      	adds	r4, #26
 80049e6:	42b5      	cmp	r5, r6
 80049e8:	d11a      	bne.n	8004a20 <_printf_common+0xc8>
 80049ea:	2000      	movs	r0, #0
 80049ec:	e008      	b.n	8004a00 <_printf_common+0xa8>
 80049ee:	2301      	movs	r3, #1
 80049f0:	4652      	mov	r2, sl
 80049f2:	4649      	mov	r1, r9
 80049f4:	4638      	mov	r0, r7
 80049f6:	47c0      	blx	r8
 80049f8:	3001      	adds	r0, #1
 80049fa:	d103      	bne.n	8004a04 <_printf_common+0xac>
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a04:	3501      	adds	r5, #1
 8004a06:	e7c6      	b.n	8004996 <_printf_common+0x3e>
 8004a08:	18e1      	adds	r1, r4, r3
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	2030      	movs	r0, #48	; 0x30
 8004a0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a12:	4422      	add	r2, r4
 8004a14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	e7c7      	b.n	80049b0 <_printf_common+0x58>
 8004a20:	2301      	movs	r3, #1
 8004a22:	4622      	mov	r2, r4
 8004a24:	4649      	mov	r1, r9
 8004a26:	4638      	mov	r0, r7
 8004a28:	47c0      	blx	r8
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d0e6      	beq.n	80049fc <_printf_common+0xa4>
 8004a2e:	3601      	adds	r6, #1
 8004a30:	e7d9      	b.n	80049e6 <_printf_common+0x8e>
	...

08004a34 <_printf_i>:
 8004a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a38:	7e0f      	ldrb	r7, [r1, #24]
 8004a3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a3c:	2f78      	cmp	r7, #120	; 0x78
 8004a3e:	4691      	mov	r9, r2
 8004a40:	4680      	mov	r8, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	469a      	mov	sl, r3
 8004a46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a4a:	d807      	bhi.n	8004a5c <_printf_i+0x28>
 8004a4c:	2f62      	cmp	r7, #98	; 0x62
 8004a4e:	d80a      	bhi.n	8004a66 <_printf_i+0x32>
 8004a50:	2f00      	cmp	r7, #0
 8004a52:	f000 80d4 	beq.w	8004bfe <_printf_i+0x1ca>
 8004a56:	2f58      	cmp	r7, #88	; 0x58
 8004a58:	f000 80c0 	beq.w	8004bdc <_printf_i+0x1a8>
 8004a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a64:	e03a      	b.n	8004adc <_printf_i+0xa8>
 8004a66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a6a:	2b15      	cmp	r3, #21
 8004a6c:	d8f6      	bhi.n	8004a5c <_printf_i+0x28>
 8004a6e:	a101      	add	r1, pc, #4	; (adr r1, 8004a74 <_printf_i+0x40>)
 8004a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a74:	08004acd 	.word	0x08004acd
 8004a78:	08004ae1 	.word	0x08004ae1
 8004a7c:	08004a5d 	.word	0x08004a5d
 8004a80:	08004a5d 	.word	0x08004a5d
 8004a84:	08004a5d 	.word	0x08004a5d
 8004a88:	08004a5d 	.word	0x08004a5d
 8004a8c:	08004ae1 	.word	0x08004ae1
 8004a90:	08004a5d 	.word	0x08004a5d
 8004a94:	08004a5d 	.word	0x08004a5d
 8004a98:	08004a5d 	.word	0x08004a5d
 8004a9c:	08004a5d 	.word	0x08004a5d
 8004aa0:	08004be5 	.word	0x08004be5
 8004aa4:	08004b0d 	.word	0x08004b0d
 8004aa8:	08004b9f 	.word	0x08004b9f
 8004aac:	08004a5d 	.word	0x08004a5d
 8004ab0:	08004a5d 	.word	0x08004a5d
 8004ab4:	08004c07 	.word	0x08004c07
 8004ab8:	08004a5d 	.word	0x08004a5d
 8004abc:	08004b0d 	.word	0x08004b0d
 8004ac0:	08004a5d 	.word	0x08004a5d
 8004ac4:	08004a5d 	.word	0x08004a5d
 8004ac8:	08004ba7 	.word	0x08004ba7
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	1d1a      	adds	r2, r3, #4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	602a      	str	r2, [r5, #0]
 8004ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004adc:	2301      	movs	r3, #1
 8004ade:	e09f      	b.n	8004c20 <_printf_i+0x1ec>
 8004ae0:	6820      	ldr	r0, [r4, #0]
 8004ae2:	682b      	ldr	r3, [r5, #0]
 8004ae4:	0607      	lsls	r7, r0, #24
 8004ae6:	f103 0104 	add.w	r1, r3, #4
 8004aea:	6029      	str	r1, [r5, #0]
 8004aec:	d501      	bpl.n	8004af2 <_printf_i+0xbe>
 8004aee:	681e      	ldr	r6, [r3, #0]
 8004af0:	e003      	b.n	8004afa <_printf_i+0xc6>
 8004af2:	0646      	lsls	r6, r0, #25
 8004af4:	d5fb      	bpl.n	8004aee <_printf_i+0xba>
 8004af6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004afa:	2e00      	cmp	r6, #0
 8004afc:	da03      	bge.n	8004b06 <_printf_i+0xd2>
 8004afe:	232d      	movs	r3, #45	; 0x2d
 8004b00:	4276      	negs	r6, r6
 8004b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b06:	485a      	ldr	r0, [pc, #360]	; (8004c70 <_printf_i+0x23c>)
 8004b08:	230a      	movs	r3, #10
 8004b0a:	e012      	b.n	8004b32 <_printf_i+0xfe>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	6820      	ldr	r0, [r4, #0]
 8004b10:	1d19      	adds	r1, r3, #4
 8004b12:	6029      	str	r1, [r5, #0]
 8004b14:	0605      	lsls	r5, r0, #24
 8004b16:	d501      	bpl.n	8004b1c <_printf_i+0xe8>
 8004b18:	681e      	ldr	r6, [r3, #0]
 8004b1a:	e002      	b.n	8004b22 <_printf_i+0xee>
 8004b1c:	0641      	lsls	r1, r0, #25
 8004b1e:	d5fb      	bpl.n	8004b18 <_printf_i+0xe4>
 8004b20:	881e      	ldrh	r6, [r3, #0]
 8004b22:	4853      	ldr	r0, [pc, #332]	; (8004c70 <_printf_i+0x23c>)
 8004b24:	2f6f      	cmp	r7, #111	; 0x6f
 8004b26:	bf0c      	ite	eq
 8004b28:	2308      	moveq	r3, #8
 8004b2a:	230a      	movne	r3, #10
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b32:	6865      	ldr	r5, [r4, #4]
 8004b34:	60a5      	str	r5, [r4, #8]
 8004b36:	2d00      	cmp	r5, #0
 8004b38:	bfa2      	ittt	ge
 8004b3a:	6821      	ldrge	r1, [r4, #0]
 8004b3c:	f021 0104 	bicge.w	r1, r1, #4
 8004b40:	6021      	strge	r1, [r4, #0]
 8004b42:	b90e      	cbnz	r6, 8004b48 <_printf_i+0x114>
 8004b44:	2d00      	cmp	r5, #0
 8004b46:	d04b      	beq.n	8004be0 <_printf_i+0x1ac>
 8004b48:	4615      	mov	r5, r2
 8004b4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b4e:	fb03 6711 	mls	r7, r3, r1, r6
 8004b52:	5dc7      	ldrb	r7, [r0, r7]
 8004b54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b58:	4637      	mov	r7, r6
 8004b5a:	42bb      	cmp	r3, r7
 8004b5c:	460e      	mov	r6, r1
 8004b5e:	d9f4      	bls.n	8004b4a <_printf_i+0x116>
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d10b      	bne.n	8004b7c <_printf_i+0x148>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	07de      	lsls	r6, r3, #31
 8004b68:	d508      	bpl.n	8004b7c <_printf_i+0x148>
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	6861      	ldr	r1, [r4, #4]
 8004b6e:	4299      	cmp	r1, r3
 8004b70:	bfde      	ittt	le
 8004b72:	2330      	movle	r3, #48	; 0x30
 8004b74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b7c:	1b52      	subs	r2, r2, r5
 8004b7e:	6122      	str	r2, [r4, #16]
 8004b80:	f8cd a000 	str.w	sl, [sp]
 8004b84:	464b      	mov	r3, r9
 8004b86:	aa03      	add	r2, sp, #12
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	f7ff fee4 	bl	8004958 <_printf_common>
 8004b90:	3001      	adds	r0, #1
 8004b92:	d14a      	bne.n	8004c2a <_printf_i+0x1f6>
 8004b94:	f04f 30ff 	mov.w	r0, #4294967295
 8004b98:	b004      	add	sp, #16
 8004b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	f043 0320 	orr.w	r3, r3, #32
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	4833      	ldr	r0, [pc, #204]	; (8004c74 <_printf_i+0x240>)
 8004ba8:	2778      	movs	r7, #120	; 0x78
 8004baa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	6829      	ldr	r1, [r5, #0]
 8004bb2:	061f      	lsls	r7, r3, #24
 8004bb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bb8:	d402      	bmi.n	8004bc0 <_printf_i+0x18c>
 8004bba:	065f      	lsls	r7, r3, #25
 8004bbc:	bf48      	it	mi
 8004bbe:	b2b6      	uxthmi	r6, r6
 8004bc0:	07df      	lsls	r7, r3, #31
 8004bc2:	bf48      	it	mi
 8004bc4:	f043 0320 	orrmi.w	r3, r3, #32
 8004bc8:	6029      	str	r1, [r5, #0]
 8004bca:	bf48      	it	mi
 8004bcc:	6023      	strmi	r3, [r4, #0]
 8004bce:	b91e      	cbnz	r6, 8004bd8 <_printf_i+0x1a4>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	f023 0320 	bic.w	r3, r3, #32
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	2310      	movs	r3, #16
 8004bda:	e7a7      	b.n	8004b2c <_printf_i+0xf8>
 8004bdc:	4824      	ldr	r0, [pc, #144]	; (8004c70 <_printf_i+0x23c>)
 8004bde:	e7e4      	b.n	8004baa <_printf_i+0x176>
 8004be0:	4615      	mov	r5, r2
 8004be2:	e7bd      	b.n	8004b60 <_printf_i+0x12c>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	6826      	ldr	r6, [r4, #0]
 8004be8:	6961      	ldr	r1, [r4, #20]
 8004bea:	1d18      	adds	r0, r3, #4
 8004bec:	6028      	str	r0, [r5, #0]
 8004bee:	0635      	lsls	r5, r6, #24
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	d501      	bpl.n	8004bf8 <_printf_i+0x1c4>
 8004bf4:	6019      	str	r1, [r3, #0]
 8004bf6:	e002      	b.n	8004bfe <_printf_i+0x1ca>
 8004bf8:	0670      	lsls	r0, r6, #25
 8004bfa:	d5fb      	bpl.n	8004bf4 <_printf_i+0x1c0>
 8004bfc:	8019      	strh	r1, [r3, #0]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	4615      	mov	r5, r2
 8004c04:	e7bc      	b.n	8004b80 <_printf_i+0x14c>
 8004c06:	682b      	ldr	r3, [r5, #0]
 8004c08:	1d1a      	adds	r2, r3, #4
 8004c0a:	602a      	str	r2, [r5, #0]
 8004c0c:	681d      	ldr	r5, [r3, #0]
 8004c0e:	6862      	ldr	r2, [r4, #4]
 8004c10:	2100      	movs	r1, #0
 8004c12:	4628      	mov	r0, r5
 8004c14:	f7fb fafc 	bl	8000210 <memchr>
 8004c18:	b108      	cbz	r0, 8004c1e <_printf_i+0x1ea>
 8004c1a:	1b40      	subs	r0, r0, r5
 8004c1c:	6060      	str	r0, [r4, #4]
 8004c1e:	6863      	ldr	r3, [r4, #4]
 8004c20:	6123      	str	r3, [r4, #16]
 8004c22:	2300      	movs	r3, #0
 8004c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c28:	e7aa      	b.n	8004b80 <_printf_i+0x14c>
 8004c2a:	6923      	ldr	r3, [r4, #16]
 8004c2c:	462a      	mov	r2, r5
 8004c2e:	4649      	mov	r1, r9
 8004c30:	4640      	mov	r0, r8
 8004c32:	47d0      	blx	sl
 8004c34:	3001      	adds	r0, #1
 8004c36:	d0ad      	beq.n	8004b94 <_printf_i+0x160>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	079b      	lsls	r3, r3, #30
 8004c3c:	d413      	bmi.n	8004c66 <_printf_i+0x232>
 8004c3e:	68e0      	ldr	r0, [r4, #12]
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	4298      	cmp	r0, r3
 8004c44:	bfb8      	it	lt
 8004c46:	4618      	movlt	r0, r3
 8004c48:	e7a6      	b.n	8004b98 <_printf_i+0x164>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	4632      	mov	r2, r6
 8004c4e:	4649      	mov	r1, r9
 8004c50:	4640      	mov	r0, r8
 8004c52:	47d0      	blx	sl
 8004c54:	3001      	adds	r0, #1
 8004c56:	d09d      	beq.n	8004b94 <_printf_i+0x160>
 8004c58:	3501      	adds	r5, #1
 8004c5a:	68e3      	ldr	r3, [r4, #12]
 8004c5c:	9903      	ldr	r1, [sp, #12]
 8004c5e:	1a5b      	subs	r3, r3, r1
 8004c60:	42ab      	cmp	r3, r5
 8004c62:	dcf2      	bgt.n	8004c4a <_printf_i+0x216>
 8004c64:	e7eb      	b.n	8004c3e <_printf_i+0x20a>
 8004c66:	2500      	movs	r5, #0
 8004c68:	f104 0619 	add.w	r6, r4, #25
 8004c6c:	e7f5      	b.n	8004c5a <_printf_i+0x226>
 8004c6e:	bf00      	nop
 8004c70:	08023035 	.word	0x08023035
 8004c74:	08023046 	.word	0x08023046

08004c78 <memmove>:
 8004c78:	4288      	cmp	r0, r1
 8004c7a:	b510      	push	{r4, lr}
 8004c7c:	eb01 0402 	add.w	r4, r1, r2
 8004c80:	d902      	bls.n	8004c88 <memmove+0x10>
 8004c82:	4284      	cmp	r4, r0
 8004c84:	4623      	mov	r3, r4
 8004c86:	d807      	bhi.n	8004c98 <memmove+0x20>
 8004c88:	1e43      	subs	r3, r0, #1
 8004c8a:	42a1      	cmp	r1, r4
 8004c8c:	d008      	beq.n	8004ca0 <memmove+0x28>
 8004c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c96:	e7f8      	b.n	8004c8a <memmove+0x12>
 8004c98:	4402      	add	r2, r0
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	428a      	cmp	r2, r1
 8004c9e:	d100      	bne.n	8004ca2 <memmove+0x2a>
 8004ca0:	bd10      	pop	{r4, pc}
 8004ca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004caa:	e7f7      	b.n	8004c9c <memmove+0x24>

08004cac <_sbrk_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4d06      	ldr	r5, [pc, #24]	; (8004cc8 <_sbrk_r+0x1c>)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	602b      	str	r3, [r5, #0]
 8004cb8:	f7fc f906 	bl	8000ec8 <_sbrk>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_sbrk_r+0x1a>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_sbrk_r+0x1a>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	20000748 	.word	0x20000748

08004ccc <memcpy>:
 8004ccc:	440a      	add	r2, r1
 8004cce:	4291      	cmp	r1, r2
 8004cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cd4:	d100      	bne.n	8004cd8 <memcpy+0xc>
 8004cd6:	4770      	bx	lr
 8004cd8:	b510      	push	{r4, lr}
 8004cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ce2:	4291      	cmp	r1, r2
 8004ce4:	d1f9      	bne.n	8004cda <memcpy+0xe>
 8004ce6:	bd10      	pop	{r4, pc}

08004ce8 <_realloc_r>:
 8004ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cec:	4680      	mov	r8, r0
 8004cee:	4614      	mov	r4, r2
 8004cf0:	460e      	mov	r6, r1
 8004cf2:	b921      	cbnz	r1, 8004cfe <_realloc_r+0x16>
 8004cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	f7ff bc49 	b.w	8004590 <_malloc_r>
 8004cfe:	b92a      	cbnz	r2, 8004d0c <_realloc_r+0x24>
 8004d00:	f7ff fbda 	bl	80044b8 <_free_r>
 8004d04:	4625      	mov	r5, r4
 8004d06:	4628      	mov	r0, r5
 8004d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d0c:	f000 f81b 	bl	8004d46 <_malloc_usable_size_r>
 8004d10:	4284      	cmp	r4, r0
 8004d12:	4607      	mov	r7, r0
 8004d14:	d802      	bhi.n	8004d1c <_realloc_r+0x34>
 8004d16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d1a:	d812      	bhi.n	8004d42 <_realloc_r+0x5a>
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	4640      	mov	r0, r8
 8004d20:	f7ff fc36 	bl	8004590 <_malloc_r>
 8004d24:	4605      	mov	r5, r0
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d0ed      	beq.n	8004d06 <_realloc_r+0x1e>
 8004d2a:	42bc      	cmp	r4, r7
 8004d2c:	4622      	mov	r2, r4
 8004d2e:	4631      	mov	r1, r6
 8004d30:	bf28      	it	cs
 8004d32:	463a      	movcs	r2, r7
 8004d34:	f7ff ffca 	bl	8004ccc <memcpy>
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f7ff fbbc 	bl	80044b8 <_free_r>
 8004d40:	e7e1      	b.n	8004d06 <_realloc_r+0x1e>
 8004d42:	4635      	mov	r5, r6
 8004d44:	e7df      	b.n	8004d06 <_realloc_r+0x1e>

08004d46 <_malloc_usable_size_r>:
 8004d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4a:	1f18      	subs	r0, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bfbc      	itt	lt
 8004d50:	580b      	ldrlt	r3, [r1, r0]
 8004d52:	18c0      	addlt	r0, r0, r3
 8004d54:	4770      	bx	lr
	...

08004d58 <_init>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	bf00      	nop
 8004d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5e:	bc08      	pop	{r3}
 8004d60:	469e      	mov	lr, r3
 8004d62:	4770      	bx	lr

08004d64 <_fini>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	bf00      	nop
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr
